{"version":3,"file":"js/chunk-vendors-da098988.97283acc.js","mappings":"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","sources":["webpack://benefit/./node_modules/@tensorflow/tfjs-backend-webgl/dist/addn_gpu.js","webpack://benefit/./node_modules/@tensorflow/tfjs-backend-webgl/dist/addn_packed_gpu.js","webpack://benefit/./node_modules/@tensorflow/tfjs-backend-webgl/dist/argminmax_gpu.js","webpack://benefit/./node_modules/@tensorflow/tfjs-backend-webgl/dist/argminmax_packed_gpu.js","webpack://benefit/./node_modules/@tensorflow/tfjs-backend-webgl/dist/avg_pool_backprop_gpu.js","webpack://benefit/./node_modules/@tensorflow/tfjs-backend-webgl/dist/backend_webgl.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class AddNProgram {\n    constructor(outputShape, shapes) {\n        this.outputShape = [];\n        this.outputShape = outputShape;\n        this.variableNames = shapes.map((_, i) => `T${i}`);\n        const snippets = [];\n        // Get target elements from every input tensor.\n        this.variableNames.forEach(variable => {\n            snippets.push(`float v${variable} = get${variable}AtOutCoords();`);\n        });\n        // Calculate the sum of all elements.\n        const operation = this.variableNames\n            .map(variable => {\n            return `v${variable}`;\n        })\n            .join(' + ');\n        this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        float result = ${operation};\n        setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkbl9ncHUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90ZmpzLWJhY2tlbmQtd2ViZ2wvc3JjL2FkZG5fZ3B1LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUlILE1BQU0sT0FBTyxXQUFXO0lBS3RCLFlBQVksV0FBcUIsRUFBRSxNQUFrQjtRQUhyRCxnQkFBVyxHQUFhLEVBQUUsQ0FBQztRQUl6QixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUMvQixJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFbkQsTUFBTSxRQUFRLEdBQWEsRUFBRSxDQUFDO1FBQzlCLCtDQUErQztRQUMvQyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUNwQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsUUFBUSxTQUFTLFFBQVEsZ0JBQWdCLENBQUMsQ0FBQztRQUNyRSxDQUFDLENBQUMsQ0FBQztRQUVILHFDQUFxQztRQUNyQyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsYUFBYTthQUNiLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUNkLE9BQU8sSUFBSSxRQUFRLEVBQUUsQ0FBQztRQUN4QixDQUFDLENBQUM7YUFDRCxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFbkMsSUFBSSxDQUFDLFFBQVEsR0FBRzs7VUFFVixRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQzs7eUJBRVosU0FBUzs7O0tBRzdCLENBQUM7SUFDSixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7R1BHUFVQcm9ncmFtfSBmcm9tICcuL2dwZ3B1X21hdGgnO1xuXG5leHBvcnQgY2xhc3MgQWRkTlByb2dyYW0gaW1wbGVtZW50cyBHUEdQVVByb2dyYW0ge1xuICB2YXJpYWJsZU5hbWVzOiBzdHJpbmdbXTtcbiAgb3V0cHV0U2hhcGU6IG51bWJlcltdID0gW107XG4gIHVzZXJDb2RlOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3Iob3V0cHV0U2hhcGU6IG51bWJlcltdLCBzaGFwZXM6IG51bWJlcltdW10pIHtcbiAgICB0aGlzLm91dHB1dFNoYXBlID0gb3V0cHV0U2hhcGU7XG4gICAgdGhpcy52YXJpYWJsZU5hbWVzID0gc2hhcGVzLm1hcCgoXywgaSkgPT4gYFQke2l9YCk7XG5cbiAgICBjb25zdCBzbmlwcGV0czogc3RyaW5nW10gPSBbXTtcbiAgICAvLyBHZXQgdGFyZ2V0IGVsZW1lbnRzIGZyb20gZXZlcnkgaW5wdXQgdGVuc29yLlxuICAgIHRoaXMudmFyaWFibGVOYW1lcy5mb3JFYWNoKHZhcmlhYmxlID0+IHtcbiAgICAgIHNuaXBwZXRzLnB1c2goYGZsb2F0IHYke3ZhcmlhYmxlfSA9IGdldCR7dmFyaWFibGV9QXRPdXRDb29yZHMoKTtgKTtcbiAgICB9KTtcblxuICAgIC8vIENhbGN1bGF0ZSB0aGUgc3VtIG9mIGFsbCBlbGVtZW50cy5cbiAgICBjb25zdCBvcGVyYXRpb24gPSB0aGlzLnZhcmlhYmxlTmFtZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCh2YXJpYWJsZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGB2JHt2YXJpYWJsZX1gO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAuam9pbignICsgJyk7XG5cbiAgICB0aGlzLnVzZXJDb2RlID0gYFxuICAgICAgdm9pZCBtYWluKCkge1xuICAgICAgICAke3NuaXBwZXRzLmpvaW4oJ1xcbiAgICAgICAgJyl9XG5cbiAgICAgICAgZmxvYXQgcmVzdWx0ID0gJHtvcGVyYXRpb259O1xuICAgICAgICBzZXRPdXRwdXQocmVzdWx0KTtcbiAgICAgIH1cbiAgICBgO1xuICB9XG59XG4iXX0=","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class AddNPackedProgram {\n    constructor(outputShape, shapes) {\n        this.outputShape = [];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.outputShape = outputShape;\n        this.variableNames = shapes.map((_, i) => `T${i}`);\n        const snippets = [];\n        // Get target elements from every input tensor.\n        this.variableNames.forEach(variable => {\n            snippets.push(`vec4 v${variable} = get${variable}AtOutCoords();`);\n        });\n        // Calculate the sum of all elements.\n        const operation = this.variableNames\n            .map(variable => {\n            return `v${variable}`;\n        })\n            .join(' + ');\n        this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        vec4 result = ${operation};\n        setOutput(result);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkbl9wYWNrZWRfZ3B1LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vdGZqcy1iYWNrZW5kLXdlYmdsL3NyYy9hZGRuX3BhY2tlZF9ncHUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBSUgsTUFBTSxPQUFPLGlCQUFpQjtJQU81QixZQUFZLFdBQXFCLEVBQUUsTUFBa0I7UUFMckQsZ0JBQVcsR0FBYSxFQUFFLENBQUM7UUFFM0IsaUJBQVksR0FBRyxJQUFJLENBQUM7UUFDcEIsaUJBQVksR0FBRyxJQUFJLENBQUM7UUFHbEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDL0IsSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRW5ELE1BQU0sUUFBUSxHQUFhLEVBQUUsQ0FBQztRQUM5QiwrQ0FBK0M7UUFDL0MsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDcEMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLFFBQVEsU0FBUyxRQUFRLGdCQUFnQixDQUFDLENBQUM7UUFDcEUsQ0FBQyxDQUFDLENBQUM7UUFFSCxxQ0FBcUM7UUFDckMsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLGFBQWE7YUFDYixHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDZCxPQUFPLElBQUksUUFBUSxFQUFFLENBQUM7UUFDeEIsQ0FBQyxDQUFDO2FBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRW5DLElBQUksQ0FBQyxRQUFRLEdBQUc7O1VBRVYsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7O3dCQUViLFNBQVM7OztLQUc1QixDQUFDO0lBQ0osQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge0dQR1BVUHJvZ3JhbX0gZnJvbSAnLi9ncGdwdV9tYXRoJztcblxuZXhwb3J0IGNsYXNzIEFkZE5QYWNrZWRQcm9ncmFtIGltcGxlbWVudHMgR1BHUFVQcm9ncmFtIHtcbiAgdmFyaWFibGVOYW1lczogc3RyaW5nW107XG4gIG91dHB1dFNoYXBlOiBudW1iZXJbXSA9IFtdO1xuICB1c2VyQ29kZTogc3RyaW5nO1xuICBwYWNrZWRJbnB1dHMgPSB0cnVlO1xuICBwYWNrZWRPdXRwdXQgPSB0cnVlO1xuXG4gIGNvbnN0cnVjdG9yKG91dHB1dFNoYXBlOiBudW1iZXJbXSwgc2hhcGVzOiBudW1iZXJbXVtdKSB7XG4gICAgdGhpcy5vdXRwdXRTaGFwZSA9IG91dHB1dFNoYXBlO1xuICAgIHRoaXMudmFyaWFibGVOYW1lcyA9IHNoYXBlcy5tYXAoKF8sIGkpID0+IGBUJHtpfWApO1xuXG4gICAgY29uc3Qgc25pcHBldHM6IHN0cmluZ1tdID0gW107XG4gICAgLy8gR2V0IHRhcmdldCBlbGVtZW50cyBmcm9tIGV2ZXJ5IGlucHV0IHRlbnNvci5cbiAgICB0aGlzLnZhcmlhYmxlTmFtZXMuZm9yRWFjaCh2YXJpYWJsZSA9PiB7XG4gICAgICBzbmlwcGV0cy5wdXNoKGB2ZWM0IHYke3ZhcmlhYmxlfSA9IGdldCR7dmFyaWFibGV9QXRPdXRDb29yZHMoKTtgKTtcbiAgICB9KTtcblxuICAgIC8vIENhbGN1bGF0ZSB0aGUgc3VtIG9mIGFsbCBlbGVtZW50cy5cbiAgICBjb25zdCBvcGVyYXRpb24gPSB0aGlzLnZhcmlhYmxlTmFtZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCh2YXJpYWJsZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGB2JHt2YXJpYWJsZX1gO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAuam9pbignICsgJyk7XG5cbiAgICB0aGlzLnVzZXJDb2RlID0gYFxuICAgICAgdm9pZCBtYWluKCkge1xuICAgICAgICAke3NuaXBwZXRzLmpvaW4oJ1xcbiAgICAgICAgJyl9XG5cbiAgICAgICAgdmVjNCByZXN1bHQgPSAke29wZXJhdGlvbn07XG4gICAgICAgIHNldE91dHB1dChyZXN1bHQpO1xuICAgICAgfVxuICAgIGA7XG4gIH1cbn1cbiJdfQ==","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ArgMinMaxProgram {\n    constructor(reduceInfo, op, firstPass) {\n        this.variableNames = ['A'];\n        const { windowSize, batchSize, outSize } = reduceInfo;\n        if (!firstPass) {\n            this.variableNames.push('bestIndicesA');\n        }\n        this.outputShape = [batchSize, outSize];\n        const compOp = (op === 'max') ? '>' : '<';\n        const indexSnippet = firstPass ?\n            'inOffset + i;' :\n            'round(getBestIndicesA(batch, inOffset + i));';\n        this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          int inIdx = ${indexSnippet};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${compOp} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJnbWlubWF4X2dwdS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3RmanMtYmFja2VuZC13ZWJnbC9zcmMvYXJnbWlubWF4X2dwdS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFLSCxNQUFNLE9BQU8sZ0JBQWdCO0lBSzNCLFlBQ0ksVUFBbUMsRUFBRSxFQUFlLEVBQ3BELFNBQWtCO1FBTnRCLGtCQUFhLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQU9wQixNQUFNLEVBQUMsVUFBVSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUMsR0FBRyxVQUFVLENBQUM7UUFDcEQsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNkLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1NBQ3pDO1FBQ0QsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN4QyxNQUFNLE1BQU0sR0FBRyxDQUFDLEVBQUUsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFDMUMsTUFBTSxZQUFZLEdBQUcsU0FBUyxDQUFDLENBQUM7WUFDNUIsZUFBZSxDQUFDLENBQUM7WUFDakIsOENBQThDLENBQUM7UUFFbkQsSUFBSSxDQUFDLFFBQVEsR0FBRzs7Ozs7a0NBS2MsVUFBVTs7Ozs7OEJBS2QsVUFBVTt3QkFDaEIsWUFBWTs7MEJBRVYsTUFBTTs7Ozs7OztLQU8zQixDQUFDO0lBQ0osQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge2JhY2tlbmRfdXRpbH0gZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcbmltcG9ydCB7R1BHUFVQcm9ncmFtfSBmcm9tICcuL2dwZ3B1X21hdGgnO1xuXG5leHBvcnQgY2xhc3MgQXJnTWluTWF4UHJvZ3JhbSBpbXBsZW1lbnRzIEdQR1BVUHJvZ3JhbSB7XG4gIHZhcmlhYmxlTmFtZXMgPSBbJ0EnXTtcbiAgb3V0cHV0U2hhcGU6IG51bWJlcltdO1xuICB1c2VyQ29kZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgcmVkdWNlSW5mbzogYmFja2VuZF91dGlsLlJlZHVjZUluZm8sIG9wOiAnbWF4J3wnbWluJyxcbiAgICAgIGZpcnN0UGFzczogYm9vbGVhbikge1xuICAgIGNvbnN0IHt3aW5kb3dTaXplLCBiYXRjaFNpemUsIG91dFNpemV9ID0gcmVkdWNlSW5mbztcbiAgICBpZiAoIWZpcnN0UGFzcykge1xuICAgICAgdGhpcy52YXJpYWJsZU5hbWVzLnB1c2goJ2Jlc3RJbmRpY2VzQScpO1xuICAgIH1cbiAgICB0aGlzLm91dHB1dFNoYXBlID0gW2JhdGNoU2l6ZSwgb3V0U2l6ZV07XG4gICAgY29uc3QgY29tcE9wID0gKG9wID09PSAnbWF4JykgPyAnPicgOiAnPCc7XG4gICAgY29uc3QgaW5kZXhTbmlwcGV0ID0gZmlyc3RQYXNzID9cbiAgICAgICAgJ2luT2Zmc2V0ICsgaTsnIDpcbiAgICAgICAgJ3JvdW5kKGdldEJlc3RJbmRpY2VzQShiYXRjaCwgaW5PZmZzZXQgKyBpKSk7JztcblxuICAgIHRoaXMudXNlckNvZGUgPSBgXG4gICAgICB2b2lkIG1haW4oKSB7XG4gICAgICAgIGl2ZWMyIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xuICAgICAgICBpbnQgYmF0Y2ggPSBjb29yZHNbMF07XG4gICAgICAgIGludCBvdXRJZHggPSBjb29yZHNbMV07XG4gICAgICAgIGludCBpbk9mZnNldCA9IG91dElkeCAqICR7d2luZG93U2l6ZX07XG5cbiAgICAgICAgaW50IGJlc3RJbmRleCA9IGluT2Zmc2V0O1xuICAgICAgICBmbG9hdCBiZXN0VmFsdWUgPSBnZXRBKGJhdGNoLCBiZXN0SW5kZXgpO1xuXG4gICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgJHt3aW5kb3dTaXplfTsgaSsrKSB7XG4gICAgICAgICAgaW50IGluSWR4ID0gJHtpbmRleFNuaXBwZXR9O1xuICAgICAgICAgIGZsb2F0IGNhbmRpZGF0ZSA9IGdldEEoYmF0Y2gsIGluSWR4KTtcbiAgICAgICAgICBpZiAoY2FuZGlkYXRlICR7Y29tcE9wfSBiZXN0VmFsdWUpIHtcbiAgICAgICAgICAgIGJlc3RWYWx1ZSA9IGNhbmRpZGF0ZTtcbiAgICAgICAgICAgIGJlc3RJbmRleCA9IGluSWR4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzZXRPdXRwdXQoZmxvYXQoYmVzdEluZGV4KSk7XG4gICAgICB9XG4gICAgYDtcbiAgfVxufVxuIl19","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class ArgMinMaxPackedProgram {\n    constructor(shape, windowSize, op, firstPass) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        util.assert(shape.length > 2, () => `Packed arg${op.charAt(0).toUpperCase() +\n            op.slice(1)} supports only inputs with rank above 2.`);\n        const inSize = shape[shape.length - 1];\n        const outSize = Math.ceil(inSize / windowSize);\n        this.outputShape = shape.slice(0, -1);\n        if (outSize > 1) {\n            this.outputShape.push(outSize);\n        }\n        if (!firstPass) {\n            this.variableNames.push('bestIndicesA');\n        }\n        const outShape = this.outputShape;\n        const rank = outShape.length;\n        const dtype = getCoordsDataType(rank);\n        const coords = getChannels('coords', rank);\n        let sourceLocSetup;\n        let sourceRank;\n        if (outSize === 1) {\n            sourceRank = rank + 1;\n            const sourceLocDType = getCoordsDataType(sourceRank);\n            sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 2]};`;\n        }\n        else {\n            sourceRank = rank;\n            sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords[rank - 2]};`;\n        }\n        const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n        const inChannel = '.' + channels[sourceRank - 1]; // e.g. \".b\" for rank 3.\n        const intChannels = channels.map(x => 'int ' + x);\n        const srcRCoords = getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n        const srcGCoords = getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n        const srcBCoords = getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n        const srcACoords = getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n        const compOp = (op === 'max') ? 'greaterThan' : 'lessThan';\n        const fetchCandidateIdx = firstPass ? '' : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n        const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n        const getBestIndicesAChannelSnippet = firstPass ? '' : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n        this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class AvgPool2DBackpropProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy'];\n        this.outputShape = convInfo.inShape;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const avgMultiplier = 1 / (filterHeight * filterWidth);\n        this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth};\n            wC+= ${dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\nexport class AvgPool3DBackpropProgram {\n    constructor(convInfo) {\n        this.variableNames = ['dy'];\n        this.outputShape = convInfo.inShape;\n        const filterDepth = convInfo.filterDepth;\n        const filterHeight = convInfo.filterHeight;\n        const filterWidth = convInfo.filterWidth;\n        const strideDepth = convInfo.strideDepth;\n        const strideHeight = convInfo.strideHeight;\n        const strideWidth = convInfo.strideWidth;\n        const dilationDepth = convInfo.dilationDepth;\n        const dilationHeight = convInfo.dilationHeight;\n        const dilationWidth = convInfo.dilationWidth;\n        const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n        const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n        const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n        const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n        const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n        const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n        const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n        this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import webgl flags.\nimport './flags_webgl';\nimport { backend_util, buffer, DataStorage, engine, env, kernel_impls, KernelBackend, nextFrame, scalar, tidy, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext } from './canvas_util';\nimport { DecodeMatrixProgram } from './decode_matrix_gpu';\nimport { DecodeMatrixPackedProgram } from './decode_matrix_packed_gpu';\nimport { EncodeFloatProgram } from './encode_float_gpu';\nimport { EncodeFloatPackedProgram } from './encode_float_packed_gpu';\nimport { EncodeMatrixProgram } from './encode_matrix_gpu';\nimport { EncodeMatrixPackedProgram } from './encode_matrix_packed_gpu';\nimport { GPGPUContext } from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport { getUniformLocations } from './gpgpu_math';\nimport { simpleAbsImplCPU } from './kernel_utils/shared';\nimport { PackProgram } from './pack_gpu';\nimport { ReshapePackedProgram } from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport { TextureUsage } from './tex_util';\nimport { TextureManager } from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport { UnaryOpProgram } from './unaryop_gpu';\nimport { UnaryOpPackedProgram } from './unaryop_packed_gpu';\nimport { UnpackProgram } from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\nconst whereImpl = kernel_impls.whereImpl;\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\nconst binaryCaches = {};\nexport function getBinaryCache(webGLVersion) {\n    if (webGLVersion in binaryCaches) {\n        return binaryCaches[webGLVersion];\n    }\n    binaryCaches[webGLVersion] = {};\n    return binaryCaches[webGLVersion];\n}\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD = env().getNumber('CPU_HANDOFF_SIZE_THRESHOLD');\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning() {\n    if (env().global.screen == null) {\n        return 1024; // 1 GB.\n    }\n    return (env().global.screen.height * env().global.screen.width *\n        window.devicePixelRatio) *\n        BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\nclass MathBackendWebGL extends KernelBackend {\n    nextDataId() {\n        return MathBackendWebGL.nextDataId++;\n    }\n    constructor(gpuResource) {\n        super();\n        // Maps data ids that have a pending read operation, to list of subscribers.\n        this.pendingRead = new WeakMap();\n        // List of data ids that are scheduled for disposal, but are waiting on a\n        // pending read operation.\n        this.pendingDisposal = new WeakSet();\n        // Used to count the number of 'shallow' sliced tensors that point to the\n        // same data id.\n        this.dataRefCount = new WeakMap();\n        this.numBytesInGPU = 0;\n        // Accumulated time spent (including blocking) in uploading data to webgl.\n        this.uploadWaitMs = 0;\n        // Accumulated time spent (including blocking in downloading data from webgl.\n        this.downloadWaitMs = 0;\n        // record the last manual GL Flush time.\n        this.lastGlFlushTime = 0;\n        this.warnedAboutMemory = false;\n        this.pendingDeletes = 0;\n        this.disposed = false;\n        if (!env().getBool('HAS_WEBGL')) {\n            throw new Error('WebGL is not supported on this device');\n        }\n        let newGPGPU;\n        if (gpuResource != null) {\n            if (gpuResource instanceof GPGPUContext) {\n                newGPGPU = gpuResource;\n            }\n            else {\n                const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'), gpuResource);\n                newGPGPU = new GPGPUContext(gl);\n            }\n            this.binaryCache = {};\n            this.gpgpuCreatedLocally = false;\n        }\n        else {\n            const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n            newGPGPU = new GPGPUContext(gl);\n            this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n            this.gpgpuCreatedLocally = true;\n        }\n        this.gpgpu = newGPGPU;\n        this.canvas = this.gpgpu.gl.canvas;\n        this.textureManager = new TextureManager(this.gpgpu);\n        this.numMBBeforeWarning = numMBBeforeWarning();\n        this.texData = new DataStorage(this, engine());\n    }\n    numDataIds() {\n        return this.texData.numDataIds() - this.pendingDeletes;\n    }\n    // Writes a new entry to the data store with a WebGL texture, and registers it\n    // to the texture manager.\n    writeTexture(texture, shape, dtype, texHeight, texWidth, channels) {\n        // Temporarily create an tensor info to make the texture compatible with\n        // the runWebGLProgram's input.\n        const input = this.makeTensorInfo(shape, dtype);\n        const inData = this.texData.get(input.dataId);\n        // Even though the input texture could be unpacked or dense packed, it is\n        // always considered as unpacked for EncodeMatrixProgram.\n        inData.isPacked = false;\n        // Bind texture to the input tensor.\n        inData.texture = { texture, texShape: [texHeight, texWidth] };\n        inData.texShape = [texHeight, texWidth];\n        const shapeAs3D = webgl_util.getShapeAs3D(shape);\n        const program = new EncodeMatrixProgram(shapeAs3D, false /* isByteArray */, channels);\n        const output = this.runWebGLProgram(program, [input], dtype, [[texHeight, texWidth]]);\n        output.shape = shape;\n        // Unbind the texture from the input tensor to avoid the texture being\n        // released.\n        inData.texture = null;\n        this.disposeIntermediateTensorInfo(input);\n        return output.dataId;\n    }\n    write(values, shape, dtype) {\n        if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||\n            env().getBool('DEBUG')) {\n            this.checkNumericalProblems(values);\n        }\n        if (dtype === 'complex64' && values != null) {\n            throw new Error(`Cannot write to a complex64 dtype. ` +\n                `Please use tf.complex(real, imag).`);\n        }\n        const dataId = { id: this.nextDataId() };\n        this.texData.set(dataId, { shape, dtype, values, usage: TextureUsage.UPLOAD, refCount: 1 });\n        return dataId;\n    }\n    /** Return refCount of a `TensorData`. */\n    refCount(dataId) {\n        if (this.texData.has(dataId)) {\n            const tensorData = this.texData.get(dataId);\n            return tensorData.refCount;\n        }\n        return 0;\n    }\n    /** Increase refCount of a `TextureData`. */\n    incRef(dataId) {\n        const texData = this.texData.get(dataId);\n        texData.refCount++;\n    }\n    /** Decrease refCount of a `TextureData`. */\n    decRef(dataId) {\n        if (this.texData.has(dataId)) {\n            const texData = this.texData.get(dataId);\n            texData.refCount--;\n        }\n    }\n    move(dataId, values, shape, dtype, refCount) {\n        if (env().getBool('DEBUG')) {\n            this.checkNumericalProblems(values);\n        }\n        if (dtype === 'complex64') {\n            throw new Error(`Cannot write to a complex64 dtype. ` +\n                `Please use tf.complex(real, imag).`);\n        }\n        this.texData.set(dataId, { shape, dtype, values, usage: TextureUsage.UPLOAD, refCount });\n    }\n    disposeIntermediateTensorInfo(tensorInfo) {\n        this.disposeData(tensorInfo.dataId);\n    }\n    readSync(dataId) {\n        const texData = this.texData.get(dataId);\n        const { values, dtype, complexTensorInfos, slice, shape, isPacked } = texData;\n        // The presence of `slice` indicates this tensor is a shallow slice of a\n        // different tensor, and is using that original tensor's texture. Run\n        // `clone` in order to copy that texture and read from it.\n        if (slice != null) {\n            let program;\n            if (isPacked) {\n                program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n            }\n            else {\n                program = new UnaryOpProgram(shape, unary_op.CLONE);\n            }\n            const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);\n            const data = this.readSync(res.dataId);\n            this.disposeIntermediateTensorInfo(res);\n            return data;\n        }\n        if (values != null) {\n            return this.convertAndCacheOnCPU(dataId);\n        }\n        if (dtype === 'string') {\n            return values;\n        }\n        const shouldTimeProgram = this.activeTimers != null;\n        let start;\n        if (shouldTimeProgram) {\n            start = util.now();\n        }\n        let result;\n        if (dtype === 'complex64') {\n            const realValues = this.readSync(complexTensorInfos.real.dataId);\n            const imagValues = this.readSync(complexTensorInfos.imag.dataId);\n            result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n        }\n        else {\n            result = this.getValuesFromTexture(dataId);\n        }\n        if (shouldTimeProgram) {\n            this.downloadWaitMs += util.now() - start;\n        }\n        return this.convertAndCacheOnCPU(dataId, result);\n    }\n    async read(dataId) {\n        if (this.pendingRead.has(dataId)) {\n            const subscribers = this.pendingRead.get(dataId);\n            return new Promise(resolve => subscribers.push(resolve));\n        }\n        const texData = this.texData.get(dataId);\n        const { values, shape, slice, dtype, complexTensorInfos, isPacked } = texData;\n        // The presence of `slice` indicates this tensor is a shallow slice of a\n        // different tensor, and is using that original tensor's texture. Run\n        // `clone` in order to copy that texture and read from it.\n        if (slice != null) {\n            let program;\n            if (isPacked) {\n                program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n            }\n            else {\n                program = new UnaryOpProgram(shape, unary_op.CLONE);\n            }\n            const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);\n            const data = this.read(res.dataId);\n            this.disposeIntermediateTensorInfo(res);\n            return data;\n        }\n        if (values != null) {\n            return this.convertAndCacheOnCPU(dataId);\n        }\n        if (env().getBool('DEBUG')) {\n            // getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') caused a blocking GPU call.\n            // For performance reason, only check it for debugging. In production,\n            // it doesn't handle this use case anyway, so behavior is not changed.\n            if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n                env().getNumber('WEBGL_VERSION') === 2) {\n                throw new Error(`tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n                    `WEBGL_VERSION=2 not yet supported.`);\n            }\n        }\n        let buffer = null;\n        let tmpDownloadTarget;\n        if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n            // Possibly copy the texture into a buffer before inserting a fence.\n            tmpDownloadTarget = this.decode(dataId);\n            const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n            buffer = this.gpgpu.createBufferFromTexture(tmpData.texture.texture, ...tex_util.getDenseTexShape(shape));\n        }\n        this.pendingRead.set(dataId, []);\n        if (dtype !== 'complex64') {\n            // Create a fence and wait for it to resolve.\n            await this.gpgpu.createAndWaitForFence();\n        }\n        // Download the values from the GPU.\n        let vals;\n        if (dtype === 'complex64') {\n            const ps = await Promise.all([\n                this.read(complexTensorInfos.real.dataId),\n                this.read(complexTensorInfos.imag.dataId)\n            ]);\n            const realValues = ps[0];\n            const imagValues = ps[1];\n            vals = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n        }\n        else if (buffer == null) {\n            vals = this.getValuesFromTexture(dataId);\n        }\n        else {\n            const size = util.sizeFromShape(shape);\n            vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n        }\n        if (tmpDownloadTarget != null) {\n            this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n        }\n        if (buffer != null) {\n            const gl = this.gpgpu.gl;\n            webgl_util.callAndCheck(gl, () => gl.deleteBuffer(buffer));\n        }\n        const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n        const subscribers = this.pendingRead.get(dataId);\n        this.pendingRead.delete(dataId);\n        // Notify all pending reads.\n        subscribers.forEach(resolve => resolve(dTypeVals));\n        if (this.pendingDisposal.has(dataId)) {\n            this.pendingDisposal.delete(dataId);\n            if (this.disposeData(dataId)) {\n                engine().removeDataId(dataId, this);\n            }\n            this.pendingDeletes--;\n        }\n        return dTypeVals;\n    }\n    /**\n     * Read tensor to a new texture that is densely packed for ease of use.\n     * @param dataId The source tensor.\n     * @param options\n     *     customTexShape: Optional. If set, will use the user defined texture\n     *     shape to create the texture.\n     */\n    readToGPU(dataId, options = {}) {\n        const texData = this.texData.get(dataId);\n        const { values, shape, slice, dtype, isPacked, texture } = texData;\n        if (dtype === 'complex64') {\n            throw new Error('Does not support reading texture for complex64 dtype.');\n        }\n        // The presence of `slice` indicates this tensor is a shallow slice of a\n        // different tensor, and is using that original tensor's texture. Run\n        // `clone` in order to copy that texture and read from it.\n        if (slice != null) {\n            let program;\n            if (isPacked) {\n                program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n            }\n            else {\n                program = new UnaryOpProgram(shape, unary_op.CLONE);\n            }\n            const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);\n            const gpuResouorce = this.readToGPU(res, options);\n            this.disposeIntermediateTensorInfo(res);\n            return gpuResouorce;\n        }\n        if (texture == null) {\n            if (values != null) {\n                throw new Error('Data is not on GPU but on CPU.');\n            }\n            else {\n                throw new Error('There is no data on GPU or CPU.');\n            }\n        }\n        // Decode the texture so that it is stored densely (using four channels).\n        const tmpTarget = this.decode(dataId, options.customTexShape);\n        // Make engine track this tensor, so that we can dispose it later.\n        const tensorRef = engine().makeTensorFromTensorInfo(tmpTarget);\n        const tmpData = this.texData.get(tmpTarget.dataId);\n        return Object.assign({ tensorRef }, tmpData.texture);\n    }\n    bufferSync(t) {\n        const data = this.readSync(t.dataId);\n        if (t.dtype === 'string') {\n            try {\n                // Decode the bytes into string.\n                const strings = data.map(d => util.decodeString(d));\n                return buffer(t.shape, t.dtype, strings);\n            }\n            catch (_a) {\n                throw new Error('Failed to decode encoded string bytes into utf-8');\n            }\n        }\n        return buffer(t.shape, t.dtype, data);\n    }\n    checkNumericalProblems(values) {\n        if (values == null) {\n            return;\n        }\n        for (let i = 0; i < values.length; i++) {\n            const num = values[i];\n            if (!webgl_util.canBeRepresented(num)) {\n                if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n                    throw Error(`The value ${num} cannot be represented with your ` +\n                        `current settings. Consider enabling float32 rendering: ` +\n                        `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n                }\n                throw Error(`The value ${num} cannot be represented on this device.`);\n            }\n        }\n    }\n    getValuesFromTexture(dataId) {\n        const { shape, dtype, isPacked } = this.texData.get(dataId);\n        const size = util.sizeFromShape(shape);\n        if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n            const tmpTarget = this.decode(dataId);\n            const tmpData = this.texData.get(tmpTarget.dataId);\n            const vals = this.gpgpu\n                .downloadMatrixFromPackedTexture(tmpData.texture.texture, ...tex_util.getDenseTexShape(shape))\n                .subarray(0, size);\n            this.disposeIntermediateTensorInfo(tmpTarget);\n            return vals;\n        }\n        const shouldUsePackedProgram = env().getBool('WEBGL_PACK') && isPacked === true;\n        const outputShape = shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n        const program = shouldUsePackedProgram ?\n            new EncodeFloatPackedProgram(outputShape) :\n            new EncodeFloatProgram(outputShape);\n        const output = this.runWebGLProgram(program, [{ shape: outputShape, dtype, dataId }], 'float32');\n        const tmpData = this.texData.get(output.dataId);\n        const vals = this.gpgpu\n            .downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture.texture, tmpData.texShape[0], tmpData.texShape[1])\n            .subarray(0, size);\n        this.disposeIntermediateTensorInfo(output);\n        return vals;\n    }\n    timerAvailable() {\n        return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;\n    }\n    time(f) {\n        const oldActiveTimers = this.activeTimers;\n        const newActiveTimers = [];\n        let outerMostTime = false;\n        if (this.programTimersStack == null) {\n            this.programTimersStack = newActiveTimers;\n            outerMostTime = true;\n        }\n        else {\n            this.activeTimers.push(newActiveTimers);\n        }\n        this.activeTimers = newActiveTimers;\n        f();\n        // needing to split these up because util.flatten only accepts certain types\n        const flattenedActiveTimerQueries = util.flatten(this.activeTimers.map((d) => d.query))\n            .filter(d => d != null);\n        const flattenedActiveTimerNames = util.flatten(this.activeTimers.map((d) => d.name))\n            .filter(d => d != null);\n        this.activeTimers = oldActiveTimers;\n        if (outerMostTime) {\n            this.programTimersStack = null;\n        }\n        const res = {\n            uploadWaitMs: this.uploadWaitMs,\n            downloadWaitMs: this.downloadWaitMs,\n            kernelMs: null,\n            wallMs: null // will be filled by the engine\n        };\n        return (async () => {\n            if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') >\n                0) {\n                const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n                res['kernelMs'] = util.sum(kernelMs);\n                res['getExtraProfileInfo'] = () => kernelMs\n                    .map((d, i) => ({ name: flattenedActiveTimerNames[i], ms: d }))\n                    .map(d => `${d.name}: ${d.ms}`)\n                    .join(', ');\n            }\n            else {\n                res['kernelMs'] = {\n                    error: 'WebGL query timers are not supported in this environment.'\n                };\n            }\n            this.uploadWaitMs = 0;\n            this.downloadWaitMs = 0;\n            return res;\n        })();\n    }\n    memory() {\n        return {\n            unreliable: false,\n            numBytesInGPU: this.numBytesInGPU,\n            numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n            numBytesInGPUFree: this.textureManager.numBytesFree\n        };\n    }\n    startTimer() {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            return this.gpgpu.beginQuery();\n        }\n        return { startMs: util.now(), endMs: null };\n    }\n    endTimer(query) {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            this.gpgpu.endQuery();\n            return query;\n        }\n        query.endMs = util.now();\n        return query;\n    }\n    async getQueryTime(query) {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            return this.gpgpu.waitForQueryAndGetTime(query);\n        }\n        const timerQuery = query;\n        return timerQuery.endMs - timerQuery.startMs;\n    }\n    /**\n     * Decrease the RefCount on the dataId and dispose the memory if the dataId\n     * has 0 refCount. If there are pending read on the data, the disposal would\n     * added to the pending delete queue. Return true if the dataId is removed\n     * from backend or the backend does not contain the dataId, false if the\n     * dataId is not removed. Memory may or may not be released even when dataId\n     * is removed, which also depends on dataRefCount, see `releaseGPU`.\n     * @param dataId\n     * @oaram force Optional, remove the data regardless of refCount\n     */\n    disposeData(dataId, force = false) {\n        if (this.pendingDisposal.has(dataId)) {\n            return false;\n        }\n        // No-op if already disposed.\n        if (!this.texData.has(dataId)) {\n            return true;\n        }\n        // if force flag is set, change refCount to 0, this would ensure disposal\n        // when added to the pendingDisposal queue. Memory may or may not be\n        // released, which also depends on dataRefCount, see `releaseGPU`.\n        if (force) {\n            this.texData.get(dataId).refCount = 0;\n        }\n        else {\n            this.texData.get(dataId).refCount--;\n        }\n        if (!force && this.texData.get(dataId).refCount > 0) {\n            return false;\n        }\n        if (this.pendingRead.has(dataId)) {\n            this.pendingDisposal.add(dataId);\n            this.pendingDeletes++;\n            return false;\n        }\n        this.releaseGPUData(dataId);\n        const { complexTensorInfos } = this.texData.get(dataId);\n        if (complexTensorInfos != null) {\n            this.disposeData(complexTensorInfos.real.dataId, force);\n            this.disposeData(complexTensorInfos.imag.dataId, force);\n        }\n        this.texData.delete(dataId);\n        return true;\n    }\n    releaseGPUData(dataId) {\n        const { texture, dtype, texShape, usage, isPacked, slice } = this.texData.get(dataId);\n        const key = slice && slice.origDataId || dataId;\n        const refCount = this.dataRefCount.get(key);\n        if (refCount > 1) {\n            this.dataRefCount.set(key, refCount - 1);\n        }\n        else {\n            this.dataRefCount.delete(key);\n            if (texture != null) {\n                this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n                this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n            }\n        }\n        const texData = this.texData.get(dataId);\n        texData.texture = null;\n        texData.texShape = null;\n        texData.isPacked = false;\n        texData.slice = null;\n    }\n    getTexture(dataId) {\n        this.uploadToGPU(dataId);\n        return this.texData.get(dataId).texture.texture;\n    }\n    /**\n     * Returns internal information for the specific data bucket. Used in unit\n     * tests.\n     */\n    getDataInfo(dataId) {\n        return this.texData.get(dataId);\n    }\n    /*\n    Tests whether all the inputs to an op are small and on the CPU. This heuristic\n    determines when it would be faster to execute a kernel on the CPU. WebGL\n    kernels opt into running this check and forwarding when appropriate.\n    TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n    sustainable strategy for optimizing backend execution of ops.\n     */\n    shouldExecuteOnCPU(inputs, sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD) {\n        return env().getBool('WEBGL_CPU_FORWARD') &&\n            inputs.every(input => this.texData.get(input.dataId).texture == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n    }\n    getGPGPUContext() {\n        return this.gpgpu;\n    }\n    where(condition) {\n        backend_util.warn('tf.where() in webgl locks the UI thread. ' +\n            'Call tf.whereAsync() instead');\n        const condVals = condition.dataSync();\n        return whereImpl(condition.shape, condVals);\n    }\n    packedUnaryOp(x, op, dtype) {\n        const program = new UnaryOpPackedProgram(x.shape, op);\n        const outInfo = this.compileAndRun(program, [x], dtype);\n        return engine().makeTensorFromTensorInfo(outInfo);\n    }\n    // TODO(msoulanille) remove this once the backend has been modularized\n    // a copy is needed here to break a circular dependency.\n    // Also remove the op from unary_op.\n    abs(x) {\n        // TODO: handle cases when x is complex.\n        if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n            const outValues = simpleAbsImplCPU(this.texData.get(x.dataId).values);\n            return this.makeOutput(x.shape, x.dtype, outValues);\n        }\n        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n            return this.packedUnaryOp(x, unary_op.ABS, x.dtype);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n        const outInfo = this.compileAndRun(program, [x]);\n        return engine().makeTensorFromTensorInfo(outInfo);\n    }\n    makeTensorInfo(shape, dtype, values) {\n        let dataId;\n        if (dtype === 'string' && values != null && values.length > 0 &&\n            util.isString(values[0])) {\n            const encodedValues = values.map(d => util.encodeString(d));\n            dataId = this.write(encodedValues, shape, dtype);\n        }\n        else {\n            dataId = this.write(values, shape, dtype);\n        }\n        this.texData.get(dataId).usage = null;\n        return { dataId, shape, dtype };\n    }\n    makeOutput(shape, dtype, values) {\n        return engine().makeTensorFromTensorInfo(this.makeTensorInfo(shape, dtype, values), this);\n    }\n    unpackTensor(input) {\n        const program = new UnpackProgram(input.shape);\n        return this.runWebGLProgram(program, [input], input.dtype);\n    }\n    packTensor(input) {\n        const program = new PackProgram(input.shape);\n        const preventEagerUnpackingOutput = true;\n        return this.runWebGLProgram(program, [input], input.dtype, null /* customUniformValues */, preventEagerUnpackingOutput);\n    }\n    packedReshape(input, afterShape) {\n        const input3DShape = [\n            webgl_util.getBatchDim(input.shape),\n            ...webgl_util.getRowsCols(input.shape)\n        ];\n        const input3D = {\n            dtype: input.dtype,\n            shape: input3DShape,\n            dataId: input.dataId\n        };\n        const afterShapeAs3D = [\n            webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n        ];\n        const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n        const preventEagerUnpackingOfOutput = true;\n        const customValues = [input3DShape];\n        const output = this.runWebGLProgram(program, [input3D], input.dtype, customValues, preventEagerUnpackingOfOutput);\n        return { dataId: output.dataId, shape: afterShape, dtype: output.dtype };\n    }\n    decode(dataId, customTexShape) {\n        const texData = this.texData.get(dataId);\n        const { isPacked, shape, dtype } = texData;\n        if (customTexShape != null) {\n            const size = util.sizeFromShape(shape);\n            const texSize = customTexShape[0] * customTexShape[1] * 4;\n            util.assert(size <= texSize, () => 'customTexShape is too small. ' +\n                'Row * Column * 4 should be equal or larger than the ' +\n                'size of the tensor data.');\n        }\n        const shapeAs3D = webgl_util.getShapeAs3D(shape);\n        let program;\n        if (isPacked) {\n            program = new DecodeMatrixPackedProgram(shapeAs3D);\n        }\n        else {\n            program = new DecodeMatrixProgram(shapeAs3D);\n        }\n        const preventEagerUnpackingOfOutput = true;\n        const customValues = [customTexShape != null ? customTexShape :\n                tex_util.getDenseTexShape(shapeAs3D)];\n        const out = this.runWebGLProgram(program, [{ shape: shapeAs3D, dtype, dataId }], dtype, customValues, preventEagerUnpackingOfOutput, customTexShape);\n        return { dtype, shape, dataId: out.dataId };\n    }\n    runWebGLProgram(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput = false, customTexShape) {\n        const output = this.makeTensorInfo(program.outputShape, outputDtype);\n        const outData = this.texData.get(output.dataId);\n        if (program.packedOutput) {\n            outData.isPacked = true;\n        }\n        if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n            const texelShape = customTexShape != null ?\n                customTexShape :\n                tex_util.getDenseTexShape(program.outputShape);\n            // For a densely packed output, we explicitly set texShape\n            // so it doesn't get assigned later according to our typical packing\n            // scheme wherein a single texel can only contain values from adjacent\n            // rows/cols.\n            outData.texShape = texelShape.map(d => d * 2);\n        }\n        if (program.outTexUsage != null) {\n            outData.usage = program.outTexUsage;\n        }\n        if (util.sizeFromShape(output.shape) === 0) {\n            // Short-circuit the computation since the result is empty (has 0 in its\n            // shape).\n            outData.values =\n                util.getTypedArrayFromDType(output.dtype, 0);\n            return output;\n        }\n        const dataToDispose = [];\n        const inputsData = inputs.map(input => {\n            if (input.dtype === 'complex64') {\n                throw new Error(`GPGPUProgram does not support complex64 input. For complex64 ` +\n                    `dtypes, please separate the program into real and imaginary ` +\n                    `parts.`);\n            }\n            let texData = this.texData.get(input.dataId);\n            if (texData.texture == null) {\n                if (!program.packedInputs &&\n                    util.sizeFromShape(input.shape) <=\n                        env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n                    // Upload small tensors that live on the CPU as uniforms, not as\n                    // textures. Do this only when the environment supports 32bit floats\n                    // due to problems when comparing 16bit floats with 32bit floats.\n                    // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n                    // possible for packed shaders to sample from uniforms.\n                    return {\n                        shape: input.shape,\n                        texData: null,\n                        isUniform: true,\n                        uniformValues: texData.values\n                    };\n                }\n                // This ensures that if a packed program's inputs have not yet been\n                // uploaded to the GPU, they get uploaded as packed right off the bat.\n                if (program.packedInputs) {\n                    texData.isPacked = true;\n                    texData.shape = input.shape;\n                }\n            }\n            this.uploadToGPU(input.dataId);\n            if (!!texData.isPacked !== !!program.packedInputs) {\n                input = texData.isPacked ? this.unpackTensor(input) :\n                    this.packTensor(input);\n                dataToDispose.push(input);\n                texData = this.texData.get(input.dataId);\n            }\n            else if (texData.isPacked &&\n                !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n                // This is a special case where a texture exists for a tensor\n                // but the shapes are incompatible (due to packing constraints) because\n                // the tensor did not have a chance to go through the packed reshape\n                // shader. This only happens when we reshape the *same* tensor to form\n                // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n                // case will disappear once packed uploading is the default.\n                const savedInput = input;\n                const targetShape = input.shape;\n                input.shape = texData.shape;\n                input = this.packedReshape(input, targetShape);\n                dataToDispose.push(input);\n                texData = this.texData.get(input.dataId);\n                savedInput.shape = targetShape;\n            }\n            return { shape: input.shape, texData, isUniform: false };\n        });\n        this.uploadToGPU(output.dataId);\n        const outputData = { shape: output.shape, texData: outData, isUniform: false };\n        const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n        const binary = this.getAndSaveBinary(key, () => {\n            return gpgpu_math.compileProgram(this.gpgpu, program, inputsData, outputData);\n        });\n        const shouldTimeProgram = this.activeTimers != null;\n        let query;\n        if (shouldTimeProgram) {\n            query = this.startTimer();\n        }\n        if (!env().get('ENGINE_COMPILE_ONLY')) {\n            gpgpu_math.runProgram(this.gpgpu, binary, inputsData, outputData, customUniformValues);\n        }\n        dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n        if (shouldTimeProgram) {\n            query = this.endTimer(query);\n            this.activeTimers.push({ name: program.constructor.name, query: this.getQueryTime(query) });\n        }\n        const glFlushThreshold = env().getNumber('WEBGL_FLUSH_THRESHOLD');\n        // Manually GL flush requested\n        if (glFlushThreshold > 0) {\n            const time = util.now();\n            if ((time - this.lastGlFlushTime) > glFlushThreshold) {\n                this.gpgpu.gl.flush();\n                this.lastGlFlushTime = time;\n            }\n        }\n        if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n            preventEagerUnpackingOfOutput === false) {\n            const unpacked = this.unpackTensor(output);\n            this.disposeIntermediateTensorInfo(output);\n            return unpacked;\n        }\n        return output;\n    }\n    compileAndRun(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput = false) {\n        outputDtype = outputDtype || inputs[0].dtype;\n        const outInfo = this.runWebGLProgram(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput);\n        return outInfo;\n    }\n    getAndSaveBinary(key, getBinary) {\n        if (!(key in this.binaryCache)) {\n            this.binaryCache[key] = getBinary();\n        }\n        return this.binaryCache[key];\n    }\n    getTextureManager() {\n        return this.textureManager;\n    }\n    dispose() {\n        if (this.disposed) {\n            return;\n        }\n        // Avoid disposing the compiled webgl programs during unit testing because\n        // it slows down test execution.\n        if (!env().getBool('IS_TEST')) {\n            const allKeys = Object.keys(this.binaryCache);\n            allKeys.forEach(key => {\n                this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n                delete this.binaryCache[key];\n            });\n        }\n        this.textureManager.dispose();\n        if (this.canvas != null &&\n            (typeof (HTMLCanvasElement) !== 'undefined' &&\n                this.canvas instanceof HTMLCanvasElement)) {\n            this.canvas.remove();\n        }\n        else {\n            this.canvas = null;\n        }\n        if (this.gpgpuCreatedLocally) {\n            this.gpgpu.program = null;\n            this.gpgpu.dispose();\n        }\n        this.disposed = true;\n    }\n    floatPrecision() {\n        if (this.floatPrecisionValue == null) {\n            this.floatPrecisionValue = tidy(() => {\n                if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n                    // Momentarily switching DEBUG flag to false so we don't throw an\n                    // error trying to upload a small value.\n                    const debugFlag = env().getBool('DEBUG');\n                    env().set('DEBUG', false);\n                    const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n                    env().set('DEBUG', debugFlag);\n                    if (underflowCheckValue > 0) {\n                        return 32;\n                    }\n                }\n                return 16;\n            });\n        }\n        return this.floatPrecisionValue;\n    }\n    /** Returns the smallest representable number.  */\n    epsilon() {\n        return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n    }\n    uploadToGPU(dataId) {\n        const texData = this.texData.get(dataId);\n        const { shape, dtype, values, texture, usage, isPacked } = texData;\n        if (texture != null) {\n            // Array is already on GPU. No-op.\n            return;\n        }\n        const shouldTimeProgram = this.activeTimers != null;\n        let start;\n        if (shouldTimeProgram) {\n            start = util.now();\n        }\n        let texShape = texData.texShape;\n        if (texShape == null) {\n            // This texShape may not be the final texture shape. For packed or dense\n            // textures, the texShape will be changed when textures are created.\n            texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n            texData.texShape = texShape;\n        }\n        if (values != null) {\n            const shapeAs3D = webgl_util.getShapeAs3D(shape);\n            let program;\n            let width = texShape[1], height = texShape[0];\n            const isByteArray = values instanceof Uint8Array || values instanceof Uint8ClampedArray;\n            // texture for float array is PhysicalTextureType.PACKED_2X2_FLOAT32, we\n            // need to make sure the upload uses the same packed size\n            if (isPacked || !isByteArray) {\n                [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(texShape[0], texShape[1]);\n            }\n            if (isPacked) {\n                program = new EncodeMatrixPackedProgram(shapeAs3D, isByteArray);\n            }\n            else {\n                program = new EncodeMatrixProgram(shapeAs3D, isByteArray);\n            }\n            // TexShape for float array needs to be the original shape, which byte\n            // array needs to be packed size. This allow the data upload shape to be\n            // matched with texture creation logic.\n            const tempDenseInputTexShape = isByteArray ? [height, width] : texShape;\n            const tempDenseInputHandle = this.makeTensorInfo(tempDenseInputTexShape, dtype);\n            const tempDenseInputTexData = this.texData.get(tempDenseInputHandle.dataId);\n            if (isByteArray) {\n                tempDenseInputTexData.usage = TextureUsage.PIXELS;\n            }\n            else {\n                tempDenseInputTexData.usage = TextureUsage.UPLOAD;\n            }\n            tempDenseInputTexData.texShape = tempDenseInputTexShape;\n            this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId), width, height, values);\n            const customValues = [[height, width]];\n            // We want the output to remain packed regardless of the value of\n            // WEBGL_PACK.\n            const preventEagerUnpacking = true;\n            const encodedOutputTarget = this.runWebGLProgram(program, [tempDenseInputHandle], dtype, customValues, preventEagerUnpacking);\n            // Have the original texture assume the identity of the encoded output.\n            const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n            texData.texShape = outputTexData.texShape;\n            texData.isPacked = outputTexData.isPacked;\n            texData.usage = outputTexData.usage;\n            if (!env().get('ENGINE_COMPILE_ONLY')) {\n                texData.texture = outputTexData.texture;\n                // Once uploaded, don't store the values on cpu.\n                texData.values = null;\n                this.texData.delete(encodedOutputTarget.dataId);\n            }\n            else {\n                this.disposeData(encodedOutputTarget.dataId);\n            }\n            this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n            if (shouldTimeProgram) {\n                this.uploadWaitMs += util.now() - start;\n            }\n        }\n        else {\n            const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n            texData.texture = newTexture;\n        }\n    }\n    convertAndCacheOnCPU(dataId, float32Values) {\n        const texData = this.texData.get(dataId);\n        const { dtype } = texData;\n        if (float32Values != null) {\n            texData.values = float32ToTypedArray(float32Values, dtype);\n        }\n        return texData.values;\n    }\n    acquireTexture(texShape, texType, dtype, isPacked) {\n        this.numBytesInGPU += this.computeBytes(texShape, dtype);\n        if (!this.warnedAboutMemory &&\n            this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n            const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n            this.warnedAboutMemory = true;\n            console.warn(`High memory usage in GPU: ${mb} MB, ` +\n                `most likely due to a memory leak`);\n        }\n        return this.textureManager.acquireTexture(texShape, texType, isPacked);\n    }\n    computeBytes(shape, dtype) {\n        return shape[0] * shape[1] * util.bytesPerElement(dtype);\n    }\n    checkCompileCompletion() {\n        for (const [, binary] of Object.entries(this.binaryCache)) {\n            this.checkCompletion_(binary);\n        }\n    }\n    async checkCompileCompletionAsync() {\n        const ps = [];\n        if (this.gpgpu.parallelCompilationExtension) {\n            for (const [, binary] of Object.entries(this.binaryCache)) {\n                ps.push(this.checkCompletionAsync_(binary));\n            }\n            return Promise.all(ps);\n        }\n        else {\n            for (const [, binary] of Object.entries(this.binaryCache)) {\n                const p = new Promise((resolve) => {\n                    try {\n                        this.checkCompletion_(binary);\n                        resolve(true);\n                    }\n                    catch (error) {\n                        throw error;\n                    }\n                });\n                ps.push(p);\n            }\n            return Promise.all(ps);\n        }\n    }\n    async checkCompletionAsync_(binary) {\n        if (this.gpgpu.gl.getProgramParameter(binary.webGLProgram, this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)) {\n            return this.checkCompletion_(binary);\n        }\n        else {\n            await nextFrame();\n            return this.checkCompletionAsync_(binary);\n        }\n    }\n    checkCompletion_(binary) {\n        if (this.gpgpu.gl.getProgramParameter(binary.webGLProgram, this.gpgpu.gl.LINK_STATUS) === false) {\n            console.log(this.gpgpu.gl.getProgramInfoLog(binary.webGLProgram));\n            if (this.gpgpu.gl.getShaderParameter(binary.fragmentShader, this.gpgpu.gl.COMPILE_STATUS) === false) {\n                webgl_util.logShaderSourceAndInfoLog(binary.source, this.gpgpu.gl.getShaderInfoLog(binary.fragmentShader));\n                throw new Error('Failed to compile fragment shader.');\n            }\n            throw new Error('Failed to link vertex and fragment shaders.');\n        }\n        return true;\n    }\n    getUniformLocations() {\n        for (const binary of Object.values(this.binaryCache)) {\n            // TODO: Iterating through all binaries to build VAOs is supposed to be in\n            // a seperate function, like 'setVaos'. However, to avoid breaking changes\n            // for the users using parallel compile feature now, buildVao is silently\n            // added here.\n            this.gpgpu.buildVao(binary.webGLProgram);\n            const { variablesLocations, customUniformLocations, infLoc, nanLoc, outShapeLocation, outShapeStridesLocation, outTexShapeLocation } = getUniformLocations(this.gpgpu, binary.program, binary.webGLProgram);\n            binary.variablesLocations = variablesLocations;\n            binary.customUniformLocations = customUniformLocations;\n            binary.infLoc = infLoc;\n            binary.nanLoc = nanLoc;\n            binary.outShapeLocation = outShapeLocation;\n            binary.outShapeStridesLocation = outShapeStridesLocation;\n            binary.outTexShapeLocation = outTexShapeLocation;\n        }\n    }\n    /**\n     * Create a TF.js tensor out of an existing WebGL texture. A new texture will\n     * be created.\n     */\n    createTensorFromGPUData(values, shape, dtype) {\n        values.channels = values.channels || 'RGBA';\n        const { texture, height, width, channels } = values;\n        const backend = engine().backend;\n        // Have to throw an error, otherwise WebGL just warns and returns wrong\n        // values.\n        if (!backend.gpgpu.gl.isTexture(texture)) {\n            throw new Error(`The texture is invalid. Also, please make sure the texture and ` +\n                `the TFJS WebGL backend are using the same canvas. If you want to ` +\n                `use your own custom canvas, you have to create and use the custom ` +\n                `TFJS WebGL backend created from the canvas through ` +\n                `'new tf.MathBackendWebGL(customCanvas)'.`);\n        }\n        const dataId = backend.writeTexture(texture, shape, dtype, height, width, channels);\n        return engine().makeTensorFromDataId(dataId, shape, dtype, backend);\n    }\n}\nMathBackendWebGL.nextDataId = 0;\nexport { MathBackendWebGL };\nfunction float32ToTypedArray(a, dtype) {\n    if (dtype === 'float32' || dtype === 'complex64') {\n        return a;\n    }\n    else if (dtype === 'int32' || dtype === 'bool') {\n        const result = (dtype === 'int32') ? new Int32Array(a.length) :\n            new Uint8Array(a.length);\n        for (let i = 0; i < result.length; ++i) {\n            result[i] = Math.round(a[i]);\n        }\n        return result;\n    }\n    else {\n        throw new Error(`Unknown dtype ${dtype}`);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,"],"names":["AddNProgram","constructor","outputShape","shapes","this","variableNames","map","_","i","snippets","forEach","variable","push","operation","join","userCode","AddNPackedProgram","packedInputs","packedOutput","ArgMinMaxProgram","reduceInfo","op","firstPass","windowSize","batchSize","outSize","compOp","indexSnippet","ArgMinMaxPackedProgram","shape","length","charAt","toUpperCase","slice","inSize","Math","ceil","outShape","rank","dtype","coords","sourceLocSetup","sourceRank","sourceLocDType","channels","inChannel","intChannels","x","srcRCoords","concat","srcGCoords","srcBCoords","srcACoords","fetchCandidateIdx","fetchValue","getBestIndicesAChannelSnippet","AvgPool2DBackpropProgram","convInfo","inShape","filterHeight","filterWidth","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","left","avgMultiplier","outHeight","outWidth","AvgPool3DBackpropProgram","filterDepth","strideDepth","dilationDepth","effectiveFilterDepth","padFront","front","outDepth","whereImpl","EPSILON_FLOAT32","EPSILON_FLOAT16","binaryCaches","getBinaryCache","webGLVersion","CPU_HANDOFF_SIZE_THRESHOLD","getNumber","BEFORE_PAGING_CONSTANT","numMBBeforeWarning","global","screen","height","width","window","devicePixelRatio","MathBackendWebGL","nextDataId","gpuResource","super","pendingRead","WeakMap","pendingDisposal","WeakSet","dataRefCount","numBytesInGPU","uploadWaitMs","downloadWaitMs","lastGlFlushTime","warnedAboutMemory","pendingDeletes","disposed","getBool","Error","newGPGPU","gl","binaryCache","gpgpuCreatedLocally","gpgpu","canvas","textureManager","texData","numDataIds","writeTexture","texture","texHeight","texWidth","input","makeTensorInfo","inData","get","dataId","isPacked","texShape","shapeAs3D","program","output","runWebGLProgram","disposeIntermediateTensorInfo","write","values","checkNumericalProblems","id","set","usage","UPLOAD","refCount","has","tensorData","incRef","decRef","move","tensorInfo","disposeData","readSync","complexTensorInfos","res","data","convertAndCacheOnCPU","shouldTimeProgram","activeTimers","start","result","realValues","real","imagValues","imag","getValuesFromTexture","read","subscribers","Promise","resolve","tmpDownloadTarget","vals","buffer","decode","tmpData","createBufferFromTexture","createAndWaitForFence","ps","all","size","downloadFloat32MatrixFromBuffer","deleteBuffer","dTypeVals","delete","removeDataId","readToGPU","options","gpuResouorce","tmpTarget","customTexShape","tensorRef","makeTensorFromTensorInfo","Object","assign","bufferSync","t","strings","d","_a","num","downloadMatrixFromPackedTexture","subarray","shouldUsePackedProgram","downloadByteEncodedFloatMatrixFromOutputTexture","timerAvailable","time","f","oldActiveTimers","newActiveTimers","outerMostTime","programTimersStack","flattenedActiveTimerQueries","query","filter","flattenedActiveTimerNames","name","kernelMs","wallMs","ms","error","memory","unreliable","numBytesInGPUAllocated","numBytesAllocated","numBytesInGPUFree","numBytesFree","startTimer","beginQuery","startMs","endMs","endTimer","endQuery","getQueryTime","waitForQueryAndGetTime","timerQuery","force","add","releaseGPUData","key","origDataId","computeBytes","releaseTexture","getTexture","uploadToGPU","getDataInfo","shouldExecuteOnCPU","inputs","sizeThreshold","every","getGPGPUContext","where","condition","condVals","dataSync","packedUnaryOp","outInfo","compileAndRun","abs","outValues","makeOutput","encodedValues","unpackTensor","packTensor","preventEagerUnpackingOutput","packedReshape","afterShape","input3DShape","input3D","afterShapeAs3D","R","preventEagerUnpackingOfOutput","customValues","texSize","out","outputDtype","customUniformValues","outData","outPackingScheme","DENSE","texelShape","outTexUsage","dataToDispose","inputsData","isUniform","uniformValues","savedInput","targetShape","outputData","binary","getAndSaveBinary","info","glFlushThreshold","flush","unpacked","getBinary","getTextureManager","dispose","allKeys","keys","deleteProgram","webGLProgram","HTMLCanvasElement","remove","floatPrecision","floatPrecisionValue","debugFlag","underflowCheckValue","epsilon","isByteArray","Uint8Array","Uint8ClampedArray","tempDenseInputTexShape","tempDenseInputHandle","tempDenseInputTexData","PIXELS","uploadDenseMatrixToTexture","preventEagerUnpacking","encodedOutputTarget","outputTexData","newTexture","acquireTexture","float32Values","float32ToTypedArray","texType","mb","toFixed","console","warn","checkCompileCompletion","entries","checkCompletion_","checkCompileCompletionAsync","parallelCompilationExtension","checkCompletionAsync_","p","getProgramParameter","COMPLETION_STATUS_KHR","LINK_STATUS","log","getProgramInfoLog","getShaderParameter","fragmentShader","COMPILE_STATUS","source","getShaderInfoLog","getUniformLocations","buildVao","variablesLocations","customUniformLocations","infLoc","nanLoc","outShapeLocation","outShapeStridesLocation","outTexShapeLocation","createTensorFromGPUData","backend","isTexture","makeTensorFromDataId","a","Int32Array","round"],"sourceRoot":""}