{"version":3,"file":"js/chunk-vendors-5d36ab87.6abec27f.js","mappings":"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","sources":["webpack://benefit/./node_modules/@tensorflow/tfjs-core/dist/tensor_format.js","webpack://benefit/./node_modules/@tensorflow/tfjs-core/dist/tensor.js","webpack://benefit/./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js","webpack://benefit/./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","webpack://benefit/./node_modules/@tensorflow/tfjs-core/dist/types.js","webpack://benefit/./node_modules/@tensorflow/tfjs-core/dist/util.js","webpack://benefit/./node_modules/@tensorflow/tfjs-core/dist/util_base.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { computeStrides, isString, rightPad, sizeFromShape } from './util';\n// Maximum number of values before we decide to show ellipsis.\nconst FORMAT_LIMIT_NUM_VALS = 20;\n// Number of first and last values to show when displaying a, b,...,y, z.\nconst FORMAT_NUM_FIRST_LAST_VALS = 3;\n// Number of significant digits to show.\nconst FORMAT_NUM_SIG_DIGITS = 7;\nexport function tensorToString(vals, shape, dtype, verbose) {\n    const strides = computeStrides(shape);\n    const padPerCol = computeMaxSizePerColumn(vals, shape, dtype, strides);\n    const rank = shape.length;\n    const valsLines = subTensorToString(vals, shape, dtype, strides, padPerCol);\n    const lines = ['Tensor'];\n    if (verbose) {\n        lines.push(`  dtype: ${dtype}`);\n        lines.push(`  rank: ${rank}`);\n        lines.push(`  shape: [${shape}]`);\n        lines.push(`  values:`);\n    }\n    lines.push(valsLines.map(l => '    ' + l).join('\\n'));\n    return lines.join('\\n');\n}\nfunction computeMaxSizePerColumn(vals, shape, dtype, strides) {\n    const n = sizeFromShape(shape);\n    const numCols = strides[strides.length - 1];\n    const padPerCol = new Array(numCols).fill(0);\n    const rank = shape.length;\n    const valuesOrTuples = dtype === 'complex64' ? createComplexTuples(vals) : vals;\n    if (rank > 1) {\n        for (let row = 0; row < n / numCols; row++) {\n            const offset = row * numCols;\n            for (let j = 0; j < numCols; j++) {\n                padPerCol[j] = Math.max(padPerCol[j], valToString(valuesOrTuples[offset + j], 0, dtype).length);\n            }\n        }\n    }\n    return padPerCol;\n}\nfunction valToString(val, pad, dtype) {\n    let valStr;\n    if (Array.isArray(val)) {\n        valStr = `${parseFloat(val[0].toFixed(FORMAT_NUM_SIG_DIGITS))} + ` +\n            `${parseFloat(val[1].toFixed(FORMAT_NUM_SIG_DIGITS))}j`;\n    }\n    else if (isString(val)) {\n        valStr = `'${val}'`;\n    }\n    else if (dtype === 'bool') {\n        valStr = boolNumToString(val);\n    }\n    else {\n        valStr = parseFloat(val.toFixed(FORMAT_NUM_SIG_DIGITS)).toString();\n    }\n    return rightPad(valStr, pad);\n}\nfunction boolNumToString(v) {\n    return v === 0 ? 'false' : 'true';\n}\nfunction subTensorToString(vals, shape, dtype, strides, padPerCol, isLast = true) {\n    const storagePerElement = dtype === 'complex64' ? 2 : 1;\n    const size = shape[0];\n    const rank = shape.length;\n    if (rank === 0) {\n        if (dtype === 'complex64') {\n            const complexTuple = createComplexTuples(vals);\n            return [valToString(complexTuple[0], 0, dtype)];\n        }\n        if (dtype === 'bool') {\n            return [boolNumToString(vals[0])];\n        }\n        return [vals[0].toString()];\n    }\n    if (rank === 1) {\n        if (size > FORMAT_LIMIT_NUM_VALS) {\n            const firstValsSize = FORMAT_NUM_FIRST_LAST_VALS * storagePerElement;\n            let firstVals = Array.from(vals.slice(0, firstValsSize));\n            let lastVals = Array.from(vals.slice((size - FORMAT_NUM_FIRST_LAST_VALS) * storagePerElement, size * storagePerElement));\n            if (dtype === 'complex64') {\n                firstVals = createComplexTuples(firstVals);\n                lastVals = createComplexTuples(lastVals);\n            }\n            return [\n                '[' +\n                    firstVals.map((x, i) => valToString(x, padPerCol[i], dtype))\n                        .join(', ') +\n                    ', ..., ' +\n                    lastVals\n                        .map((x, i) => valToString(x, padPerCol[size - FORMAT_NUM_FIRST_LAST_VALS + i], dtype))\n                        .join(', ') +\n                    ']'\n            ];\n        }\n        const displayVals = dtype === 'complex64' ? createComplexTuples(vals) :\n            Array.from(vals);\n        return [\n            '[' +\n                displayVals.map((x, i) => valToString(x, padPerCol[i], dtype))\n                    .join(', ') +\n                ']'\n        ];\n    }\n    // The array is rank 2 or more.\n    const subshape = shape.slice(1);\n    const substrides = strides.slice(1);\n    const stride = strides[0] * storagePerElement;\n    const lines = [];\n    if (size > FORMAT_LIMIT_NUM_VALS) {\n        for (let i = 0; i < FORMAT_NUM_FIRST_LAST_VALS; i++) {\n            const start = i * stride;\n            const end = start + stride;\n            lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, false /* isLast */));\n        }\n        lines.push('...');\n        for (let i = size - FORMAT_NUM_FIRST_LAST_VALS; i < size; i++) {\n            const start = i * stride;\n            const end = start + stride;\n            lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, i === size - 1 /* isLast */));\n        }\n    }\n    else {\n        for (let i = 0; i < size; i++) {\n            const start = i * stride;\n            const end = start + stride;\n            lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, i === size - 1 /* isLast */));\n        }\n    }\n    const sep = rank === 2 ? ',' : '';\n    lines[0] = '[' + (size > 0 ? lines[0] + sep : '');\n    for (let i = 1; i < lines.length - 1; i++) {\n        lines[i] = ' ' + lines[i] + sep;\n    }\n    let newLineSep = ',\\n';\n    for (let i = 2; i < rank; i++) {\n        newLineSep += '\\n';\n    }\n    lines[lines.length - 1] =\n        ' ' + lines[lines.length - 1] + ']' + (isLast ? '' : newLineSep);\n    return lines;\n}\nfunction createComplexTuples(vals) {\n    const complexTuples = [];\n    for (let i = 0; i < vals.length; i += 2) {\n        complexTuples.push([vals[i], vals[i + 1]]);\n    }\n    return complexTuples;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/// <reference types=\"@webgpu/types/dist\" />\nimport { getGlobal } from './global_util';\nimport { tensorToString } from './tensor_format';\nimport * as util from './util';\nimport { computeStrides, toNestedArray } from './util';\n/**\n * A mutable object, similar to `tf.Tensor`, that allows users to set values\n * at locations before converting to an immutable `tf.Tensor`.\n *\n * See `tf.buffer` for creating a tensor buffer.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport class TensorBuffer {\n    constructor(shape, dtype, values) {\n        this.dtype = dtype;\n        this.shape = shape.slice();\n        this.size = util.sizeFromShape(shape);\n        if (values != null) {\n            const n = values.length;\n            util.assert(n === this.size, () => `Length of values '${n}' does not match the size ` +\n                `inferred by the shape '${this.size}'.`);\n        }\n        if (dtype === 'complex64') {\n            throw new Error(`complex64 dtype TensorBuffers are not supported. Please create ` +\n                `a TensorBuffer for the real and imaginary parts separately and ` +\n                `call tf.complex(real, imag).`);\n        }\n        this.values = values || util.getArrayFromDType(dtype, this.size);\n        this.strides = computeStrides(shape);\n    }\n    /**\n     * Sets a value in the buffer at a given location.\n     *\n     * @param value The value to set.\n     * @param locs  The location indices.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Creation'}\n     */\n    set(value, ...locs) {\n        if (locs.length === 0) {\n            locs = [0];\n        }\n        util.assert(locs.length === this.rank, () => `The number of provided coordinates (${locs.length}) must ` +\n            `match the rank (${this.rank})`);\n        const index = this.locToIndex(locs);\n        this.values[index] = value;\n    }\n    /**\n     * Returns the value in the buffer at the provided location.\n     *\n     * @param locs The location indices.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Creation'}\n     */\n    get(...locs) {\n        if (locs.length === 0) {\n            locs = [0];\n        }\n        let i = 0;\n        for (const loc of locs) {\n            if (loc < 0 || loc >= this.shape[i]) {\n                const msg = `Requested out of range element at ${locs}. ` +\n                    `  Buffer shape=${this.shape}`;\n                throw new Error(msg);\n            }\n            i++;\n        }\n        let index = locs[locs.length - 1];\n        for (let i = 0; i < locs.length - 1; ++i) {\n            index += this.strides[i] * locs[i];\n        }\n        return this.values[index];\n    }\n    locToIndex(locs) {\n        if (this.rank === 0) {\n            return 0;\n        }\n        else if (this.rank === 1) {\n            return locs[0];\n        }\n        let index = locs[locs.length - 1];\n        for (let i = 0; i < locs.length - 1; ++i) {\n            index += this.strides[i] * locs[i];\n        }\n        return index;\n    }\n    indexToLoc(index) {\n        if (this.rank === 0) {\n            return [];\n        }\n        else if (this.rank === 1) {\n            return [index];\n        }\n        const locs = new Array(this.shape.length);\n        for (let i = 0; i < locs.length - 1; ++i) {\n            locs[i] = Math.floor(index / this.strides[i]);\n            index -= locs[i] * this.strides[i];\n        }\n        locs[locs.length - 1] = index;\n        return locs;\n    }\n    get rank() {\n        return this.shape.length;\n    }\n    /**\n     * Creates an immutable `tf.Tensor` object from the buffer.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Creation'}\n     */\n    toTensor() {\n        return trackerFn().makeTensor(this.values, this.shape, this.dtype);\n    }\n}\n// For tracking tensor creation and disposal.\nlet trackerFn = null;\n// Used by chaining methods to call into ops.\nlet opHandler = null;\n// Used to warn about deprecated methods.\nlet deprecationWarningFn = null;\n// This here so that we can use this method on dev branches and keep the\n// functionality at master.\n// tslint:disable-next-line:no-unused-expression\n[deprecationWarningFn];\n/**\n * An external consumer can register itself as the tensor tracker. This way\n * the Tensor class can notify the tracker for every tensor created and\n * disposed.\n */\nexport function setTensorTracker(fn) {\n    trackerFn = fn;\n}\n/**\n * An external consumer can register itself as the op handler. This way the\n * Tensor class can have chaining methods that call into ops via the op\n * handler.\n */\nexport function setOpHandler(handler) {\n    opHandler = handler;\n}\n/**\n * Sets the deprecation warning function to be used by this file. This way the\n * Tensor class can be a leaf but still use the environment.\n */\nexport function setDeprecationWarningFn(fn) {\n    deprecationWarningFn = fn;\n}\n/**\n * A `tf.Tensor` object represents an immutable, multidimensional array of\n * numbers that has a shape and a data type.\n *\n * For performance reasons, functions that create tensors do not necessarily\n * perform a copy of the data passed to them (e.g. if the data is passed as a\n * `Float32Array`), and changes to the data will change the tensor. This is not\n * a feature and is not supported. To avoid this behavior, use the tensor before\n * changing the input data or create a copy with `copy = tf.add(yourTensor, 0)`.\n *\n * See `tf.tensor` for details on how to create a `tf.Tensor`.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport class Tensor {\n    constructor(shape, dtype, dataId, id) {\n        /** Whether this tensor has been globally kept. */\n        this.kept = false;\n        this.isDisposedInternal = false;\n        this.shape = shape.slice();\n        this.dtype = dtype || 'float32';\n        this.size = util.sizeFromShape(shape);\n        this.strides = computeStrides(shape);\n        this.dataId = dataId;\n        this.id = id;\n        this.rankType = (this.rank < 5 ? this.rank.toString() : 'higher');\n    }\n    get rank() {\n        return this.shape.length;\n    }\n    /**\n     * Returns a promise of `tf.TensorBuffer` that holds the underlying data.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    async buffer() {\n        const vals = await this.data();\n        return opHandler.buffer(this.shape, this.dtype, vals);\n    }\n    /**\n     * Returns a `tf.TensorBuffer` that holds the underlying data.\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    bufferSync() {\n        return opHandler.buffer(this.shape, this.dtype, this.dataSync());\n    }\n    /**\n     * Returns the tensor data as a nested array. The transfer of data is done\n     * asynchronously.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    async array() {\n        const vals = await this.data();\n        return toNestedArray(this.shape, vals, this.dtype === 'complex64');\n    }\n    /**\n     * Returns the tensor data as a nested array. The transfer of data is done\n     * synchronously.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    arraySync() {\n        return toNestedArray(this.shape, this.dataSync(), this.dtype === 'complex64');\n    }\n    /**\n     * Asynchronously downloads the values from the `tf.Tensor`. Returns a\n     * promise of `TypedArray` that resolves when the computation has finished.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    async data() {\n        this.throwIfDisposed();\n        const data = trackerFn().read(this.dataId);\n        if (this.dtype === 'string') {\n            const bytes = await data;\n            try {\n                return bytes.map(b => util.decodeString(b));\n            }\n            catch (_a) {\n                throw new Error('Failed to decode the string bytes into utf-8. ' +\n                    'To get the original bytes, call tensor.bytes().');\n            }\n        }\n        return data;\n    }\n    /**\n     * Copy the tensor's data to a new GPU resource. Comparing to the `dataSync()`\n     * and `data()`, this method prevents data from being downloaded to CPU.\n     *\n     * For WebGL backend, the data will be stored on a densely packed texture.\n     * This means that the texture will use the RGBA channels to store value.\n     *\n     * For WebGPU backend, the data will be stored on a buffer. There is no\n     * parameter, so can not use a user-defined size to create the buffer.\n     *\n     * @param options:\n     *     For WebGL,\n     *         - customTexShape: Optional. If set, will use the user defined\n     *     texture shape to create the texture.\n     *\n     * @returns For WebGL backend, a GPUData contains the new texture and\n     *     its information.\n     *     {\n     *        tensorRef: The tensor that is associated with this texture,\n     *        texture: WebGLTexture,\n     *        texShape: [number, number] // [height, width]\n     *     }\n     *\n     *     For WebGPU backend, a GPUData contains the new buffer.\n     *     {\n     *        tensorRef: The tensor that is associated with this buffer,\n     *        buffer: GPUBuffer,\n     *     }\n     *\n     *     Remember to dispose the GPUData after it is used by\n     *     `res.tensorRef.dispose()`.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    dataToGPU(options) {\n        this.throwIfDisposed();\n        return trackerFn().readToGPU(this.dataId, options);\n    }\n    /**\n     * Synchronously downloads the values from the `tf.Tensor`. This blocks the\n     * UI thread until the values are ready, which can cause performance issues.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    dataSync() {\n        this.throwIfDisposed();\n        const data = trackerFn().readSync(this.dataId);\n        if (this.dtype === 'string') {\n            try {\n                return data.map(b => util.decodeString(b));\n            }\n            catch (_a) {\n                throw new Error('Failed to decode the string bytes into utf-8. ' +\n                    'To get the original bytes, call tensor.bytes().');\n            }\n        }\n        return data;\n    }\n    /** Returns the underlying bytes of the tensor's data. */\n    async bytes() {\n        this.throwIfDisposed();\n        const data = await trackerFn().read(this.dataId);\n        if (this.dtype === 'string') {\n            return data;\n        }\n        else {\n            return new Uint8Array(data.buffer);\n        }\n    }\n    /**\n     * Disposes `tf.Tensor` from memory.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        if (this.kerasMask) {\n            this.kerasMask.dispose();\n        }\n        trackerFn().disposeTensor(this);\n        this.isDisposedInternal = true;\n    }\n    get isDisposed() {\n        return this.isDisposedInternal;\n    }\n    throwIfDisposed() {\n        if (this.isDisposed) {\n            throw new Error(`Tensor is disposed.`);\n        }\n    }\n    /**\n     * Prints the `tf.Tensor`. See `tf.print` for details.\n     *\n     * @param verbose Whether to print verbose information about the tensor,\n     *    including dtype and size.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    print(verbose = false) {\n        return opHandler.print(this, verbose);\n    }\n    /**\n     * Returns a copy of the tensor. See `tf.clone` for details.\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    clone() {\n        this.throwIfDisposed();\n        return opHandler.clone(this);\n    }\n    /**\n     * Returns a human-readable description of the tensor. Useful for logging.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    toString(verbose = false) {\n        const vals = this.dataSync();\n        return tensorToString(vals, this.shape, this.dtype, verbose);\n    }\n    cast(dtype) {\n        this.throwIfDisposed();\n        return opHandler.cast(this, dtype);\n    }\n    variable(trainable = true, name, dtype) {\n        this.throwIfDisposed();\n        return trackerFn().makeVariable(this, trainable, name, dtype);\n    }\n}\nObject.defineProperty(Tensor, Symbol.hasInstance, {\n    value: (instance) => {\n        // Implementation note: we should use properties of the object that will be\n        // defined before the constructor body has finished executing (methods).\n        // This is because when this code is transpiled by babel, babel will call\n        // classCallCheck before the constructor body is run.\n        // See https://github.com/tensorflow/tfjs/issues/3384 for backstory.\n        return !!instance && instance.data != null && instance.dataSync != null &&\n            instance.throwIfDisposed != null;\n    }\n});\nexport function getGlobalTensorClass() {\n    // Use getGlobal so that we can augment the Tensor class across package\n    // boundaries becase the node resolution alg may result in different modules\n    // being returned for this file depending on the path they are loaded from.\n    return getGlobal('Tensor', () => {\n        return Tensor;\n    });\n}\n// Global side effect. Cache global reference to Tensor class\ngetGlobalTensorClass();\n/**\n * A mutable `tf.Tensor`, useful for persisting state, e.g. for training.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport class Variable extends Tensor {\n    constructor(initialValue, trainable, name, tensorId) {\n        super(initialValue.shape, initialValue.dtype, initialValue.dataId, tensorId);\n        this.trainable = trainable;\n        this.name = name;\n    }\n    /**\n     * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have\n     * the same shape and dtype as the old `tf.Tensor`.\n     *\n     * @param newValue New tensor to be assigned to this variable.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    assign(newValue) {\n        if (newValue.dtype !== this.dtype) {\n            throw new Error(`dtype of the new value (${newValue.dtype}) and ` +\n                `previous value (${this.dtype}) must match`);\n        }\n        if (!util.arraysEqual(newValue.shape, this.shape)) {\n            throw new Error(`shape of the new value (${newValue.shape}) and ` +\n                `previous value (${this.shape}) must match`);\n        }\n        trackerFn().disposeTensor(this);\n        this.dataId = newValue.dataId;\n        trackerFn().incRef(this, null /* backend */);\n    }\n    dispose() {\n        trackerFn().disposeVariable(this);\n        this.isDisposedInternal = true;\n    }\n}\nObject.defineProperty(Variable, Symbol.hasInstance, {\n    value: (instance) => {\n        return instance instanceof Tensor && instance.assign != null &&\n            instance.assign instanceof Function;\n    }\n});\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Tensor } from './tensor';\nimport { upcastType } from './types';\nimport { assert } from './util';\nexport function makeTypesMatch(a, b) {\n    if (a.dtype === b.dtype) {\n        return [a, b];\n    }\n    const dtype = upcastType(a.dtype, b.dtype);\n    return [a.cast(dtype), b.cast(dtype)];\n}\nexport function assertTypesMatch(a, b) {\n    assert(a.dtype === b.dtype, () => `The dtypes of the first(${a.dtype}) and` +\n        ` second(${b.dtype}) input must match`);\n}\nexport function isTensorInList(tensor, tensorList) {\n    return tensorList.some(x => x.id === tensor.id);\n}\n/**\n * Extracts any `Tensor`s found within the provided object.\n *\n * @param container an object that may be a `Tensor` or may directly contain\n *   `Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. In general it\n *   is safe to pass any object here, except that `Promise`s are not\n *   supported.\n * @returns An array of `Tensors` found within the passed object. If the\n *   argument is simply a `Tensor', a list containing that `Tensor` is\n *   returned. If the object is not a `Tensor` or does not\n *   contain `Tensors`, an empty list is returned.\n */\nexport function getTensorsInContainer(result) {\n    const list = [];\n    const seen = new Set();\n    walkTensorContainer(result, list, seen);\n    return list;\n}\nfunction walkTensorContainer(container, list, seen) {\n    if (container == null) {\n        return;\n    }\n    if (container instanceof Tensor) {\n        list.push(container);\n        return;\n    }\n    if (!isIterable(container)) {\n        return;\n    }\n    // Iteration over keys works also for arrays.\n    const iterable = container;\n    for (const k in iterable) {\n        const val = iterable[k];\n        if (!seen.has(val)) {\n            seen.add(val);\n            walkTensorContainer(val, list, seen);\n        }\n    }\n}\n// tslint:disable-next-line:no-any\nfunction isIterable(obj) {\n    return Array.isArray(obj) || typeof obj === 'object';\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVuc29yX3V0aWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90ZmpzLWNvcmUvc3JjL3RlbnNvcl91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUVILE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFFaEMsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUNuQyxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBRTlCLE1BQU0sVUFBVSxjQUFjLENBQW1CLENBQUksRUFBRSxDQUFJO0lBQ3pELElBQUksQ0FBQyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsS0FBSyxFQUFFO1FBQ3ZCLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDZjtJQUNELE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDeEMsQ0FBQztBQUVELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxDQUFTLEVBQUUsQ0FBUztJQUNuRCxNQUFNLENBQ0YsQ0FBQyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsS0FBSyxFQUNuQixHQUFHLEVBQUUsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDLEtBQUssT0FBTztRQUMzQyxXQUFXLENBQUMsQ0FBQyxLQUFLLG9CQUFvQixDQUFDLENBQUM7QUFDbEQsQ0FBQztBQUVELE1BQU0sVUFBVSxjQUFjLENBQUMsTUFBYyxFQUFFLFVBQW9CO0lBQ2pFLE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUM7QUFFRDs7Ozs7Ozs7Ozs7R0FXRztBQUNILE1BQU0sVUFBVSxxQkFBcUIsQ0FBQyxNQUF1QjtJQUMzRCxNQUFNLElBQUksR0FBYSxFQUFFLENBQUM7SUFDMUIsTUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQVcsQ0FBQztJQUNoQyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3hDLE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUVELFNBQVMsbUJBQW1CLENBQ3hCLFNBQTBCLEVBQUUsSUFBYyxFQUFFLElBQWtCO0lBQ2hFLElBQUksU0FBUyxJQUFJLElBQUksRUFBRTtRQUNyQixPQUFPO0tBQ1I7SUFDRCxJQUFJLFNBQVMsWUFBWSxNQUFNLEVBQUU7UUFDL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNyQixPQUFPO0tBQ1I7SUFDRCxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1FBQzFCLE9BQU87S0FDUjtJQUNELDZDQUE2QztJQUM3QyxNQUFNLFFBQVEsR0FBRyxTQUFpQyxDQUFDO0lBQ25ELEtBQUssTUFBTSxDQUFDLElBQUksUUFBUSxFQUFFO1FBQ3hCLE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNsQixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2QsbUJBQW1CLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztTQUN0QztLQUNGO0FBQ0gsQ0FBQztBQUVELGtDQUFrQztBQUNsQyxTQUFTLFVBQVUsQ0FBQyxHQUFRO0lBQzFCLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLENBQUM7QUFDdkQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHtUZW5zb3J9IGZyb20gJy4vdGVuc29yJztcbmltcG9ydCB7VGVuc29yQ29udGFpbmVyLCBUZW5zb3JDb250YWluZXJBcnJheX0gZnJvbSAnLi90ZW5zb3JfdHlwZXMnO1xuaW1wb3J0IHt1cGNhc3RUeXBlfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7YXNzZXJ0fSBmcm9tICcuL3V0aWwnO1xuXG5leHBvcnQgZnVuY3Rpb24gbWFrZVR5cGVzTWF0Y2g8VCBleHRlbmRzIFRlbnNvcj4oYTogVCwgYjogVCk6IFtULCBUXSB7XG4gIGlmIChhLmR0eXBlID09PSBiLmR0eXBlKSB7XG4gICAgcmV0dXJuIFthLCBiXTtcbiAgfVxuICBjb25zdCBkdHlwZSA9IHVwY2FzdFR5cGUoYS5kdHlwZSwgYi5kdHlwZSk7XG4gIHJldHVybiBbYS5jYXN0KGR0eXBlKSwgYi5jYXN0KGR0eXBlKV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRUeXBlc01hdGNoKGE6IFRlbnNvciwgYjogVGVuc29yKTogdm9pZCB7XG4gIGFzc2VydChcbiAgICAgIGEuZHR5cGUgPT09IGIuZHR5cGUsXG4gICAgICAoKSA9PiBgVGhlIGR0eXBlcyBvZiB0aGUgZmlyc3QoJHthLmR0eXBlfSkgYW5kYCArXG4gICAgICAgICAgYCBzZWNvbmQoJHtiLmR0eXBlfSkgaW5wdXQgbXVzdCBtYXRjaGApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNUZW5zb3JJbkxpc3QodGVuc29yOiBUZW5zb3IsIHRlbnNvckxpc3Q6IFRlbnNvcltdKTogYm9vbGVhbiB7XG4gIHJldHVybiB0ZW5zb3JMaXN0LnNvbWUoeCA9PiB4LmlkID09PSB0ZW5zb3IuaWQpO1xufVxuXG4vKipcbiAqIEV4dHJhY3RzIGFueSBgVGVuc29yYHMgZm91bmQgd2l0aGluIHRoZSBwcm92aWRlZCBvYmplY3QuXG4gKlxuICogQHBhcmFtIGNvbnRhaW5lciBhbiBvYmplY3QgdGhhdCBtYXkgYmUgYSBgVGVuc29yYCBvciBtYXkgZGlyZWN0bHkgY29udGFpblxuICogICBgVGVuc29yYHMsIHN1Y2ggYXMgYSBgVGVuc29yW11gIG9yIGB7a2V5OiBUZW5zb3IsIC4uLn1gLiBJbiBnZW5lcmFsIGl0XG4gKiAgIGlzIHNhZmUgdG8gcGFzcyBhbnkgb2JqZWN0IGhlcmUsIGV4Y2VwdCB0aGF0IGBQcm9taXNlYHMgYXJlIG5vdFxuICogICBzdXBwb3J0ZWQuXG4gKiBAcmV0dXJucyBBbiBhcnJheSBvZiBgVGVuc29yc2AgZm91bmQgd2l0aGluIHRoZSBwYXNzZWQgb2JqZWN0LiBJZiB0aGVcbiAqICAgYXJndW1lbnQgaXMgc2ltcGx5IGEgYFRlbnNvcicsIGEgbGlzdCBjb250YWluaW5nIHRoYXQgYFRlbnNvcmAgaXNcbiAqICAgcmV0dXJuZWQuIElmIHRoZSBvYmplY3QgaXMgbm90IGEgYFRlbnNvcmAgb3IgZG9lcyBub3RcbiAqICAgY29udGFpbiBgVGVuc29yc2AsIGFuIGVtcHR5IGxpc3QgaXMgcmV0dXJuZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRUZW5zb3JzSW5Db250YWluZXIocmVzdWx0OiBUZW5zb3JDb250YWluZXIpOiBUZW5zb3JbXSB7XG4gIGNvbnN0IGxpc3Q6IFRlbnNvcltdID0gW107XG4gIGNvbnN0IHNlZW4gPSBuZXcgU2V0PHt9fHZvaWQ+KCk7XG4gIHdhbGtUZW5zb3JDb250YWluZXIocmVzdWx0LCBsaXN0LCBzZWVuKTtcbiAgcmV0dXJuIGxpc3Q7XG59XG5cbmZ1bmN0aW9uIHdhbGtUZW5zb3JDb250YWluZXIoXG4gICAgY29udGFpbmVyOiBUZW5zb3JDb250YWluZXIsIGxpc3Q6IFRlbnNvcltdLCBzZWVuOiBTZXQ8e318dm9pZD4pOiB2b2lkIHtcbiAgaWYgKGNvbnRhaW5lciA9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChjb250YWluZXIgaW5zdGFuY2VvZiBUZW5zb3IpIHtcbiAgICBsaXN0LnB1c2goY29udGFpbmVyKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCFpc0l0ZXJhYmxlKGNvbnRhaW5lcikpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gSXRlcmF0aW9uIG92ZXIga2V5cyB3b3JrcyBhbHNvIGZvciBhcnJheXMuXG4gIGNvbnN0IGl0ZXJhYmxlID0gY29udGFpbmVyIGFzIFRlbnNvckNvbnRhaW5lckFycmF5O1xuICBmb3IgKGNvbnN0IGsgaW4gaXRlcmFibGUpIHtcbiAgICBjb25zdCB2YWwgPSBpdGVyYWJsZVtrXTtcbiAgICBpZiAoIXNlZW4uaGFzKHZhbCkpIHtcbiAgICAgIHNlZW4uYWRkKHZhbCk7XG4gICAgICB3YWxrVGVuc29yQ29udGFpbmVyKHZhbCwgbGlzdCwgc2Vlbik7XG4gICAgfVxuICB9XG59XG5cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbmZ1bmN0aW9uIGlzSXRlcmFibGUob2JqOiBhbnkpOiBib29sZWFuIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkob2JqKSB8fCB0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jztcbn1cbiJdfQ==","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from './engine';\nimport { env } from './environment';\nimport { getGlobalTensorClass } from './tensor';\nimport { isWebGLData, isWebGPUData } from './types';\nimport { assert, flatten, inferDtype, isTypedArray, toTypedArray } from './util';\nimport { bytesPerElement } from './util_base';\nexport function inferShape(val, dtype) {\n    let firstElem = val;\n    if (isTypedArray(val)) {\n        return dtype === 'string' ? [] : [val.length];\n    }\n    if (isWebGLData(val)) {\n        const usedChannels = val.channels || 'RGBA';\n        return [val.height, val.width * usedChannels.length];\n    }\n    else if (isWebGPUData(val)) {\n        return [val.buffer.size / (dtype == null ? 4 : bytesPerElement(dtype))];\n    }\n    if (!Array.isArray(val)) {\n        return []; // Scalar.\n    }\n    const shape = [];\n    while (Array.isArray(firstElem) ||\n        isTypedArray(firstElem) && dtype !== 'string') {\n        shape.push(firstElem.length);\n        firstElem = firstElem[0];\n    }\n    if (Array.isArray(val) &&\n        env().getBool('TENSORLIKE_CHECK_SHAPE_CONSISTENCY')) {\n        deepAssertShapeConsistency(val, shape, []);\n    }\n    return shape;\n}\nfunction deepAssertShapeConsistency(val, shape, indices) {\n    indices = indices || [];\n    if (!(Array.isArray(val)) && !isTypedArray(val)) {\n        assert(shape.length === 0, () => `Element arr[${indices.join('][')}] is a primitive, ` +\n            `but should be an array/TypedArray of ${shape[0]} elements`);\n        return;\n    }\n    assert(shape.length > 0, () => `Element arr[${indices.join('][')}] should be a primitive, ` +\n        `but is an array of ${val.length} elements`);\n    assert(val.length === shape[0], () => `Element arr[${indices.join('][')}] should have ${shape[0]} ` +\n        `elements, but has ${val.length} elements`);\n    const subShape = shape.slice(1);\n    for (let i = 0; i < val.length; ++i) {\n        deepAssertShapeConsistency(val[i], subShape, indices.concat(i));\n    }\n}\nfunction assertDtype(expectedDtype, actualDType, argName, functionName) {\n    if (expectedDtype === 'string_or_numeric') {\n        return;\n    }\n    if (expectedDtype == null) {\n        throw new Error(`Expected dtype cannot be null.`);\n    }\n    if (expectedDtype !== 'numeric' && expectedDtype !== actualDType ||\n        expectedDtype === 'numeric' && actualDType === 'string') {\n        throw new Error(`Argument '${argName}' passed to '${functionName}' must ` +\n            `be ${expectedDtype} tensor, but got ${actualDType} tensor`);\n    }\n}\nexport function convertToTensor(x, argName, functionName, parseAsDtype = 'numeric') {\n    if (x instanceof getGlobalTensorClass()) {\n        assertDtype(parseAsDtype, x.dtype, argName, functionName);\n        return x;\n    }\n    let inferredDtype = inferDtype(x);\n    // If the user expects a bool/int/float, use that info to update the\n    // inferredDtype when it is not a string.\n    if (inferredDtype !== 'string' &&\n        ['bool', 'int32', 'float32'].indexOf(parseAsDtype) >= 0) {\n        inferredDtype = parseAsDtype;\n    }\n    assertDtype(parseAsDtype, inferredDtype, argName, functionName);\n    if ((x == null) ||\n        (!isTypedArray(x) && !Array.isArray(x) && typeof x !== 'number' &&\n            typeof x !== 'boolean' && typeof x !== 'string')) {\n        const type = x == null ? 'null' : x.constructor.name;\n        throw new Error(`Argument '${argName}' passed to '${functionName}' must be a ` +\n            `Tensor or TensorLike, but got '${type}'`);\n    }\n    const inferredShape = inferShape(x, inferredDtype);\n    if (!isTypedArray(x) && !Array.isArray(x)) {\n        x = [x];\n    }\n    const skipTypedArray = true;\n    const values = inferredDtype !== 'string' ?\n        toTypedArray(x, inferredDtype) :\n        flatten(x, [], skipTypedArray);\n    return ENGINE.makeTensor(values, inferredShape, inferredDtype);\n}\nexport function convertToTensorArray(arg, argName, functionName, parseAsDtype = 'numeric') {\n    if (!Array.isArray(arg)) {\n        throw new Error(`Argument ${argName} passed to ${functionName} must be a ` +\n            '`Tensor[]` or `TensorLike[]`');\n    }\n    const tensors = arg;\n    return tensors.map((t, i) => convertToTensor(t, `${argName}[${i}]`, functionName, parseAsDtype));\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport var Rank;\n(function (Rank) {\n    Rank[\"R0\"] = \"R0\";\n    Rank[\"R1\"] = \"R1\";\n    Rank[\"R2\"] = \"R2\";\n    Rank[\"R3\"] = \"R3\";\n    Rank[\"R4\"] = \"R4\";\n    Rank[\"R5\"] = \"R5\";\n    Rank[\"R6\"] = \"R6\";\n})(Rank || (Rank = {}));\n// Looks for upcasting types. Used, for example, in operations with mixed dtype\n// inputs.\nvar UpcastInt32AndMap;\n(function (UpcastInt32AndMap) {\n    UpcastInt32AndMap[\"float32\"] = \"float32\";\n    UpcastInt32AndMap[\"int32\"] = \"int32\";\n    UpcastInt32AndMap[\"bool\"] = \"int32\";\n    UpcastInt32AndMap[\"complex64\"] = \"complex64\";\n})(UpcastInt32AndMap || (UpcastInt32AndMap = {}));\nvar UpcastBoolAndMap;\n(function (UpcastBoolAndMap) {\n    UpcastBoolAndMap[\"float32\"] = \"float32\";\n    UpcastBoolAndMap[\"int32\"] = \"int32\";\n    UpcastBoolAndMap[\"bool\"] = \"bool\";\n    UpcastBoolAndMap[\"complex64\"] = \"complex64\";\n})(UpcastBoolAndMap || (UpcastBoolAndMap = {}));\nvar UpcastFloat32AndMap;\n(function (UpcastFloat32AndMap) {\n    UpcastFloat32AndMap[\"float32\"] = \"float32\";\n    UpcastFloat32AndMap[\"int32\"] = \"float32\";\n    UpcastFloat32AndMap[\"bool\"] = \"float32\";\n    UpcastFloat32AndMap[\"complex64\"] = \"complex64\";\n})(UpcastFloat32AndMap || (UpcastFloat32AndMap = {}));\nvar UpcastComplex64AndMap;\n(function (UpcastComplex64AndMap) {\n    UpcastComplex64AndMap[\"float32\"] = \"complex64\";\n    UpcastComplex64AndMap[\"int32\"] = \"complex64\";\n    UpcastComplex64AndMap[\"bool\"] = \"complex64\";\n    UpcastComplex64AndMap[\"complex64\"] = \"complex64\";\n})(UpcastComplex64AndMap || (UpcastComplex64AndMap = {}));\nconst upcastTypeMap = {\n    'float32': UpcastFloat32AndMap,\n    'int32': UpcastInt32AndMap,\n    'bool': UpcastBoolAndMap,\n    'complex64': UpcastComplex64AndMap\n};\nexport function upcastType(typeA, typeB) {\n    if (typeA === 'string' || typeB === 'string') {\n        if (typeA === 'string' && typeB === 'string') {\n            return 'string';\n        }\n        throw new Error(`Can not upcast ${typeA} with ${typeB}`);\n    }\n    return upcastTypeMap[typeA][typeB];\n}\n/** Returns the output type after summation. */\nexport function sumOutType(type) {\n    return upcastType(type, 'int32');\n}\nexport function isWebGLData(values) {\n    return values != null && typeof values === 'object' && 'texture' in values &&\n        values.texture instanceof WebGLTexture;\n}\nexport function isWebGPUData(values) {\n    return typeof GPUBuffer !== 'undefined' && values != null &&\n        typeof values === 'object' && 'buffer' in values &&\n        values.buffer instanceof GPUBuffer;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nimport { isTypedArrayBrowser } from './platforms/is_typed_array_browser';\nimport * as base from './util_base';\nexport * from './util_base';\nexport * from './hash_util';\n/**\n * Create typed array for scalar value. Used for storing in `DataStorage`.\n */\nexport function createScalarValue(value, dtype) {\n    if (dtype === 'string') {\n        return encodeString(value);\n    }\n    return toTypedArray([value], dtype);\n}\nfunction noConversionNeeded(a, dtype) {\n    return (a instanceof Float32Array && dtype === 'float32') ||\n        (a instanceof Int32Array && dtype === 'int32') ||\n        (a instanceof Uint8Array && dtype === 'bool');\n}\nexport function toTypedArray(a, dtype) {\n    if (dtype === 'string') {\n        throw new Error('Cannot convert a string[] to a TypedArray');\n    }\n    if (Array.isArray(a)) {\n        a = flatten(a);\n    }\n    if (env().getBool('DEBUG')) {\n        base.checkConversionForErrors(a, dtype);\n    }\n    if (noConversionNeeded(a, dtype)) {\n        return a;\n    }\n    if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n        return new Float32Array(a);\n    }\n    else if (dtype === 'int32') {\n        return new Int32Array(a);\n    }\n    else if (dtype === 'bool') {\n        const bool = new Uint8Array(a.length);\n        for (let i = 0; i < bool.length; ++i) {\n            if (Math.round(a[i]) !== 0) {\n                bool[i] = 1;\n            }\n        }\n        return bool;\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n}\n/**\n * Returns the current high-resolution time in milliseconds relative to an\n * arbitrary time in the past. It works across different platforms (node.js,\n * browsers).\n *\n * ```js\n * console.log(tf.util.now());\n * ```\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function now() {\n    return env().platform.now();\n}\n/**\n * Returns a platform-specific implementation of\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n *\n * If `fetch` is defined on the global object (`window`, `process`, etc.),\n * `tf.util.fetch` returns that function.\n *\n * If not, `tf.util.fetch` returns a platform-specific solution.\n *\n * ```js\n * const resource = await tf.util.fetch('https://cdn.jsdelivr.net/npm/@tensorflow/tfjs');\n * // handle response\n * ```\n *\n * @doc {heading: 'Util'}\n */\nexport function fetch(path, requestInits) {\n    return env().platform.fetch(path, requestInits);\n}\n/**\n * Encodes the provided string into bytes using the provided encoding scheme.\n *\n * @param s The string to encode.\n * @param encoding The encoding scheme. Defaults to utf-8.\n *\n * @doc {heading: 'Util'}\n */\nexport function encodeString(s, encoding = 'utf-8') {\n    encoding = encoding || 'utf-8';\n    return env().platform.encode(s, encoding);\n}\n/**\n * Decodes the provided bytes into a string using the provided encoding scheme.\n * @param bytes The bytes to decode.\n *\n * @param encoding The encoding scheme. Defaults to utf-8.\n *\n * @doc {heading: 'Util'}\n */\nexport function decodeString(bytes, encoding = 'utf-8') {\n    encoding = encoding || 'utf-8';\n    return env().platform.decode(bytes, encoding);\n}\nexport function isTypedArray(a) {\n    // TODO(mattsoulanille): Remove this fallback in 5.0.0\n    if (env().platform.isTypedArray != null) {\n        return env().platform.isTypedArray(a);\n    }\n    else {\n        return isTypedArrayBrowser(a);\n    }\n}\n// NOTE: We explicitly type out what T extends instead of any so that\n// util.flatten on a nested array of number doesn't try to infer T as a\n// number[][], causing us to explicitly type util.flatten<number>().\n/**\n *  Flattens an arbitrarily nested array.\n *\n * ```js\n * const a = [[1, 2], [3, 4], [5, [6, [7]]]];\n * const flat = tf.util.flatten(a);\n * console.log(flat);\n * ```\n *\n *  @param arr The nested array to flatten.\n *  @param result The destination array which holds the elements.\n *  @param skipTypedArray If true, avoids flattening the typed arrays. Defaults\n *      to false.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function flatten(arr, result = [], skipTypedArray = false) {\n    if (result == null) {\n        result = [];\n    }\n    if (typeof arr === 'boolean' || typeof arr === 'number' ||\n        typeof arr === 'string' || base.isPromise(arr) || arr == null ||\n        isTypedArray(arr) && skipTypedArray) {\n        result.push(arr);\n    }\n    else if (Array.isArray(arr) || isTypedArray(arr)) {\n        for (let i = 0; i < arr.length; ++i) {\n            flatten(arr[i], result, skipTypedArray);\n        }\n    }\n    else {\n        let maxIndex = -1;\n        for (const key of Object.keys(arr)) {\n            // 0 or positive integer.\n            if (/^([1-9]+[0-9]*|0)$/.test(key)) {\n                maxIndex = Math.max(maxIndex, Number(key));\n            }\n        }\n        for (let i = 0; i <= maxIndex; i++) {\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            flatten(arr[i], result, skipTypedArray);\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * Shuffles the array in-place using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1, 2, 3, 4, 5];\n * tf.util.shuffle(a);\n * console.log(a);\n * ```\n *\n * @param array The array to shuffle in-place.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n// tslint:disable-next-line:no-any\nexport function shuffle(array) {\n    let counter = array.length;\n    let index = 0;\n    // While there are elements in the array\n    while (counter > 0) {\n        // Pick a random index\n        index = (Math.random() * counter) | 0;\n        // Decrease counter by 1\n        counter--;\n        // And swap the last element with it\n        swap(array, counter, index);\n    }\n}\n/**\n * Shuffles two arrays in-place the same way using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1,2,3,4,5];\n * const b = [11,22,33,44,55];\n * tf.util.shuffleCombo(a, b);\n * console.log(a, b);\n * ```\n *\n * @param array The first array to shuffle in-place.\n * @param array2 The second array to shuffle in-place with the same permutation\n *     as the first array.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function shuffleCombo(\n// tslint:disable-next-line:no-any\narray, \n// tslint:disable-next-line:no-any\narray2) {\n    if (array.length !== array2.length) {\n        throw new Error(`Array sizes must match to be shuffled together ` +\n            `First array length was ${array.length}` +\n            `Second array length was ${array2.length}`);\n    }\n    let counter = array.length;\n    let index = 0;\n    // While there are elements in the array\n    while (counter > 0) {\n        // Pick a random index\n        index = (Math.random() * counter) | 0;\n        // Decrease counter by 1\n        counter--;\n        // And swap the last element of each array with it\n        swap(array, counter, index);\n        swap(array2, counter, index);\n    }\n}\n/** Clamps a value to a specified range. */\nexport function clamp(min, x, max) {\n    return Math.max(min, Math.min(x, max));\n}\nexport function nearestLargerEven(val) {\n    return val % 2 === 0 ? val : val + 1;\n}\nexport function swap(object, left, right) {\n    const temp = object[left];\n    object[left] = object[right];\n    object[right] = temp;\n}\nexport function sum(arr) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n/**\n * Returns a sample from a uniform [a, b) distribution.\n *\n * @param a The minimum support (inclusive).\n * @param b The maximum support (exclusive).\n * @return A pseudorandom number on the half-open interval [a,b).\n */\nexport function randUniform(a, b) {\n    const r = Math.random();\n    return (b * r) + (1 - r) * a;\n}\n/** Returns the squared Euclidean distance between two vectors. */\nexport function distSquared(a, b) {\n    let result = 0;\n    for (let i = 0; i < a.length; i++) {\n        const diff = Number(a[i]) - Number(b[i]);\n        result += diff * diff;\n    }\n    return result;\n}\n/**\n * Asserts that the expression is true. Otherwise throws an error with the\n * provided message.\n *\n * ```js\n * const x = 2;\n * tf.util.assert(x === 2, 'x is not 2');\n * ```\n *\n * @param expr The expression to assert (as a boolean).\n * @param msg A function that returns the message to report when throwing an\n *     error. We use a function for performance reasons.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function assert(expr, msg) {\n    if (!expr) {\n        throw new Error(typeof msg === 'string' ? msg : msg());\n    }\n}\nexport function assertShapesMatch(shapeA, shapeB, errorMessagePrefix = '') {\n    assert(arraysEqual(shapeA, shapeB), () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n}\nexport function assertNonNull(a) {\n    assert(a != null, () => `The input to the tensor constructor must be a non-null value.`);\n}\n/**\n * Returns the size (number of elements) of the tensor given its shape.\n *\n * ```js\n * const shape = [3, 4, 2];\n * const size = tf.util.sizeFromShape(shape);\n * console.log(size);\n * ```\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function sizeFromShape(shape) {\n    if (shape.length === 0) {\n        // Scalar.\n        return 1;\n    }\n    let size = shape[0];\n    for (let i = 1; i < shape.length; i++) {\n        size *= shape[i];\n    }\n    return size;\n}\nexport function isScalarShape(shape) {\n    return shape.length === 0;\n}\nexport function arraysEqualWithNull(n1, n2) {\n    if (n1 === n2) {\n        return true;\n    }\n    if (n1 == null || n2 == null) {\n        return false;\n    }\n    if (n1.length !== n2.length) {\n        return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n        if (n1[i] !== null && n2[i] !== null && n1[i] !== n2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function arraysEqual(n1, n2) {\n    if (n1 === n2) {\n        return true;\n    }\n    if (n1 == null || n2 == null) {\n        return false;\n    }\n    if (n1.length !== n2.length) {\n        return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n        if (n1[i] !== n2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function isInt(a) {\n    return a % 1 === 0;\n}\nexport function tanh(x) {\n    // tslint:disable-next-line:no-any\n    if (Math.tanh != null) {\n        // tslint:disable-next-line:no-any\n        return Math.tanh(x);\n    }\n    if (x === Infinity) {\n        return 1;\n    }\n    else if (x === -Infinity) {\n        return -1;\n    }\n    else {\n        const e2x = Math.exp(2 * x);\n        return (e2x - 1) / (e2x + 1);\n    }\n}\nexport function sizeToSquarishShape(size) {\n    const width = Math.ceil(Math.sqrt(size));\n    return [width, Math.ceil(size / width)];\n}\n/**\n * Creates a new array with randomized indices to a given quantity.\n *\n * ```js\n * const randomTen = tf.util.createShuffledIndices(10);\n * console.log(randomTen);\n * ```\n *\n * @param number Quantity of how many shuffled indices to create.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function createShuffledIndices(n) {\n    const shuffledIndices = new Uint32Array(n);\n    for (let i = 0; i < n; ++i) {\n        shuffledIndices[i] = i;\n    }\n    shuffle(shuffledIndices);\n    return shuffledIndices;\n}\nexport function rightPad(a, size) {\n    if (size <= a.length) {\n        return a;\n    }\n    return a + ' '.repeat(size - a.length);\n}\nexport function repeatedTry(checkFn, delayFn = (counter) => 0, maxCounter, scheduleFn) {\n    return new Promise((resolve, reject) => {\n        let tryCount = 0;\n        const tryFn = () => {\n            if (checkFn()) {\n                resolve();\n                return;\n            }\n            tryCount++;\n            const nextBackoff = delayFn(tryCount);\n            if (maxCounter != null && tryCount >= maxCounter) {\n                reject();\n                return;\n            }\n            if (scheduleFn != null) {\n                scheduleFn(tryFn, nextBackoff);\n            }\n            else {\n                // google3 does not allow assigning another variable to setTimeout.\n                // Don't refactor this so scheduleFn has a default value of setTimeout.\n                setTimeout(tryFn, nextBackoff);\n            }\n        };\n        tryFn();\n    });\n}\n/**\n * Given the full size of the array and a shape that may contain -1 as the\n * implicit dimension, returns the inferred shape where -1 is replaced.\n * E.g. For shape=[2, -1, 3] and size=24, it will return [2, 4, 3].\n *\n * @param shape The shape, which may contain -1 in some dimension.\n * @param size The full size (number of elements) of the array.\n * @return The inferred shape where -1 is replaced with the inferred size.\n */\nexport function inferFromImplicitShape(shape, size) {\n    let shapeProd = 1;\n    let implicitIdx = -1;\n    for (let i = 0; i < shape.length; ++i) {\n        if (shape[i] >= 0) {\n            shapeProd *= shape[i];\n        }\n        else if (shape[i] === -1) {\n            if (implicitIdx !== -1) {\n                throw Error(`Shapes can only have 1 implicit size. ` +\n                    `Found -1 at dim ${implicitIdx} and dim ${i}`);\n            }\n            implicitIdx = i;\n        }\n        else if (shape[i] < 0) {\n            throw Error(`Shapes can not be < 0. Found ${shape[i]} at dim ${i}`);\n        }\n    }\n    if (implicitIdx === -1) {\n        if (size > 0 && size !== shapeProd) {\n            throw Error(`Size(${size}) must match the product of shape ${shape}`);\n        }\n        return shape;\n    }\n    if (shapeProd === 0) {\n        throw Error(`Cannot infer the missing size in [${shape}] when ` +\n            `there are 0 elements`);\n    }\n    if (size % shapeProd !== 0) {\n        throw Error(`The implicit shape can't be a fractional number. ` +\n            `Got ${size} / ${shapeProd}`);\n    }\n    const newShape = shape.slice();\n    newShape[implicitIdx] = size / shapeProd;\n    return newShape;\n}\nexport function parseAxisParam(axis, shape) {\n    const rank = shape.length;\n    // Normalize input\n    axis = axis == null ? shape.map((s, i) => i) : [].concat(axis);\n    // Check for valid range\n    assert(axis.every(ax => ax >= -rank && ax < rank), () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n        `got axis ${axis}`);\n    // Check for only integers\n    assert(axis.every(ax => isInt(ax)), () => `All values in axis param must be integers but ` +\n        `got axis ${axis}`);\n    // Handle negative axis.\n    return axis.map(a => a < 0 ? rank + a : a);\n}\n/** Reduces the shape by removing all dimensions of shape 1. */\nexport function squeezeShape(shape, axis) {\n    const newShape = [];\n    const keptDims = [];\n    const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n    const axes = (axis == null || isEmptyArray) ?\n        null :\n        parseAxisParam(axis, shape).sort();\n    let j = 0;\n    for (let i = 0; i < shape.length; ++i) {\n        if (axes != null) {\n            if (axes[j] === i && shape[i] !== 1) {\n                throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n            }\n            if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n                newShape.push(shape[i]);\n                keptDims.push(i);\n            }\n            if (axes[j] <= i) {\n                j++;\n            }\n        }\n        if (shape[i] !== 1) {\n            newShape.push(shape[i]);\n            keptDims.push(i);\n        }\n    }\n    return { newShape, keptDims };\n}\nexport function getTypedArrayFromDType(dtype, size) {\n    return getArrayFromDType(dtype, size);\n}\nexport function getArrayFromDType(dtype, size) {\n    let values = null;\n    if (dtype == null || dtype === 'float32') {\n        values = new Float32Array(size);\n    }\n    else if (dtype === 'int32') {\n        values = new Int32Array(size);\n    }\n    else if (dtype === 'bool') {\n        values = new Uint8Array(size);\n    }\n    else if (dtype === 'string') {\n        values = new Array(size);\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n    return values;\n}\nexport function checkConversionForErrors(vals, dtype) {\n    for (let i = 0; i < vals.length; i++) {\n        const num = vals[i];\n        if (isNaN(num) || !isFinite(num)) {\n            throw Error(`A tensor of type ${dtype} being uploaded contains ${num}.`);\n        }\n    }\n}\n/** Returns true if the dtype is valid. */\nexport function isValidDtype(dtype) {\n    return dtype === 'bool' || dtype === 'complex64' || dtype === 'float32' ||\n        dtype === 'int32' || dtype === 'string';\n}\n/**\n * Returns true if the new type can't encode the old type without loss of\n * precision.\n */\nexport function hasEncodingLoss(oldType, newType) {\n    if (newType === 'complex64') {\n        return false;\n    }\n    if (newType === 'float32' && oldType !== 'complex64') {\n        return false;\n    }\n    if (newType === 'int32' && oldType !== 'float32' && oldType !== 'complex64') {\n        return false;\n    }\n    if (newType === 'bool' && oldType === 'bool') {\n        return false;\n    }\n    return true;\n}\nexport function bytesPerElement(dtype) {\n    if (dtype === 'float32' || dtype === 'int32') {\n        return 4;\n    }\n    else if (dtype === 'complex64') {\n        return 8;\n    }\n    else if (dtype === 'bool') {\n        return 1;\n    }\n    else {\n        throw new Error(`Unknown dtype ${dtype}`);\n    }\n}\n/**\n * Returns the approximate number of bytes allocated in the string array - 2\n * bytes per character. Computing the exact bytes for a native string in JS\n * is not possible since it depends on the encoding of the html page that\n * serves the website.\n */\nexport function bytesFromStringArray(arr) {\n    if (arr == null) {\n        return 0;\n    }\n    let bytes = 0;\n    arr.forEach(x => bytes += x.length);\n    return bytes;\n}\n/** Returns true if the value is a string. */\nexport function isString(value) {\n    return typeof value === 'string' || value instanceof String;\n}\nexport function isBoolean(value) {\n    return typeof value === 'boolean';\n}\nexport function isNumber(value) {\n    return typeof value === 'number';\n}\nexport function inferDtype(values) {\n    if (Array.isArray(values)) {\n        return inferDtype(values[0]);\n    }\n    if (values instanceof Float32Array) {\n        return 'float32';\n    }\n    else if (values instanceof Int32Array || values instanceof Uint8Array ||\n        values instanceof Uint8ClampedArray) {\n        return 'int32';\n    }\n    else if (isNumber(values)) {\n        return 'float32';\n    }\n    else if (isString(values)) {\n        return 'string';\n    }\n    else if (isBoolean(values)) {\n        return 'bool';\n    }\n    return 'float32';\n}\nexport function isFunction(f) {\n    return !!(f && f.constructor && f.call && f.apply);\n}\nexport function nearestDivisor(size, start) {\n    for (let i = start; i < size; ++i) {\n        if (size % i === 0) {\n            return i;\n        }\n    }\n    return size;\n}\nexport function computeStrides(shape) {\n    const rank = shape.length;\n    if (rank < 2) {\n        return [];\n    }\n    // Last dimension has implicit stride of 1, thus having D-1 (instead of D)\n    // strides.\n    const strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n        strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    return strides;\n}\nfunction createNestedArray(offset, shape, a, isComplex = false) {\n    const ret = new Array();\n    if (shape.length === 1) {\n        const d = shape[0] * (isComplex ? 2 : 1);\n        for (let i = 0; i < d; i++) {\n            ret[i] = a[offset + i];\n        }\n    }\n    else {\n        const d = shape[0];\n        const rest = shape.slice(1);\n        const len = rest.reduce((acc, c) => acc * c) * (isComplex ? 2 : 1);\n        for (let i = 0; i < d; i++) {\n            ret[i] = createNestedArray(offset + i * len, rest, a, isComplex);\n        }\n    }\n    return ret;\n}\n// Provide a nested array of TypedArray in given shape.\nexport function toNestedArray(shape, a, isComplex = false) {\n    if (shape.length === 0) {\n        // Scalar type should return a single number.\n        return a[0];\n    }\n    const size = shape.reduce((acc, c) => acc * c) * (isComplex ? 2 : 1);\n    if (size === 0) {\n        // A tensor with shape zero should be turned into empty list.\n        return [];\n    }\n    if (size !== a.length) {\n        throw new Error(`[${shape}] does not match the input size ${a.length}${isComplex ? ' for a complex tensor' : ''}.`);\n    }\n    return createNestedArray(0, shape, a, isComplex);\n}\nexport function convertBackendValuesAndArrayBuffer(data, dtype) {\n    // If is type Uint8Array[], return it directly.\n    if (Array.isArray(data)) {\n        return data;\n    }\n    if (dtype === 'float32') {\n        return data instanceof Float32Array ? data : new Float32Array(data);\n    }\n    else if (dtype === 'int32') {\n        return data instanceof Int32Array ? data : new Int32Array(data);\n    }\n    else if (dtype === 'bool' || dtype === 'string') {\n        return Uint8Array.from(new Int32Array(data));\n    }\n    else {\n        throw new Error(`Unknown dtype ${dtype}`);\n    }\n}\nexport function makeOnesTypedArray(size, dtype) {\n    const array = makeZerosTypedArray(size, dtype);\n    for (let i = 0; i < array.length; i++) {\n        array[i] = 1;\n    }\n    return array;\n}\nexport function makeZerosTypedArray(size, dtype) {\n    if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n        return new Float32Array(size);\n    }\n    else if (dtype === 'int32') {\n        return new Int32Array(size);\n    }\n    else if (dtype === 'bool') {\n        return new Uint8Array(size);\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n}\n/**\n * Make nested `TypedArray` filled with zeros.\n * @param shape The shape information for the nested array.\n * @param dtype dtype of the array element.\n */\nexport function makeZerosNestedTypedArray(shape, dtype) {\n    const size = shape.reduce((prev, curr) => prev * curr, 1);\n    if (dtype == null || dtype === 'float32') {\n        return toNestedArray(shape, new Float32Array(size));\n    }\n    else if (dtype === 'int32') {\n        return toNestedArray(shape, new Int32Array(size));\n    }\n    else if (dtype === 'bool') {\n        return toNestedArray(shape, new Uint8Array(size));\n    }\n    else {\n        throw new Error(`Unknown data type ${dtype}`);\n    }\n}\nexport function assertNonNegativeIntegerDimensions(shape) {\n    shape.forEach(dimSize => {\n        assert(Number.isInteger(dimSize) && dimSize >= 0, () => `Tensor must have a shape comprised of positive integers but got ` +\n            `shape [${shape}].`);\n    });\n}\n/**\n * Computes flat index for a given location (multidimentionsal index) in a\n * Tensor/multidimensional array.\n *\n * @param locs Location in the tensor.\n * @param rank Rank of the tensor.\n * @param strides Tensor strides.\n */\nexport function locToIndex(locs, rank, strides) {\n    if (rank === 0) {\n        return 0;\n    }\n    else if (rank === 1) {\n        return locs[0];\n    }\n    let index = locs[locs.length - 1];\n    for (let i = 0; i < locs.length - 1; ++i) {\n        index += strides[i] * locs[i];\n    }\n    return index;\n}\n/**\n * Computes the location (multidimensional index) in a\n * tensor/multidimentional array for a given flat index.\n *\n * @param index Index in flat array.\n * @param rank Rank of tensor.\n * @param strides Strides of tensor.\n */\nexport function indexToLoc(index, rank, strides) {\n    if (rank === 0) {\n        return [];\n    }\n    else if (rank === 1) {\n        return [index];\n    }\n    const locs = new Array(rank);\n    for (let i = 0; i < locs.length - 1; ++i) {\n        locs[i] = Math.floor(index / strides[i]);\n        index -= locs[i] * strides[i];\n    }\n    locs[locs.length - 1] = index;\n    return locs;\n}\n/**\n * This method asserts whether an object is a Promise instance.\n * @param object\n */\n// tslint:disable-next-line: no-any\nexport function isPromise(object) {\n    //  We chose to not use 'obj instanceOf Promise' for two reasons:\n    //  1. It only reliably works for es6 Promise, not other Promise\n    //  implementations.\n    //  2. It doesn't work with framework that uses zone.js. zone.js monkey\n    //  patch the async calls, so it is possible the obj (patched) is\n    //  comparing to a pre-patched Promise.\n    return object && object.then && typeof object.then === 'function';\n}\n//# sourceMappingURL=data:application/json;base64,"],"names":["FORMAT_LIMIT_NUM_VALS","FORMAT_NUM_FIRST_LAST_VALS","FORMAT_NUM_SIG_DIGITS","tensorToString","vals","shape","dtype","verbose","strides","padPerCol","computeMaxSizePerColumn","rank","length","valsLines","subTensorToString","lines","push","map","l","join","n","numCols","Array","fill","valuesOrTuples","createComplexTuples","row","offset","j","Math","max","valToString","val","pad","valStr","isArray","parseFloat","toFixed","boolNumToString","toString","v","isLast","storagePerElement","size","complexTuple","firstValsSize","firstVals","from","slice","lastVals","x","i","displayVals","subshape","substrides","stride","start","end","sep","newLineSep","complexTuples","TensorBuffer","constructor","values","this","Error","set","value","locs","index","locToIndex","get","loc","msg","indexToLoc","floor","toTensor","trackerFn","makeTensor","opHandler","deprecationWarningFn","setTensorTracker","fn","setOpHandler","handler","setDeprecationWarningFn","Tensor","dataId","id","kept","isDisposedInternal","rankType","buffer","data","bufferSync","dataSync","array","arraySync","throwIfDisposed","read","bytes","b","util","decodeString","_a","dataToGPU","options","readToGPU","readSync","Uint8Array","dispose","isDisposed","kerasMask","disposeTensor","print","clone","cast","variable","trainable","name","makeVariable","getGlobalTensorClass","Object","defineProperty","Symbol","hasInstance","instance","Variable","initialValue","tensorId","super","assign","newValue","incRef","disposeVariable","Function","makeTypesMatch","a","getTensorsInContainer","result","list","seen","Set","walkTensorContainer","container","isIterable","iterable","k","has","add","obj","inferShape","firstElem","isTypedArray","usedChannels","channels","height","width","getBool","deepAssertShapeConsistency","indices","subShape","concat","assertDtype","expectedDtype","actualDType","argName","functionName","convertToTensor","parseAsDtype","inferredDtype","indexOf","type","inferredShape","skipTypedArray","toTypedArray","flatten","convertToTensorArray","arg","tensors","t","Rank","UpcastInt32AndMap","UpcastBoolAndMap","UpcastFloat32AndMap","UpcastComplex64AndMap","upcastTypeMap","upcastType","typeA","typeB","sumOutType","isWebGLData","texture","WebGLTexture","isWebGPUData","GPUBuffer","createScalarValue","encodeString","noConversionNeeded","Float32Array","Int32Array","bool","round","now","platform","fetch","path","requestInits","s","encoding","encode","decode","arr","maxIndex","key","keys","test","Number","shuffle","counter","random","swap","shuffleCombo","array2","clamp","min","nearestLargerEven","object","left","right","temp","sum","randUniform","r","distSquared","diff","assert","expr","assertShapesMatch","shapeA","shapeB","errorMessagePrefix","arraysEqual","assertNonNull","sizeFromShape","isScalarShape","arraysEqualWithNull","n1","n2","isInt","tanh","Infinity","e2x","exp","sizeToSquarishShape","ceil","sqrt","createShuffledIndices","shuffledIndices","Uint32Array","rightPad","repeat","repeatedTry","checkFn","delayFn","maxCounter","scheduleFn","Promise","resolve","reject","tryCount","tryFn","nextBackoff","setTimeout","inferFromImplicitShape","shapeProd","implicitIdx","newShape","parseAxisParam","axis","every","ax","squeezeShape","keptDims","isEmptyArray","axes","sort","getTypedArrayFromDType","getArrayFromDType","checkConversionForErrors","num","isNaN","isFinite","isValidDtype","hasEncodingLoss","oldType","newType","bytesPerElement","bytesFromStringArray","forEach","isString","String","isBoolean","isNumber","inferDtype","Uint8ClampedArray","isFunction","f","call","apply","nearestDivisor","computeStrides","createNestedArray","isComplex","ret","d","rest","len","reduce","acc","c","toNestedArray","convertBackendValuesAndArrayBuffer","makeOnesTypedArray","makeZerosTypedArray","makeZerosNestedTypedArray","prev","curr","assertNonNegativeIntegerDimensions","dimSize","isInteger","isPromise","then"],"sourceRoot":""}