{"version":3,"file":"js/chunk-vendors-df3a2acc.a1fdf0c4.js","mappings":"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","sources":["webpack://benefit/./node_modules/@tensorflow/tfjs-core/dist/index.js","webpack://benefit/./node_modules/@tensorflow/tfjs-core/dist/io/browser_files.js","webpack://benefit/./node_modules/@tensorflow/tfjs-core/dist/io/composite_array_buffer.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Required side effectful code.\nimport './base_side_effects';\n// TODO(mattSoulanille): Move this to base_side_effects.ts\n// It is here for now because custom bundles need to avoid calling it, and they\n// only replace the index.js file, not the base_side_effects file.\nimport { registerOptimizers } from './optimizers/register_optimizers';\nregisterOptimizers();\n// All exports from this package should be in base.\nexport * from './base';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90ZmpzLWNvcmUvc3JjL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUVILGdDQUFnQztBQUNoQyxPQUFPLHFCQUFxQixDQUFDO0FBRTdCLDBEQUEwRDtBQUMxRCwrRUFBK0U7QUFDL0Usa0VBQWtFO0FBQ2xFLE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLGtDQUFrQyxDQUFDO0FBQ3BFLGtCQUFrQixFQUFFLENBQUM7QUFFckIsbURBQW1EO0FBQ25ELGNBQWMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG4vLyBSZXF1aXJlZCBzaWRlIGVmZmVjdGZ1bCBjb2RlLlxuaW1wb3J0ICcuL2Jhc2Vfc2lkZV9lZmZlY3RzJztcblxuLy8gVE9ETyhtYXR0U291bGFuaWxsZSk6IE1vdmUgdGhpcyB0byBiYXNlX3NpZGVfZWZmZWN0cy50c1xuLy8gSXQgaXMgaGVyZSBmb3Igbm93IGJlY2F1c2UgY3VzdG9tIGJ1bmRsZXMgbmVlZCB0byBhdm9pZCBjYWxsaW5nIGl0LCBhbmQgdGhleVxuLy8gb25seSByZXBsYWNlIHRoZSBpbmRleC5qcyBmaWxlLCBub3QgdGhlIGJhc2Vfc2lkZV9lZmZlY3RzIGZpbGUuXG5pbXBvcnQge3JlZ2lzdGVyT3B0aW1pemVyc30gZnJvbSAnLi9vcHRpbWl6ZXJzL3JlZ2lzdGVyX29wdGltaXplcnMnO1xucmVnaXN0ZXJPcHRpbWl6ZXJzKCk7XG5cbi8vIEFsbCBleHBvcnRzIGZyb20gdGhpcyBwYWNrYWdlIHNob3VsZCBiZSBpbiBiYXNlLlxuZXhwb3J0ICogZnJvbSAnLi9iYXNlJztcbiJdfQ==","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * IOHandlers related to files, such as browser-triggered file downloads,\n * user-selected files in browser.\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { basename, getModelArtifactsForJSON, getModelArtifactsInfoForJSON, getModelJSONForModelArtifacts } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nimport { CompositeArrayBuffer } from './composite_array_buffer';\nconst DEFAULT_FILE_NAME_PREFIX = 'model';\nconst DEFAULT_JSON_EXTENSION_NAME = '.json';\nconst DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';\nfunction defer(f) {\n    return new Promise(resolve => setTimeout(resolve)).then(f);\n}\nclass BrowserDownloads {\n    constructor(fileNamePrefix) {\n        if (!env().getBool('IS_BROWSER')) {\n            // TODO(cais): Provide info on what IOHandlers are available under the\n            //   current environment.\n            throw new Error('browserDownloads() cannot proceed because the current environment ' +\n                'is not a browser.');\n        }\n        if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n            fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n        }\n        if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n            fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n        }\n        this.modelJsonFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n        this.weightDataFileName =\n            fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n    }\n    async save(modelArtifacts) {\n        if (typeof (document) === 'undefined') {\n            throw new Error('Browser downloads are not supported in ' +\n                'this environment since `document` is not present');\n        }\n        // TODO(mattsoulanille): Support saving models over 2GB that exceed\n        // Chrome's ArrayBuffer size limit.\n        const weightBuffer = CompositeArrayBuffer.join(modelArtifacts.weightData);\n        const weightsURL = window.URL.createObjectURL(new Blob([weightBuffer], { type: 'application/octet-stream' }));\n        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n            throw new Error('BrowserDownloads.save() does not support saving model topology ' +\n                'in binary formats yet.');\n        }\n        else {\n            const weightsManifest = [{\n                    paths: ['./' + this.weightDataFileName],\n                    weights: modelArtifacts.weightSpecs\n                }];\n            const modelJSON = getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);\n            const modelJsonURL = window.URL.createObjectURL(new Blob([JSON.stringify(modelJSON)], { type: 'application/json' }));\n            // If anchor elements are not provided, create them without attaching them\n            // to parents, so that the downloaded file names can be controlled.\n            const jsonAnchor = this.modelJsonAnchor == null ?\n                document.createElement('a') :\n                this.modelJsonAnchor;\n            jsonAnchor.download = this.modelJsonFileName;\n            jsonAnchor.href = modelJsonURL;\n            // Trigger downloads by evoking a click event on the download anchors.\n            // When multiple downloads are started synchronously, Firefox will only\n            // save the last one.\n            await defer(() => jsonAnchor.dispatchEvent(new MouseEvent('click')));\n            if (modelArtifacts.weightData != null) {\n                const weightDataAnchor = this.weightDataAnchor == null ?\n                    document.createElement('a') :\n                    this.weightDataAnchor;\n                weightDataAnchor.download = this.weightDataFileName;\n                weightDataAnchor.href = weightsURL;\n                await defer(() => weightDataAnchor.dispatchEvent(new MouseEvent('click')));\n            }\n            return { modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts) };\n        }\n    }\n}\nBrowserDownloads.URL_SCHEME = 'downloads://';\nexport { BrowserDownloads };\nclass BrowserFiles {\n    constructor(files) {\n        if (files == null || files.length < 1) {\n            throw new Error(`When calling browserFiles, at least 1 file is required, ` +\n                `but received ${files}`);\n        }\n        this.jsonFile = files[0];\n        this.weightsFiles = files.slice(1);\n    }\n    async load() {\n        return new Promise((resolve, reject) => {\n            const jsonReader = new FileReader();\n            jsonReader.onload = (event) => {\n                // tslint:disable-next-line:no-any\n                const modelJSON = JSON.parse(event.target.result);\n                const modelTopology = modelJSON.modelTopology;\n                if (modelTopology == null) {\n                    reject(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));\n                    return;\n                }\n                const weightsManifest = modelJSON.weightsManifest;\n                if (weightsManifest == null) {\n                    reject(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));\n                    return;\n                }\n                if (this.weightsFiles.length === 0) {\n                    resolve({ modelTopology });\n                    return;\n                }\n                const modelArtifactsPromise = getModelArtifactsForJSON(modelJSON, (weightsManifest) => this.loadWeights(weightsManifest));\n                resolve(modelArtifactsPromise);\n            };\n            jsonReader.onerror = error => reject(`Failed to read model topology and weights manifest JSON ` +\n                `from file '${this.jsonFile.name}'. BrowserFiles supports loading ` +\n                `Keras-style tf.Model artifacts only.`);\n            jsonReader.readAsText(this.jsonFile);\n        });\n    }\n    loadWeights(weightsManifest) {\n        const weightSpecs = [];\n        const paths = [];\n        for (const entry of weightsManifest) {\n            weightSpecs.push(...entry.weights);\n            paths.push(...entry.paths);\n        }\n        const pathToFile = this.checkManifestAndWeightFiles(weightsManifest);\n        const promises = paths.map(path => this.loadWeightsFile(path, pathToFile[path]));\n        return Promise.all(promises).then(buffers => [weightSpecs, buffers]);\n    }\n    loadWeightsFile(path, file) {\n        return new Promise((resolve, reject) => {\n            const weightFileReader = new FileReader();\n            weightFileReader.onload = (event) => {\n                // tslint:disable-next-line:no-any\n                const weightData = event.target.result;\n                resolve(weightData);\n            };\n            weightFileReader.onerror = error => reject(`Failed to weights data from file of path '${path}'.`);\n            weightFileReader.readAsArrayBuffer(file);\n        });\n    }\n    /**\n     * Check the compatibility between weights manifest and weight files.\n     */\n    checkManifestAndWeightFiles(manifest) {\n        const basenames = [];\n        const fileNames = this.weightsFiles.map(file => basename(file.name));\n        const pathToFile = {};\n        for (const group of manifest) {\n            group.paths.forEach(path => {\n                const pathBasename = basename(path);\n                if (basenames.indexOf(pathBasename) !== -1) {\n                    throw new Error(`Duplicate file basename found in weights manifest: ` +\n                        `'${pathBasename}'`);\n                }\n                basenames.push(pathBasename);\n                if (fileNames.indexOf(pathBasename) === -1) {\n                    throw new Error(`Weight file with basename '${pathBasename}' is not provided.`);\n                }\n                else {\n                    pathToFile[path] = this.weightsFiles[fileNames.indexOf(pathBasename)];\n                }\n            });\n        }\n        if (basenames.length !== this.weightsFiles.length) {\n            throw new Error(`Mismatch in the number of files in weights manifest ` +\n                `(${basenames.length}) and the number of weight files provided ` +\n                `(${this.weightsFiles.length}).`);\n        }\n        return pathToFile;\n    }\n}\nexport const browserDownloadsRouter = (url) => {\n    if (!env().getBool('IS_BROWSER')) {\n        return null;\n    }\n    else {\n        if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {\n            return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n        }\n        else {\n            return null;\n        }\n    }\n};\nIORouterRegistry.registerSaveRouter(browserDownloadsRouter);\n/**\n * Creates an IOHandler that triggers file downloads from the browser.\n *\n * The returned `IOHandler` instance can be used as model exporting methods such\n * as `tf.Model.save` and supports only saving.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * const saveResult = await model.save('downloads://mymodel');\n * // This will trigger downloading of two files:\n * //   'mymodel.json' and 'mymodel.weights.bin'.\n * console.log(saveResult);\n * ```\n *\n * @param fileNamePrefix Prefix name of the files to be downloaded. For use with\n *   `tf.Model`, `fileNamePrefix` should follow either of the following two\n *   formats:\n *   1. `null` or `undefined`, in which case the default file\n *      names will be used:\n *      - 'model.json' for the JSON file containing the model topology and\n *        weights manifest.\n *      - 'model.weights.bin' for the binary file containing the binary weight\n *        values.\n *   2. A single string or an Array of a single string, as the file name prefix.\n *      For example, if `'foo'` is provided, the downloaded JSON\n *      file and binary weights file will be named 'foo.json' and\n *      'foo.weights.bin', respectively.\n * @param config Additional configuration for triggering downloads.\n * @returns An instance of `BrowserDownloads` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserDownloads(fileNamePrefix = 'model') {\n    return new BrowserDownloads(fileNamePrefix);\n}\n/**\n * Creates an IOHandler that loads model artifacts from user-selected files.\n *\n * This method can be used for loading from files such as user-selected files\n * in the browser.\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * // Note: This code snippet won't run properly without the actual file input\n * //   elements in the HTML DOM.\n *\n * // Suppose there are two HTML file input (`<input type=\"file\" ...>`)\n * // elements.\n * const uploadJSONInput = document.getElementById('upload-json');\n * const uploadWeightsInput = document.getElementById('upload-weights');\n * const model = await tf.loadLayersModel(tf.io.browserFiles(\n *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n * ```\n *\n * @param files `File`s to load from. Currently, this function supports only\n *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for\n *   which an `Array` of `File`s is expected (in that order):\n *   - A JSON file containing the model topology and weight manifest.\n *   - Optionally, one or more binary files containing the binary weights.\n *     These files must have names that match the paths in the `weightsManifest`\n *     contained by the aforementioned JSON file, or errors will be thrown\n *     during loading. These weights files have the same format as the ones\n *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`\n *     Python PIP package. If no weights files are provided, only the model\n *     topology will be loaded from the JSON file above.\n * @returns An instance of `Files` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserFiles(files) {\n    return new BrowserFiles(files);\n}\n//# sourceMappingURL=data:application/json;base64,","import * as util from '../util';\n/**\n * Wraps a list of ArrayBuffers into a `slice()`-able object without allocating\n * a large ArrayBuffer.\n *\n * Allocating large ArrayBuffers (~2GB) can be unstable on Chrome. TFJS loads\n * its weights as a list of (usually) 4MB ArrayBuffers and then slices the\n * weight tensors out of them. For small models, it's safe to concatenate all\n * the weight buffers into a single ArrayBuffer and then slice the weight\n * tensors out of it, but for large models, a different approach is needed.\n */\nexport class CompositeArrayBuffer {\n    /**\n     * Concatenate a number of ArrayBuffers into one.\n     *\n     * @param buffers An array of ArrayBuffers to concatenate, or a single\n     *     ArrayBuffer.\n     * @returns Result of concatenating `buffers` in order.\n     */\n    static join(buffers) {\n        return new CompositeArrayBuffer(buffers).slice();\n    }\n    constructor(buffers) {\n        this.shards = [];\n        this.previousShardIndex = 0;\n        if (buffers == null) {\n            return;\n        }\n        // Normalize the `buffers` input to be `ArrayBuffer[]`.\n        if (!(buffers instanceof Array)) {\n            buffers = [buffers];\n        }\n        buffers = buffers.map((bufferOrTypedArray) => {\n            if (util.isTypedArray(bufferOrTypedArray)) {\n                return bufferOrTypedArray.buffer;\n            }\n            return bufferOrTypedArray;\n        });\n        // Skip setting up shards if there are no buffers.\n        if (buffers.length === 0) {\n            return;\n        }\n        this.bufferUniformSize = buffers[0].byteLength;\n        let start = 0;\n        for (let i = 0; i < buffers.length; i++) {\n            const buffer = buffers[i];\n            // Check that all buffers except the last one have the same length.\n            if (i !== buffers.length - 1 &&\n                buffer.byteLength !== this.bufferUniformSize) {\n                // Unset the buffer uniform size, since the buffer sizes are not\n                // uniform.\n                this.bufferUniformSize = undefined;\n            }\n            // Create the shards, including their start and end points.\n            const end = start + buffer.byteLength;\n            this.shards.push({ buffer, start, end });\n            start = end;\n        }\n        // Set the byteLenghth\n        if (this.shards.length === 0) {\n            this.byteLength = 0;\n        }\n        this.byteLength = this.shards[this.shards.length - 1].end;\n    }\n    slice(start = 0, end = this.byteLength) {\n        // If there are no shards, then the CompositeArrayBuffer was initialized\n        // with no data.\n        if (this.shards.length === 0) {\n            return new ArrayBuffer(0);\n        }\n        // NaN is treated as zero for slicing. This matches ArrayBuffer's behavior.\n        start = isNaN(Number(start)) ? 0 : start;\n        end = isNaN(Number(end)) ? 0 : end;\n        // Fix the bounds to within the array.\n        start = Math.max(0, start);\n        end = Math.min(this.byteLength, end);\n        if (end <= start) {\n            return new ArrayBuffer(0);\n        }\n        const startShardIndex = this.findShardForByte(start);\n        if (startShardIndex === -1) {\n            // This should not happen since the start and end indices are always\n            // within 0 and the composite array's length.\n            throw new Error(`Could not find start shard for byte ${start}`);\n        }\n        const size = end - start;\n        const outputBuffer = new ArrayBuffer(size);\n        const outputArray = new Uint8Array(outputBuffer);\n        let sliced = 0;\n        for (let i = startShardIndex; i < this.shards.length; i++) {\n            const shard = this.shards[i];\n            const globalStart = start + sliced;\n            const localStart = globalStart - shard.start;\n            const outputStart = sliced;\n            const globalEnd = Math.min(end, shard.end);\n            const localEnd = globalEnd - shard.start;\n            const outputSlice = new Uint8Array(shard.buffer, localStart, localEnd - localStart);\n            outputArray.set(outputSlice, outputStart);\n            sliced += outputSlice.length;\n            if (end < shard.end) {\n                break;\n            }\n        }\n        return outputBuffer;\n    }\n    /**\n     * Get the index of the shard that contains the byte at `byteIndex`.\n     */\n    findShardForByte(byteIndex) {\n        if (this.shards.length === 0 || byteIndex < 0 ||\n            byteIndex >= this.byteLength) {\n            return -1;\n        }\n        // If the buffers have a uniform size, compute the shard directly.\n        if (this.bufferUniformSize != null) {\n            this.previousShardIndex = Math.floor(byteIndex / this.bufferUniformSize);\n            return this.previousShardIndex;\n        }\n        // If the buffers don't have a uniform size, we need to search for the\n        // shard. That means we need a function to check where the byteIndex lies\n        // relative to a given shard.\n        function check(shard) {\n            if (byteIndex < shard.start) {\n                return -1;\n            }\n            if (byteIndex >= shard.end) {\n                return 1;\n            }\n            return 0;\n        }\n        // For efficiency, try the previous shard first.\n        if (check(this.shards[this.previousShardIndex]) === 0) {\n            return this.previousShardIndex;\n        }\n        // Otherwise, use a generic search function.\n        // This should almost never end up being used in practice since the weight\n        // entries should always be in order.\n        const index = search(this.shards, check);\n        if (index === -1) {\n            return -1;\n        }\n        this.previousShardIndex = index;\n        return this.previousShardIndex;\n    }\n}\n/**\n * Search for an element of a sorted array.\n *\n * @param sortedArray The sorted array to search\n * @param compare A function to compare the current value against the searched\n *     value. Return 0 on a match, negative if the searched value is less than\n *     the value passed to the function, and positive if the searched value is\n *     greater than the value passed to the function.\n * @returns The index of the element, or -1 if it's not in the array.\n */\nexport function search(sortedArray, compare) {\n    // Binary search\n    let min = 0;\n    let max = sortedArray.length;\n    while (min <= max) {\n        const middle = Math.floor((max - min) / 2) + min;\n        const side = compare(sortedArray[middle]);\n        if (side === 0) {\n            return middle;\n        }\n        else if (side < 0) {\n            max = middle;\n        }\n        else {\n            min = middle + 1;\n        }\n    }\n    return -1;\n}\n//# sourceMappingURL=data:application/json;base64,"],"names":["DEFAULT_FILE_NAME_PREFIX","DEFAULT_JSON_EXTENSION_NAME","DEFAULT_WEIGHT_DATA_EXTENSION_NAME","defer","f","Promise","resolve","setTimeout","then","BrowserDownloads","constructor","fileNamePrefix","getBool","Error","startsWith","URL_SCHEME","slice","length","this","modelJsonFileName","weightDataFileName","save","modelArtifacts","weightBuffer","join","weightData","weightsURL","window","URL","createObjectURL","Blob","type","modelTopology","ArrayBuffer","weightsManifest","paths","weights","weightSpecs","modelJSON","modelJsonURL","JSON","stringify","jsonAnchor","modelJsonAnchor","document","createElement","download","href","dispatchEvent","MouseEvent","weightDataAnchor","modelArtifactsInfo","browserDownloadsRouter","url","Array","isArray","browserDownloads","registerSaveRouter","CompositeArrayBuffer","buffers","shards","previousShardIndex","map","bufferOrTypedArray","buffer","bufferUniformSize","byteLength","start","i","undefined","end","push","isNaN","Number","Math","max","min","startShardIndex","findShardForByte","size","outputBuffer","outputArray","Uint8Array","sliced","shard","globalStart","localStart","outputStart","globalEnd","localEnd","outputSlice","set","byteIndex","floor","check","index","search","sortedArray","compare","middle","side"],"sourceRoot":""}