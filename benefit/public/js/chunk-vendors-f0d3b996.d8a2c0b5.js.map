{"version":3,"file":"js/chunk-vendors-f0d3b996.d8a2c0b5.js","mappings":"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","sources":["webpack://benefit/./node_modules/@tensorflow/tfjs-core/dist/io/http.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * IOHandler implementations based on HTTP requests in the web browser.\n *\n * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n */\nimport { env } from '../environment';\nimport { assert } from '../util';\nimport { getModelArtifactsForJSON, getModelArtifactsInfoForJSON, getModelJSONForModelArtifacts, getWeightSpecs } from './io_utils';\nimport { CompositeArrayBuffer } from './composite_array_buffer';\nimport { IORouterRegistry } from './router_registry';\nimport { loadWeightsAsArrayBuffer, streamWeights } from './weights_loader';\nconst OCTET_STREAM_MIME_TYPE = 'application/octet-stream';\nconst JSON_TYPE = 'application/json';\nclass HTTPRequest {\n    constructor(path, loadOptions) {\n        this.DEFAULT_METHOD = 'POST';\n        if (loadOptions == null) {\n            loadOptions = {};\n        }\n        this.weightPathPrefix = loadOptions.weightPathPrefix;\n        this.weightUrlConverter = loadOptions.weightUrlConverter;\n        if (loadOptions.fetchFunc != null) {\n            assert(typeof loadOptions.fetchFunc === 'function', () => 'Must pass a function that matches the signature of ' +\n                '`fetch` (see ' +\n                'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)');\n            this.fetch = loadOptions.fetchFunc;\n        }\n        else {\n            this.fetch = env().platform.fetch;\n        }\n        assert(path != null && path.length > 0, () => 'URL path for http must not be null, undefined or ' +\n            'empty.');\n        if (Array.isArray(path)) {\n            assert(path.length === 2, () => 'URL paths for http must have a length of 2, ' +\n                `(actual length is ${path.length}).`);\n        }\n        this.path = path;\n        if (loadOptions.requestInit != null &&\n            loadOptions.requestInit.body != null) {\n            throw new Error('requestInit is expected to have no pre-existing body, but has one.');\n        }\n        this.requestInit = loadOptions.requestInit || {};\n        this.loadOptions = loadOptions;\n    }\n    async save(modelArtifacts) {\n        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n            throw new Error('BrowserHTTPRequest.save() does not support saving model topology ' +\n                'in binary formats yet.');\n        }\n        const init = Object.assign({ method: this.DEFAULT_METHOD }, this.requestInit);\n        init.body = new FormData();\n        const weightsManifest = [{\n                paths: ['./model.weights.bin'],\n                weights: modelArtifacts.weightSpecs,\n            }];\n        const modelTopologyAndWeightManifest = getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);\n        init.body.append('model.json', new Blob([JSON.stringify(modelTopologyAndWeightManifest)], { type: JSON_TYPE }), 'model.json');\n        if (modelArtifacts.weightData != null) {\n            // TODO(mattsoulanille): Support saving models over 2GB that exceed\n            // Chrome's ArrayBuffer size limit.\n            const weightBuffer = CompositeArrayBuffer.join(modelArtifacts.weightData);\n            init.body.append('model.weights.bin', new Blob([weightBuffer], { type: OCTET_STREAM_MIME_TYPE }), 'model.weights.bin');\n        }\n        const response = await this.fetch(this.path, init);\n        if (response.ok) {\n            return {\n                modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts),\n                responses: [response],\n            };\n        }\n        else {\n            throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ` +\n                `${response.status}.`);\n        }\n    }\n    async loadModelJSON() {\n        const modelConfigRequest = await this.fetch(this.path, this.requestInit);\n        if (!modelConfigRequest.ok) {\n            throw new Error(`Request to ${this.path} failed with status code ` +\n                `${modelConfigRequest.status}. Please verify this URL points to ` +\n                `the model JSON of the model to load.`);\n        }\n        let modelJSON;\n        try {\n            modelJSON = await modelConfigRequest.json();\n        }\n        catch (e) {\n            let message = `Failed to parse model JSON of response from ${this.path}.`;\n            // TODO(nsthorat): Remove this after some time when we're comfortable that\n            // .pb files are mostly gone.\n            if (this.path.endsWith('.pb')) {\n                message += ' Your path contains a .pb file extension. ' +\n                    'Support for .pb models have been removed in TensorFlow.js 1.0 ' +\n                    'in favor of .json models. You can re-convert your Python ' +\n                    'TensorFlow model using the TensorFlow.js 1.0 conversion scripts ' +\n                    'or you can convert your.pb models with the \\'pb2json\\'' +\n                    'NPM script in the tensorflow/tfjs-converter repository.';\n            }\n            else {\n                message += ' Please make sure the server is serving valid ' +\n                    'JSON for this request.';\n            }\n            throw new Error(message);\n        }\n        // We do not allow both modelTopology and weightsManifest to be missing.\n        const modelTopology = modelJSON.modelTopology;\n        const weightsManifest = modelJSON.weightsManifest;\n        if (modelTopology == null && weightsManifest == null) {\n            throw new Error(`The JSON from HTTP path ${this.path} contains neither model ` +\n                `topology or manifest for weights.`);\n        }\n        return modelJSON;\n    }\n    /**\n     * Load model artifacts via HTTP request(s).\n     *\n     * See the documentation to `tf.io.http` for details on the saved\n     * artifacts.\n     *\n     * @returns The loaded model artifacts (if loading succeeds).\n     */\n    async load() {\n        if (this.loadOptions.streamWeights) {\n            return this.loadStream();\n        }\n        const modelJSON = await this.loadModelJSON();\n        return getModelArtifactsForJSON(modelJSON, (weightsManifest) => this.loadWeights(weightsManifest));\n    }\n    async loadStream() {\n        const modelJSON = await this.loadModelJSON();\n        const fetchURLs = await this.getWeightUrls(modelJSON.weightsManifest);\n        const weightSpecs = getWeightSpecs(modelJSON.weightsManifest);\n        const stream = () => streamWeights(fetchURLs, this.loadOptions);\n        return Object.assign(Object.assign({}, modelJSON), { weightSpecs, getWeightStream: stream });\n    }\n    async getWeightUrls(weightsManifest) {\n        const weightPath = Array.isArray(this.path) ? this.path[1] : this.path;\n        const [prefix, suffix] = parseUrl(weightPath);\n        const pathPrefix = this.weightPathPrefix || prefix;\n        const fetchURLs = [];\n        const urlPromises = [];\n        for (const weightsGroup of weightsManifest) {\n            for (const path of weightsGroup.paths) {\n                if (this.weightUrlConverter != null) {\n                    urlPromises.push(this.weightUrlConverter(path));\n                }\n                else {\n                    fetchURLs.push(pathPrefix + path + suffix);\n                }\n            }\n        }\n        if (this.weightUrlConverter) {\n            fetchURLs.push(...await Promise.all(urlPromises));\n        }\n        return fetchURLs;\n    }\n    async loadWeights(weightsManifest) {\n        const fetchURLs = await this.getWeightUrls(weightsManifest);\n        const weightSpecs = getWeightSpecs(weightsManifest);\n        const buffers = await loadWeightsAsArrayBuffer(fetchURLs, this.loadOptions);\n        return [weightSpecs, buffers];\n    }\n}\nHTTPRequest.URL_SCHEME_REGEX = /^https?:\\/\\//;\nexport { HTTPRequest };\n/**\n * Extract the prefix and suffix of the url, where the prefix is the path before\n * the last file, and suffix is the search params after the last file.\n * ```\n * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'\n * [prefix, suffix] = parseUrl(url)\n * // prefix = 'http://tfhub.dev/model/1/'\n * // suffix = '?tfjs-format=file'\n * ```\n * @param url the model url to be parsed.\n */\nexport function parseUrl(url) {\n    const lastSlash = url.lastIndexOf('/');\n    const lastSearchParam = url.lastIndexOf('?');\n    const prefix = url.substring(0, lastSlash);\n    const suffix = lastSearchParam > lastSlash ? url.substring(lastSearchParam) : '';\n    return [prefix + '/', suffix];\n}\nexport function isHTTPScheme(url) {\n    return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;\n}\nexport const httpRouter = (url, loadOptions) => {\n    if (typeof fetch === 'undefined' &&\n        (loadOptions == null || loadOptions.fetchFunc == null)) {\n        // `http` uses `fetch` or `node-fetch`, if one wants to use it in\n        // an environment that is not the browser or node they have to setup a\n        // global fetch polyfill.\n        return null;\n    }\n    else {\n        let isHTTP = true;\n        if (Array.isArray(url)) {\n            isHTTP = url.every(urlItem => isHTTPScheme(urlItem));\n        }\n        else {\n            isHTTP = isHTTPScheme(url);\n        }\n        if (isHTTP) {\n            return http(url, loadOptions);\n        }\n    }\n    return null;\n};\nIORouterRegistry.registerSaveRouter(httpRouter);\nIORouterRegistry.registerLoadRouter(httpRouter);\n/**\n * Creates an IOHandler subtype that sends model artifacts to HTTP server.\n *\n * An HTTP request of the `multipart/form-data` mime type will be sent to the\n * `path` URL. The form data includes artifacts that represent the topology\n * and/or weights of the model. In the case of Keras-style `tf.Model`, two\n * blobs (files) exist in form-data:\n *   - A JSON file consisting of `modelTopology` and `weightsManifest`.\n *   - A binary weights file consisting of the concatenated weight values.\n * These files are in the same format as the one generated by\n * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).\n *\n * The following code snippet exemplifies the client-side code that uses this\n * function:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save(tf.io.http(\n *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));\n * console.log(saveResult);\n * ```\n *\n * If the default `POST` method is to be used, without any custom parameters\n * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:\n *\n * ```js\n * const saveResult = await model.save('http://model-server:5000/upload');\n * ```\n *\n * The following GitHub Gist\n * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864\n * implements a server based on [flask](https://github.com/pallets/flask) that\n * can receive the request. Upon receiving the model artifacts via the requst,\n * this particular server reconstitutes instances of [Keras\n * Models](https://keras.io/models/model/) in memory.\n *\n *\n * @param path A URL path to the model.\n *   Can be an absolute HTTP path (e.g.,\n *   'http://localhost:8000/model-upload)') or a relative path (e.g.,\n *   './model-upload').\n * @param requestInit Request configurations to be used when sending\n *    HTTP request to server using `fetch`. It can contain fields such as\n *    `method`, `credentials`, `headers`, `mode`, etc. See\n *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\n *    for more information. `requestInit` must not have a body, because the\n * body will be set by TensorFlow.js. File blobs representing the model\n * topology (filename: 'model.json') and the weights of the model (filename:\n * 'model.weights.bin') will be appended to the body. If `requestInit` has a\n * `body`, an Error will be thrown.\n * @param loadOptions Optional configuration for the loading. It includes the\n *   following fields:\n *   - weightPathPrefix Optional, this specifies the path prefix for weight\n *     files, by default this is calculated from the path param.\n *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,\n *     the `fetch` from node-fetch can be used here.\n *   - onProgress Optional, progress callback function, fired periodically\n *     before the load is completed.\n * @returns An instance of `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function http(path, loadOptions) {\n    return new HTTPRequest(path, loadOptions);\n}\n/**\n * Deprecated. Use `tf.io.http`.\n * @param path\n * @param loadOptions\n */\nexport function browserHTTPRequest(path, loadOptions) {\n    return http(path, loadOptions);\n}\n//# sourceMappingURL=data:application/json;base64,"],"names":["OCTET_STREAM_MIME_TYPE","JSON_TYPE","HTTPRequest","constructor","path","loadOptions","this","DEFAULT_METHOD","weightPathPrefix","weightUrlConverter","fetchFunc","fetch","platform","length","Array","isArray","requestInit","body","Error","save","modelArtifacts","modelTopology","ArrayBuffer","init","Object","assign","method","FormData","weightsManifest","paths","weights","weightSpecs","modelTopologyAndWeightManifest","append","Blob","JSON","stringify","type","weightData","weightBuffer","join","response","ok","modelArtifactsInfo","responses","status","loadModelJSON","modelConfigRequest","modelJSON","json","e","message","endsWith","load","streamWeights","loadStream","loadWeights","fetchURLs","getWeightUrls","stream","getWeightStream","weightPath","prefix","suffix","parseUrl","pathPrefix","urlPromises","weightsGroup","push","Promise","all","buffers","url","lastSlash","lastIndexOf","lastSearchParam","substring","isHTTPScheme","match","URL_SCHEME_REGEX","httpRouter","isHTTP","every","urlItem","http","registerSaveRouter","registerLoadRouter"],"sourceRoot":""}