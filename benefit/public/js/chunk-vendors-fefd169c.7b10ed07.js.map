{"version":3,"file":"js/chunk-vendors-fefd169c.7b10ed07.js","mappings":";;;;;;;;;;;;;;;;GAiBO,MAAMA,EACT,WAAAC,CAAYC,EAAQC,GAChBC,KAAKC,cAAgB,CAAC,IAAK,WAC3BD,KAAKD,YAAcA,EACnBC,KAAKE,KAAOH,EAAYI,OACxB,MAAMC,GAAQ,QAAkBJ,KAAKE,MAC/BG,EAAeC,EAAgBR,EAAQ,GAC7CE,KAAKO,SAAW,kCAEdH,2IAE0CN,EAAO,uDACvBO,qBAGhC,EAGJ,SAASC,EAAgBR,EAAQU,GAC7B,MAAMC,EAAgB,CAAC,UAAW,UAAW,UAAW,WAClDJ,EAAe,GACrB,IAAK,IAAIK,EAAI,EAAGA,EAAIZ,EAAOK,OAAQO,IACrB,IAANA,EACAL,EAAaM,KAAK,SAGlBN,EAAaM,KAAK,GAAGF,EAAcC,MAG3C,OAAOL,EAAaO,MACxB,C,uEC9CO,MAAMC,EACT,WAAAhB,CAAYiB,EAAUC,EAASC,EAAOC,GAClCjB,KAAKc,SAAWA,EAChBd,KAAKe,QAAUA,EACff,KAAKiB,YAAcA,EACnBjB,KAAKC,cAAgB,CAAC,IAAK,WAC3BD,KAAKD,YAAciB,EACnB,MAAMZ,GAAQ,QAAkBY,EAAMb,QACtC,IAAIe,EAAW,mBAEf,IAAK,IAAIC,EAAI,EAAGA,EAAInB,KAAKc,SAAUK,IAC/BD,GAAY,mDACwBC,oHAEMnB,KAAKiB,YAAYE,0CACnCnB,KAAKe,QAAQI,MAEzCnB,KAAKO,SAAW,uCAEZH,sHAIAc,mGAKR,E;;;;;;;;;;;;;;;;GCZG,SAASE,IACZ,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAuFJ,OAtFyC,KAArC,WAAMC,UAAU,kBAChBV,EAAU,kBACVC,EAAY,KACZC,EAAY,MACZC,EAAY,KACZC,EAAY,UACZC,EAAS,cACTC,EAAe,wBAafC,GAAmB,WAAMI,QAAQ,uBAAyB,8XAatD,GAGJH,EAAmB,GACnBC,EAAc,4OAYdT,EAAU,GACVC,EAAY,YACZC,EAAY,UACZC,EAAY,UACZC,EAAY,YACZC,EAAS,eACTC,EAAe,GAEfC,EAAmB,0SASnBC,EAAmB,iNAUnBC,EAAc,yLAUX,CACHT,UACAC,YACAC,YACAC,YACAC,YACAC,SACAC,eACAC,mBACAC,mBACAC,cAER,C;;;;;;;;;;;;;;;;;ACzGO,MAAMG,EACT,WAAApC,CAAYqC,GACRlC,KAAKmC,cAAgB,KACrBnC,KAAKoC,QAAU,KACfpC,KAAKqC,UAAW,EAChBrC,KAAKsC,YAAc,GACnB,MAAMC,GAAY,WAAMR,UAAU,iBASlC,GARU,MAANG,GACAlC,KAAKkC,GAAKA,GACV,QAAgBK,EAAWL,IAG3BlC,KAAKkC,IAAK,QAAgBK,GAE9BL,EAAKlC,KAAKkC,GAC+B,KAArC,WAAMH,UAAU,iBAAwB,CACxC,MAAMS,EAAMN,EACZlC,KAAKyC,kBAAoB,IACd,KAAwBD,GAAK,IAAMA,EAAIC,sBAElDzC,KAAK0C,gBAAmBC,GACb,KAAwBH,GAAK,IAAMA,EAAIE,gBAAgBC,KAElE3C,KAAK4C,kBAAqBD,GACf,KAAwBH,GAAK,IAAMA,EAAII,kBAAkBD,KAEpE3C,KAAK6C,eAAiB,IACX,KAAwBL,GAAK,IAAMA,EAAIM,aAAaN,EAAIO,uBAEvE,MACK,GAAU,MAANb,EAAY,CACjB,MAAMc,EAAMd,EAAGe,aAAa,2BAC5B,GAAW,MAAPD,EACA,MAAM,IAAIE,MAAM,6EAGpBlD,KAAKyC,kBAAoB,IACd,KAAwBP,GAAI,IAAMc,EAAIG,yBAEjDnD,KAAK0C,gBAAmBC,GACb,KAAwBT,GAAI,IAAMc,EAAII,mBAAmBT,KAEpE3C,KAAK4C,kBAAqBD,GACf,KAAwBT,GAAI,IAAMc,EAAIK,qBAAqBV,KAEtE3C,KAAK6C,eAAiB,IACX,KAAwBX,GAAI,IAAMA,EAAGY,aAAaE,EAAIM,2BAErE,CAEA,IAAIC,EAAqB,2BACzB,MAAMC,EAA0B,8BAGhC,GAFAxD,KAAKyD,6BACDzD,KAAKkC,GAAGe,aAAa,+BACgB,KAArC,WAAMlB,UAAU,iBAAwB,CACxC,MAAM2B,EAAgB,oBAChBC,EAAqB,yBAG3B,GAFA3D,KAAK4D,sBACD,KAA+B5D,KAAKkC,GAAIwB,GACxC,KAAwB1D,KAAKkC,GAAIyB,GACjC3D,KAAK6D,0BACD,KAA+B7D,KAAKkC,GAAIyB,QAE3C,IAAI,WAAMG,IAAI,4BACf,MAAM,IAAIZ,MAAM,sHAIpB,GADAlD,KAAK+D,0BAA4B/D,KAAKkC,GAAGe,aAAaM,GAClD,KAAwBvD,KAAKkC,GAAIsB,GACjCxD,KAAKgE,8BACD,KAA+BhE,KAAKkC,GAAIsB,QAE3C,IAAI,WAAMM,IAAI,4BACf,MAAM,IAAIZ,MAAM,8HAGxB,MAGI,GADAK,EAAqB,yBACjB,KAAwBvD,KAAKkC,GAAIqB,GACjCvD,KAAK+D,0BACD/D,KAAKkC,GAAGe,aAAaM,OAExB,KAAI,KAAwBvD,KAAKkC,GAAIsB,GAKtC,MAAM,IAAIN,MAAM,uDAJhBlD,KAAKgE,8BACDhE,KAAKkC,GAAGe,aAAaO,EAI7B,CAEJxD,KAAKiE,aAAe,KAA8BjE,KAAKkC,IACvDlC,KAAKkE,YAAc,KAA6BlE,KAAKkC,IACrDlC,KAAKmE,YAAc,KAA6BnE,KAAKkC,IACrDlC,KAAKoE,cACD,KAA0BpE,KAAKkC,GAAIlC,KAAK6D,0BAChD,CACA,SAAIQ,GACA,OAAO,WAAMrC,QAAQ,QACzB,CACA,OAAAsC,GACI,GAAItE,KAAKqC,SACL,OAEgB,MAAhBrC,KAAKoC,SACLmC,QAAQC,KAAK,wKAIS,MAAtBxE,KAAKmC,eACLoC,QAAQC,KAAK,sMAKjB,MAAMtC,EAAKlC,KAAKkC,GAChB,KAAwBA,GAAI,IAAMA,EAAGuC,WACrC,KAAwBvC,GAAI,IAAMA,EAAGwC,gBAAgBxC,EAAGyC,YAAa,QACrE,KAAwBzC,GAAI,IAAMA,EAAG0C,kBAAkB5E,KAAKmE,eAC5D,KAAwBjC,GAAI,IAAMA,EAAG2C,WAAW3C,EAAG4C,aAAc,QACjE,KAAwB5C,GAAI,IAAMA,EAAG2C,WAAW3C,EAAG6C,qBAAsB,QACzE,KAAwB7C,GAAI,IAAMA,EAAG8C,aAAahF,KAAKkE,eACvDlE,KAAKqC,UAAW,CACpB,CACA,0BAAA4C,CAA2BC,EAAMC,GAE7B,OADAnF,KAAKoF,kBACE,KAAsCpF,KAAKkC,GAAIgD,EAAMC,EAASnF,KAAKoE,cAC9E,CACA,0BAAAiB,CAA2BH,EAAMC,GAE7B,OADAnF,KAAKoF,kBACE,KAAsCpF,KAAKkC,GAAIgD,EAAMC,EAASnF,KAAKoE,cAC9E,CACA,gCAAAkB,CAAiCJ,EAAMC,GAEnC,OADAnF,KAAKoF,kBACE,KAA4CpF,KAAKkC,GAAIgD,EAAMC,EAASnF,KAAKoE,cACpF,CACA,wBAAAmB,CAAyBC,EAASC,GAC9BzF,KAAKoF,kBACL,KAAoCpF,KAAKkC,GAAIsD,EAASC,EAC1D,CACA,0BAAAC,CAA2BF,EAASG,EAAOC,EAAQC,GAC/C7F,KAAKoF,kBACL,KAAsCpF,KAAKkC,GAAIsD,EAASG,EAAOC,EAAQC,EAAM7F,KAAKoE,cACtF,CACA,gCAAA0B,CAAiCZ,EAAMC,GAEnC,OADAnF,KAAKoF,kBACE,KAA4CpF,KAAKkC,GAAIgD,EAAMC,EAASnF,KAAKoE,cACpF,CACA,yBAAA2B,CAA0Bb,EAAMC,GAE5B,OADAnF,KAAKoF,kBACE,KAAqCpF,KAAKkC,GAAIgD,EAAMC,EAASnF,KAAKoE,cAC7E,CACA,mBAAA4B,CAAoBR,GAChBxF,KAAKoF,kBACDpF,KAAKmC,gBAAkBqD,IACvB,KAA6CxF,KAAKkC,GAAIlC,KAAKmE,aAC3DnE,KAAKmC,cAAgB,MAEzB,KAAwBnC,KAAKkC,IAAI,IAAMlC,KAAKkC,GAAG+D,cAAcT,IACjE,CACA,+CAAAU,CAAgDV,EAASN,EAAMC,GAC3D,OAAOnF,KAAKmG,qBAAqBX,GAAS,IAAM,KAA2DxF,KAAKkC,GAAIgD,EAAMC,EAASnF,KAAKoE,gBAC5I,CACA,8BAAAgC,CAA+BC,EAAQC,EAAOpB,EAAMC,EAASoB,EAAcC,GACvE,OAAO,KAA0CxG,KAAKkC,GAAImE,EAAQC,EAAOpB,EAAMC,EAASoB,EAAcC,EAAcxG,KAAKoE,cAC7H,CACA,+BAAAqC,CAAgCJ,EAAQK,GACpC,OAAO,KAA2C1G,KAAKkC,GAAImE,EAAQK,EACvE,CACA,uBAAAC,CAAwBnB,EAASN,EAAMC,GACnCnF,KAAK4G,yBAAyBpB,GAC9B,MAAMqB,EAAS,KAAyC7G,KAAKkC,GAAIgD,EAAMC,EAASnF,KAAKoE,eAErF,OADApE,KAAK8G,6BACED,CACX,CACA,qBAAAE,GACI,MAAMC,EAAehH,KAAKiH,YAAYjH,KAAKkC,IAC3C,OAAOlC,KAAKkH,UAAUF,EAC1B,CACA,WAAAC,CAAY/E,GACR,IAAIiF,EACAC,EACJ,IAAI,WAAMpF,QAAQ,2BAA4B,CAC1C,MAAMQ,EAAMN,EACNmF,EAAO7E,EAAI8E,UAAU9E,EAAI+E,2BAA4B,GAC3DrF,EAAGsF,QACHJ,EAAgB,KACZ,MAAMK,EAASjF,EAAIkF,eAAeL,EAAM,EAAG,GAC3C,OAAOI,IAAWjF,EAAImF,kBAClBF,IAAWjF,EAAIoF,mBAAmB,EAE1CT,EAAQE,CACZ,MACS,WAAMtF,UAAU,gDAAkD,GACvEoF,EAAQnH,KAAK6H,aACb7H,KAAK8H,WACLV,EAAgB,IAAMpH,KAAK+H,iBAAiBZ,GAAO,WAAMpF,UAAU,kDAOnEqF,EAAgB,KAAM,EAE1B,MAAO,CAAED,QAAOC,gBACpB,CACA,+BAAAY,CAAgCxC,EAASe,EAAcC,GACnD,OAAOxG,KAAKmG,qBAAqBX,GAAS,IAAM,KAAiDxF,KAAKkC,GAAIqE,EAAcC,IAC5H,CACA,aAAAyB,CAAcC,GACVlI,KAAKoF,kBACL,MAAMlD,EAAKlC,KAAKkC,GACS,MAArBlC,KAAKmI,eACLnI,KAAKmI,aAAe,KAA8BjG,IAEtD,MAAME,EAAU,KAAyBF,GACzC,KAAwBA,GAAI,IAAMA,EAAGkG,aAAahG,EAASpC,KAAKmI,gBAChE,KAAwBjG,GAAI,IAAMA,EAAGkG,aAAahG,EAAS8F,KAC3D,KAAuBhG,EAAIE,GAC3B,MAAMiG,EAAWC,OAAOC,OAAOnG,EAAS,CAAEO,IAAK3C,KAAKyC,sBAIpD,OAHIzC,KAAKqE,OACL,KAA2BnC,EAAImG,GAE5BA,CACX,CACA,QAAAG,CAASpG,GACLpC,KAAKyI,WAAWrG,GAChBpC,KAAK0C,gBAAgBN,EAAQO,KAC7B,MAAMT,EAAKlC,KAAKkC,GAGhB,KAAwBA,GAAI,IAAMA,EAAG2C,WAAW3C,EAAG6C,qBAAsB/E,KAAKkE,eAC9E,IAA6ChC,EAAIE,EAASpC,KAAKiE,aACnE,CACA,aAAAyE,CAActG,GACVpC,KAAKoF,kBACDhD,IAAYpC,KAAKoC,UACjBpC,KAAKoC,QAAU,MAEJ,MAAXA,IACA,KAAwBpC,KAAKkC,IAAI,IAAMlC,KAAKkC,GAAGwG,cAActG,KAC7DpC,KAAK4C,kBAAkBR,EAAQO,KAEvC,CACA,UAAA8F,CAAWrG,GACPpC,KAAKoF,kBACLpF,KAAKoC,QAAUA,EACK,MAAhBpC,KAAKoC,SACDpC,KAAKqE,OACL,KAA2BrE,KAAKkC,GAAIlC,KAAKoC,SAGjD,KAAwBpC,KAAKkC,IAAI,IAAMlC,KAAKkC,GAAGyG,WAAWvG,IAC9D,CACA,kBAAAwG,CAAmBxG,EAASyG,EAAaC,GAAc,GAEnD,OADA9I,KAAKoF,kBACD0D,EACO,KAA4C9I,KAAKkC,GAAIE,EAASyG,GAG9D,KAAqC7I,KAAKkC,GAAIE,EAASyG,EAEtE,CACA,oBAAAE,CAAqB3G,EAASd,GAE1B,OADAtB,KAAKoF,kBACE,KAAwBpF,KAAKkC,IAAI,IAAMlC,KAAKkC,GAAG8G,kBAAkB5G,EAASd,IACrF,CACA,yBAAA2H,CAA0B7G,EAASyG,GAE/B,OADA7I,KAAKoF,kBACEpF,KAAKkC,GAAG0G,mBAAmBxG,EAASyG,EAC/C,CACA,qBAAAK,CAAsBC,EAAoBC,EAAiBC,GACvDrJ,KAAKoF,kBACLpF,KAAKsJ,mBACL,KAA8CtJ,KAAKkC,GAAIiH,EAAoBC,EAAiBC,EAChG,CACA,sBAAAE,CAAuBC,EAAqBtE,EAAMC,GAC9CnF,KAAKyJ,6BAA6BD,EAAqBrE,EAASD,EACpE,CACA,4BAAAwE,CAA6BC,EAA2BzE,EAAMC,GAC1DnF,KAAKoF,kBACL,MAAOO,EAAOC,GAAU,KAAgDV,EAAMC,GAC9EnF,KAAKyJ,6BAA6BE,EAA2BhE,EAAOC,EACxE,CACA,0BAAAgE,CAA2BC,EAAUC,EAASC,EAAaC,GACvDhK,KAAKiK,iCAAiCF,EAAaF,EAAUG,EAAYF,EAC7E,CACA,gCAAAI,CAAiCL,EAAUC,EAASC,EAAaC,GAC7D,MAAM,IAAI9G,MAAM,oDACpB,CACA,aAAAiH,GACwB,MAAhBnK,KAAKoC,SACL,KAA2BpC,KAAKkC,GAAIlC,KAAKoC,SAE7C,KAA+BpC,KAAKkC,GACxC,CACA,cAAAkI,GACIpK,KAAKoF,kBACLpF,KAAKsJ,mBACL,MAAMpH,EAAKlC,KAAKkC,GAChB,GAAIlC,KAAKqE,MAAO,CACZ,MAAMgG,EAAWrK,KAAK6C,iBACtB0B,QAAQ+F,OAAOD,IAAarK,KAAKoC,QAAQO,IAAK,sDAC9C3C,KAAKmK,eACT,CACA,KAAwBjI,GAAI,IAAMA,EAAGqI,aAAarI,EAAGsI,UAAW,EAAGtI,EAAGuI,eAAgB,IAC1F,CACA,8BAAAC,GACI1K,KAAKoF,kBACL,KAAwBpF,KAAKkC,IAAI,IAAMlC,KAAKkC,GAAGuC,UACnD,CACA,sBAAAkG,GAOI,OANwC,MAApC3K,KAAK4K,8BACL5K,KAAK4K,4BACD,KAA+B5K,KAAKkC,GAAwE,KAApE,WAAMH,UAAU,gDACpD,kCACA,6BAEL/B,KAAK4K,2BAChB,CACA,4BAAAC,GACI,OAAO7K,KAAK2K,wBAChB,CACA,4BAAAG,GACI,OAAO9K,KAAK2K,wBAChB,CACA,UAAA9C,GACI,GAAwE,KAApE,WAAM9F,UAAU,gDAAuD,CACvE,MAAMS,EAAMxC,KAAKkC,GACXc,EAAMhD,KAAK6K,+BACX1D,EAAQ3E,EAAIuI,cAElB,OADAvI,EAAIqF,WAAW7E,EAAIgI,iBAAkB7D,GAC9BA,CACX,CACA,MAAMnE,EAAMhD,KAAK8K,+BACX3D,EAAQnE,EAAIiI,iBAElB,OADAjI,EAAIkI,cAAclI,EAAIgI,iBAAkB7D,GACjCA,CACX,CACA,QAAAW,GACI,GAAwE,KAApE,WAAM/F,UAAU,gDAAuD,CACvE,MAAMS,EAAMxC,KAAKkC,GACXc,EAAMhD,KAAK6K,+BAEjB,YADArI,EAAIsF,SAAS9E,EAAIgI,iBAErB,CACA,MAAMhI,EAAMhD,KAAK8K,+BACjB9H,EAAImI,YAAYnI,EAAIgI,iBACxB,CACA,4BAAMI,CAAuBjE,GAKzB,aAJM,mBAAiB,IAAMnH,KAAKqC,UAG9BrC,KAAK+H,iBAAiBZ,GAAO,WAAMpF,UAAU,mDAC1C/B,KAAKqL,aAAalE,GAAO,WAAMpF,UAAU,gDACpD,CACA,YAAAsJ,CAAalE,EAAOmE,GAChB,GAA0B,IAAtBA,EACA,OAAO,KAEX,GAA0B,IAAtBA,EAAyB,CACzB,MAAM9I,EAAMxC,KAAKkC,GACXqJ,EAAmB/I,EAAIgJ,kBAAkBrE,EAAO3E,EAAIiJ,cAE1D,OAAOF,EAAmB,GAC9B,CACK,CACD,MAAMvI,EAAMhD,KAAK8K,+BACXS,EAAmBvI,EAAI0I,kBAAkBvE,EAAOnE,EAAI2I,kBAE1D,OAAOJ,EAAmB,GAC9B,CACJ,CACA,gBAAAxD,CAAiBZ,EAAOmE,GACpB,GAA0B,IAAtBA,EACA,OAAO,EAEX,GAA0B,IAAtBA,EAAyB,CACzB,MAAM9I,EAAMxC,KAAKkC,GACXc,EAAMhD,KAAK6K,+BACXe,EAAYpJ,EAAIgJ,kBAAkBrE,EAAO3E,EAAIqJ,wBAInD,OAHqB,MAAjB7L,KAAK8L,WACL9L,KAAK8L,SAAW9L,KAAKkC,GAAGY,aAAaE,EAAI+I,mBAEtCH,IAAc5L,KAAK8L,QAC9B,CACK,CACD,MAAM9I,EAAMhD,KAAK8K,+BACXc,EAAY5I,EAAI0I,kBAAkBvE,EAAOnE,EAAIgJ,4BAInD,OAHqB,MAAjBhM,KAAK8L,WACL9L,KAAK8L,SAAW9L,KAAKkC,GAAGY,aAAaE,EAAI+I,mBAEtCH,IAAc5L,KAAK8L,QAC9B,CACJ,CACA,SAAA5E,CAAUF,GACN,OAAO,IAAIiF,SAAQC,IACflM,KAAKmM,eAAc,IAAMnF,EAAaI,kBAAiB,IAAM8E,KAAU,GAE/E,CACA,SAAAE,GAEI,MAAMC,EAAQC,EAAqBtM,KAAKsC,YAAYiK,KAAIC,GAAKA,EAAEC,YAC/D,IAAK,IAAI/L,EAAI,EAAGA,GAAK2L,IAAS3L,EAAG,CAC7B,MAAM,UAAEgM,GAAc1M,KAAKsC,YAAY5B,GACvCgM,GACJ,CACA1M,KAAKsC,YAActC,KAAKsC,YAAYqK,MAAMN,EAAQ,EACtD,CACA,aAAAF,CAAcM,EAAUC,GAEpB,GADA1M,KAAKsC,YAAY3B,KAAK,CAAE8L,WAAUC,cAC9B1M,KAAKsC,YAAYnC,OAAS,EAE1B,OAGJ,IAAIyM,EACA,qBAAsB,WAAMC,WAC5BD,GAAa,WAAMC,SAASC,iBAAiBC,MAAK,WAAMF,WAE5D,mBAAiB,KACb7M,KAAKoM,YAE8B,IAA5BpM,KAAKsC,YAAYnC,UACzB,IAAM,GAAG,KAAMyM,EACtB,CACA,wBAAAhG,CAAyBpB,GACrBxF,KAAKoF,kBACL,KAAyCpF,KAAKkC,GAAIsD,EAASxF,KAAKmE,aAC5DnE,KAAKqE,OACL,KAA+BrE,KAAKkC,GAE5C,CACA,0BAAA4E,GAC8B,MAAtB9G,KAAKmC,eACL,KAAyCnC,KAAKkC,GAAIlC,KAAKmC,cAAenC,KAAKmE,aACvEnE,KAAKqE,OACL,KAA+BrE,KAAKkC,KAIxC,KAA6ClC,KAAKkC,GAAIlC,KAAKmE,YAEnE,CACA,oBAAAgC,CAAqBX,EAASwH,GAC1BhN,KAAK4G,yBAAyBpB,GAC9B,MAAMqB,EAASmG,IAEf,OADAhN,KAAK8G,6BACED,CACX,CACA,4BAAA4C,CAA6BwD,EAAgCtH,EAAOC,GAChE5F,KAAKoF,kBACL,MAAMlD,EAAKlC,KAAKkC,GAChB,KAAyCA,EAAI+K,EAAgCjN,KAAKmE,aAC9EnE,KAAKqE,OACL,KAA+BnC,GAEnClC,KAAKmC,cAAgB8K,EACrB,KAAwB/K,GAAI,IAAMA,EAAGgL,SAAS,EAAG,EAAGvH,EAAOC,KAC3D,KAAwB1D,GAAI,IAAMA,EAAGiL,QAAQ,EAAG,EAAGxH,EAAOC,IAC9D,CACA,gCAAAqE,CAAiCuC,EAAGY,EAAGzH,EAAOC,GAC1C5F,KAAKoF,kBACL,KAAwBpF,KAAKkC,IAAI,IAAMlC,KAAKkC,GAAGiL,QAAQX,EAAGY,EAAGzH,EAAOC,IACxE,CACA,eAAAR,GACI,GAAIpF,KAAKqC,SACL,MAAM,IAAIa,MAAM,0CAExB,CACA,gBAAAoG,GACI,GAAoB,MAAhBtJ,KAAKoC,QACL,MAAM,IAAIc,MAAM,mCAExB,EAQG,SAASoJ,EAAqBe,GACjC,IAAI3M,EAAI,EACR,KAAOA,EAAI2M,EAAIlN,SAAUO,EAAG,CACxB,MAAM4M,EAASD,EAAI3M,KACnB,IAAK4M,EACD,KAER,CACA,OAAO5M,EAAI,CACf,C;;;;;;;;;;;;;;;;;AC9eO,SAAS6M,EAAeC,EAAOpL,EAASqL,EAAQ/L,GACnD,MAAMgM,EAAaD,EAAOlB,KAAI,CAACoB,EAAOjN,KAClC,MAAMkN,EAAY,CACdC,aAAcF,EAAM3M,MACpB8M,SAAUH,EAAMI,UAAY,KAAOJ,EAAMK,QAAQF,SACjDC,UAAWJ,EAAMI,UACjBE,UAAUN,EAAMI,WAAoBJ,EAAMK,QAAQC,SAClDC,WAAY,MAMhB,OAJqB,MAAjBP,EAAMK,SAA0C,MAAvBL,EAAMK,QAAQrB,OACvCgB,EAAMK,QAAQrB,MAAMuB,WAAa,IACjCN,EAAUM,WAAaP,EAAMK,QAAQrB,MAAMuB,YAExC,CAAEC,KAAM/L,EAAQnC,cAAcS,GAAIkN,YAAW,IAElDQ,EAAeV,EAAWnB,KAAIC,GAAKA,EAAEoB,YACrCS,EAAe,CACjBR,aAAcnM,EAAOV,MACrB8M,SAAUpM,EAAOsM,QAAQF,SACzBC,WAAW,EACXE,SAAUvM,EAAOsM,QAAQC,SACzBC,WAAY,MAEVI,EAAS,KAA2BZ,EAAYW,EAAcjM,GAC9D8F,GAAiB,QAAqBsF,EAAMtL,GAAIoM,GAChDC,EAAef,EAAMvF,cAAcC,GACzC,OAAK,WAAMpE,IAAI,uBAUJ,CACH1B,UACA8F,iBACAoG,SACAC,eACAH,eACAC,eACAG,mBAAoB,KACpBC,uBAAwB,KACxBC,OAAQ,KACRC,OAAQ,KACRC,iBAAkB,KAClBC,wBAAyB,KACzBC,oBAAqB,OAtBzBtB,EAAMhF,SAAS+F,GACRjG,OAAOC,OAAO,CAAEnG,UACnB8F,iBACAoG,SACAC,eACAH,eACAC,gBAAgBU,EAAoBvB,EAAOpL,EAASmM,IAmBhE,CACO,SAASQ,EAAoBvB,EAAOpL,EAASmM,GAChD,MAAMC,EAAqB,GACrBC,EAAyB,GAC/B,IAAIG,EACAE,EACAD,EACAH,EAAS,KACTC,EAAS,KAEbA,EAASnB,EAAM5E,mBAAmB2F,EAAc,OAAO,GACd,KAArC,WAAMxM,UAAU,mBAChB2M,EAASlB,EAAM5E,mBAAmB2F,EAAc,YAAY,IAGhE,MAAMzF,GAAc,EACpB,IAAK,MAAMkG,KAAW5M,EAAQnC,cAAe,CACzC,MAAMgP,EAAU,CACZd,KAAMa,EACNE,QAAS1B,EAAM5E,mBAAmB2F,EAAcS,EAASlG,GACzDqG,OAAQ3B,EAAM5E,mBAAmB2F,EAAc,SAASS,IAAWlG,IAEnE1G,EAAQgN,sBACRH,EAAQjO,MAAQwM,EAAM5E,mBAAmB2F,EAAc,GAAGS,SAAgBlG,GAC1EmG,EAAQnB,SAAWN,EAAM5E,mBAAmB2F,EAAc,GAAGS,YAAmBlG,IAEpF0F,EAAmB7N,KAAKsO,EAC5B,CASA,GARI7M,EAAQgN,sBACRR,EACIpB,EAAM5E,mBAAmB2F,EAAc,WAAYzF,GACvD+F,EACIrB,EAAM5E,mBAAmB2F,EAAc,kBAAmBzF,GAC9DgG,EACItB,EAAM5E,mBAAmB2F,EAAc,cAAezF,IAE1D1G,EAAQiN,eACR,IAAK,MAAMC,KAAKlN,EAAQiN,eACpBZ,EAAuB9N,KAAK6M,EAAM5E,mBAAmB2F,EAAce,EAAEnB,KAAMrF,IAGnF,MAAO,CACH0F,qBACAC,yBACAC,SACAC,SACAC,mBACAC,0BACAC,sBAER,CACA,SAASS,EAAyBC,EAAY/B,GAC1C,GAAI+B,EAAWrP,SAAWsN,EAAOtN,OAC7B,MAAM+C,MAAM,4BAA4BsM,EAAWrP,wCAC1BsN,EAAOtN,iBAEpCqP,EAAWC,SAAQ,CAACC,EAAGhP,KACnB,MAAMiP,EAASD,EAAE7B,aACXF,EAAQF,EAAO/M,GACfkP,EAASjC,EAAM3M,MACrB,IAAK,kBAAiB2O,EAAQC,GAC1B,MAAM1M,MACF,2EAA4ByM,SAAcC,gBAGlD,GAAIF,EAAE3B,WAAaJ,EAAMI,UACrB,OAEJ,MAAM8B,EAAYH,EAAE5B,SACdgC,EAAYnC,EAAMI,UAAY,KAAOJ,EAAMK,QAAQF,SACzD,IAAK,kBAAiB+B,EAAWC,GAC7B,MAAM5M,MACF,kFAAwB2M,SAAiBC,eACjD,GAER,CACO,SAASC,EAAWvC,EAAOwC,EAAQvC,EAAQ/L,EAAQuO,GACjDD,EAAO5N,QAAQgN,sBAChBG,EAAyBS,EAAO5B,aAAcX,GAC9C8B,EAAyB,CAACS,EAAO3B,cAAe,CAAC3M,KAErD,MAAMwO,EAASxO,EAAOsM,QAAQxI,QACxB2K,EAAczO,EAAOsM,QAAQF,SAC/BpM,EAAOsM,QAAQC,SACfT,EAAM9D,6BAA6BwG,EAAO1K,QAAS2K,EAAY,GAAIA,EAAY,IAG/E3C,EAAMjE,uBAAuB2G,EAAO1K,QAAS2K,EAAY,GAAIA,EAAY,IAE7E3C,EAAM/E,WAAWuH,EAAOzB,cACxBf,EAAM9K,gBAAgBsN,EAAOzB,aAAa5L,KAED,KAArC,WAAMZ,UAAU,kBACM,OAAlBiO,EAAOtB,QACPlB,EAAMtL,GAAGkO,UAAUJ,EAAOtB,OAAQ2B,KAGpB,OAAlBL,EAAOrB,QACPnB,EAAMtL,GAAGkO,UAAUJ,EAAOrB,OAAQ2B,KAGtC,IAAK,IAAI5P,EAAI,EAAGA,EAAI+M,EAAOtN,SAAUO,EAAG,CACpC,MAAMiN,EAAQF,EAAO/M,IACbwO,QAASqB,EAAQpB,OAAQqB,EAAcxP,MAAOyP,EAAa3C,SAAU4C,GAAoBV,EAAOxB,mBAAmB9N,GAC3H,GAAI+P,EAAa,CACb,MAAM,aAAEE,GAAiB,KAAwCX,EAAO5N,QAAQwO,aAAcjD,EAAM3M,MAAO2M,EAAMK,QAAQF,UACzH,OAAQ6C,EAAaxQ,QACjB,KAAK,EACDqN,EAAMtL,GAAG2O,WAAWJ,EAAa,IAAIK,WAAWH,IAChD,MACJ,KAAK,EACDnD,EAAMtL,GAAG6O,WAAWN,EAAa,IAAIK,WAAWH,IAChD,MACJ,KAAK,EACDnD,EAAMtL,GAAG8O,WAAWP,EAAa,IAAIK,WAAWH,IAChD,MACJ,KAAK,EACDnD,EAAMtL,GAAG+O,WAAWR,EAAa,IAAIK,WAAWH,IAChD,MACJ,QACI,MAEZ,CAIA,GAHID,GACAlD,EAAMtL,GAAGgP,UAAUR,EAAgB/C,EAAMK,QAAQF,SAAS,GAAIH,EAAMK,QAAQF,SAAS,IAE3E,MAAVyC,EAIJ,GAAI5C,EAAMI,UAEN,GAAI,oBAAmBJ,EAAM3M,OAAS,EAClCwM,EAAMtL,GAAGkO,UAAUG,EAAQ5C,EAAMwD,cAAc,QAE9C,CACD,IAAIC,EAAOzD,EAAMwD,cACXC,aAAgBC,eAClBD,EAAO,IAAIC,aAAaD,IAE5B5D,EAAMtL,GAAGoP,WAAWf,EAAQa,EAChC,MAIuB,MAAvBzD,EAAMK,QAAQrB,OAAiC,MAAhB6D,GAC/BhD,EAAMtL,GAAGqP,UAAUf,EAAc7C,EAAMK,QAAQrB,MAAMuB,YAEzDV,EAAMtE,sBAAsByE,EAAMK,QAAQxI,QAAQA,QAAS+K,EAAQ7P,EACvE,CACA,MAAM8Q,EAAcxB,EAAOpB,iBAC3B,GAAI4C,EACA,OAAQ9P,EAAOV,MAAMb,QACjB,KAAK,EACDqN,EAAMtL,GAAG2O,WAAWW,EAAa,IAAIV,WAAWpP,EAAOV,QACvD,MACJ,KAAK,EACDwM,EAAMtL,GAAG6O,WAAWS,EAAa,IAAIV,WAAWpP,EAAOV,QACvD,MACJ,KAAK,EACDwM,EAAMtL,GAAG8O,WAAWQ,EAAa,IAAIV,WAAWpP,EAAOV,QACvD,MACJ,KAAK,EACDwM,EAAMtL,GAAG+O,WAAWO,EAAa,IAAIV,WAAWpP,EAAOV,QACvD,MACJ,QACI,MAGZ,GAAIgP,EAAOnB,wBAAyB,CAChC,MAAM9N,EAAU,qBAAoBW,EAAOV,OAC3C,OAAQU,EAAOV,MAAMb,QACjB,KAAK,EACDqN,EAAMtL,GAAG2O,WAAWb,EAAOnB,wBAAyB,IAAIiC,WAAW/P,IACnE,MACJ,KAAK,EACDyM,EAAMtL,GAAG6O,WAAWf,EAAOnB,wBAAyB,IAAIiC,WAAW/P,IACnE,MACJ,KAAK,EACDyM,EAAMtL,GAAG8O,WAAWhB,EAAOnB,wBAAyB,IAAIiC,WAAW/P,IACnE,MACJ,QACI,MAEZ,CAIA,GAHIiP,EAAOlB,qBACPtB,EAAMtL,GAAGgP,UAAUlB,EAAOlB,oBAAqBpN,EAAOsM,QAAQF,SAAS,GAAIpM,EAAOsM,QAAQF,SAAS,IAEnGkC,EAAO5N,QAAQiN,gBAAkBY,EACjC,IAAK,IAAIvP,EAAI,EAAGA,EAAIsP,EAAO5N,QAAQiN,eAAelP,SAAUO,EAAG,CAC3D,MAAM4O,EAAIU,EAAO5N,QAAQiN,eAAe3O,GAClC+Q,EAAYzB,EAAOvB,uBAAuB/N,GAC1CgR,EAAczB,EAAoBvP,GACxC,GAAe,UAAX4O,EAAEqC,KACFnE,EAAMtL,GAAGoP,WAAWG,EAAWC,QAE9B,GAAe,SAAXpC,EAAEqC,KACPnE,EAAMtL,GAAG0P,WAAWH,EAAWC,QAE9B,GAAe,SAAXpC,EAAEqC,KACPnE,EAAMtL,GAAG2P,WAAWJ,EAAWC,QAE9B,GAAe,SAAXpC,EAAEqC,KACPnE,EAAMtL,GAAG4P,WAAWL,EAAWC,QAE9B,GAAe,QAAXpC,EAAEqC,KACPnE,EAAMtL,GAAG2O,WAAWY,EAAWC,QAE9B,GAAe,UAAXpC,EAAEqC,KACPnE,EAAMtL,GAAG6O,WAAWU,EAAWC,QAE9B,GAAe,UAAXpC,EAAEqC,KACPnE,EAAMtL,GAAG8O,WAAWS,EAAWC,OAE9B,IAAe,UAAXpC,EAAEqC,KAIP,MAAMzO,MAAM,gBAAgBoM,EAAEqC,8BAH9BnE,EAAMtL,GAAG+O,WAAWQ,EAAWC,EAInC,CACJ,CAEJlE,EAAMpD,gBACV,CACO,SAAS2H,EAAc3P,EAASqL,EAAQ/L,GAC3C,IAAIsQ,EAAY,GAChBvE,EAAOwE,OAAOvQ,GAAQ+N,SAAQjD,IAC1B,MAAM0F,EAAyB,MAAb1F,EAAEwB,SAAsC,MAAnBxB,EAAEwB,QAAQrB,OAC7CH,EAAEwB,QAAQrB,MAAMuB,WAAa,EAEjC,GAAI9L,EAAQgN,sBAAwB5C,EAAEuB,UAAW,CAC7C,MAAMoE,EAAY3F,EAAEwB,QAAQF,UACtB,gBAAEsE,EAAe,aAAEzB,EAAY,SAAE0B,GAAa,KAAwCjQ,EAAQwO,aAAcpE,EAAExL,MAAOmR,GAC3H,IAAIG,EAAQ,GAAIC,EAAQ,GAAIC,EAAS,GACrC,GAA4B,IAAxB7B,EAAaxQ,QAAgBiC,EAAQwO,aAAc,CACnD,MAAM6B,EAAiB,CAACC,KAAKC,KAAKR,EAAU,GAAK,GAAIO,KAAKC,KAAKR,EAAU,GAAK,IAC9EG,EAAQ,GAAGG,EAAe,GAAK,KAAKA,EAAe,GAAK,GAC5D,MACK,GAA4B,IAAxB9B,EAAaxQ,QAAiBiC,EAAQwO,cAG1C,GAAID,EAAaxQ,OAAS,IAAMiC,EAAQwO,aAAc,CACvD,MAAM7P,EAAU,qBAAoB4P,GACpC6B,EAAS,GAAGzR,EAAQ,KAAOoR,EAAU,MAAMpR,EAAQA,EAAQZ,OAAS,KAAOgS,EAAU,IACzF,OALII,EAAQ,GAAG5B,EAAa,GAAK,KAAKA,EAAa,GAAK,IAMxD,MAAMiC,EAAQpG,EAAExL,MAAMb,OAChB0S,EAAqD,IAAxBlC,EAAaxQ,QAAgB,kBAAiBqM,EAAExL,MAAOmR,GACpFW,EAA2C,IAAhC,oBAAmBtG,EAAExL,OAChC+R,EAAgB,uBAA8BvG,EAAExL,MAAOU,EAAOV,OAC9DgS,GAAwB5Q,EAAQwO,cAClCgC,IAAUlR,EAAOV,MAAMb,QACvB,kBAAiBgS,EAAWzQ,EAAOsM,QAAQF,UACzCmF,EAA2B7Q,EAAQwO,cAAgBD,EAAaxQ,OAAS,EAC3E,GACA,GAAGgS,EAAU,GAAK,KAAKA,EAAU,GAAK,IAmB1CH,GAAa,GAAGY,KAASI,KAAwBZ,EAAkBC,EAAW,MAAM1B,EAAaxQ,UAAU2S,KAAYC,KAAiBF,KAA8BP,KAASC,KAASC,KAAUS,KAA4Bf,GAClO,KACK,CACD,MAAMpE,EAAWtB,EAAEuB,UAAY,UAAYvB,EAAEwB,QAAQF,SACrDkE,GAAa,GAAGxF,EAAExL,SAAS8M,KAAYoE,GAC3C,KAEJ,MAAMgB,EAAc9Q,EAAQ7B,SAC5B,IAAI4S,EAAM/Q,EAAQvC,YAAYsO,KAI9B,OAFAgF,GAAO,IAAMnB,EAAY,IAAMkB,EAC3B,IAAG,WAAMnR,UAAU,mBAChBoR,CACX,CACO,SAASC,EAAiBlT,GAE7B,OAAO,WAAM8B,QAAQ,8BAAgC9B,GAAQ,CACjE,C;;;;;;;;;;;;;;;;;ACrVO,SAASmT,EAAmBnR,GAC/B,MAAMoR,GAAO,SACPC,EAAqB,GAAGD,EAAKjS,4CAEjCiS,EAAKhS,qCACLgS,EAAKhS,2BACLgS,EAAK/R,yHAMP,OAAO,KAA8BW,EAAIqR,EAC7C,CACO,SAASC,EAAmBtR,GAE/B,MAAMuR,EAAc,IAAIpC,aAAa,EAAE,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,IACnG,OAAO,KAAoCnP,EAAIuR,EACnD,CACO,SAASC,EAAkBxR,GAE9B,MAAMyR,EAAwB,IAAIC,YAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAC9D,OAAO,KAAmC1R,EAAIyR,EAClD,CACA,SAASE,EAA0B3R,EAAIyD,EAAOC,EAAQkO,EAAgBC,EAAeC,GACjF,KAA+BrO,EAAOC,GACtC,MAAMJ,EAAU,KAAyBtD,GACnC+R,EAAQ/R,EAAGgS,WAcjB,OAbA,KAAwBhS,GAAI,IAAMA,EAAGiS,YAAYF,EAAOzO,KACxD,KAAwBtD,GAAI,IAAMA,EAAGkS,cAAcH,EAAO/R,EAAGmS,eAAgBnS,EAAGoS,iBAChF,KAAwBpS,GAAI,IAAMA,EAAGkS,cAAcH,EAAO/R,EAAGqS,eAAgBrS,EAAGoS,iBAChF,KAAwBpS,GAAI,IAAMA,EAAGkS,cAAcH,EAAO/R,EAAGsS,mBAAoBtS,EAAGuS,WACpF,KAAwBvS,GAAI,IAAMA,EAAGkS,cAAcH,EAAO/R,EAAGwS,mBAAoBxS,EAAGuS,WAC3C,KAArC,WAAM1S,UAAU,iBAChB,KAAwBG,GAAI,IAAMA,EAAGyS,WAAWV,EAAO,EAAGH,EAAgBnO,EAAOC,EAAQ,EAAGmO,EAAeC,EAAa,QAGxH,KAAwB9R,GAAI,IAAMA,EAC7B0S,aAAaX,EAAO,EAAGH,EAAgBnO,EAAOC,KAEvD,KAAwB1D,GAAI,IAAMA,EAAGiS,YAAYjS,EAAGgS,WAAY,QACzD,CAAE1O,UAASsI,SAAU,CAAClI,EAAQD,GACzC,CACO,SAASkP,EAAyCzQ,GACrD,OAAOA,EAAc0Q,mBACzB,CACO,SAAS7P,EAA2B/C,EAAIgD,EAAMC,EAASf,GAC1D,MAAOuB,EAAOC,GAAU,KAAkDV,EAAMC,GAChF,OAAO0O,EAA0B3R,EAAIyD,EAAOC,EAAQiP,EAAyCzQ,GAAgBA,EAAc2Q,mBAAoB7S,EAAG8S,MACtJ,CACO,SAASC,EAAyC7Q,GACrD,OAAOA,EAAc8Q,uBACzB,CACO,SAAS7P,EAA2BnD,EAAIgD,EAAMC,EAASf,GAC1D,MAAOuB,EAAOC,GAAU,KAAkDV,EAAMC,GAChF,OAAO0O,EAA0B3R,EAAIyD,EAAOC,EAAQqP,EAAyC7Q,GAAgBA,EAAc2Q,mBAAoB3Q,EAAc+Q,qBACjK,CACO,SAASC,EAA+ChR,GAC3D,OAAOA,EAAciR,qBACzB,CACO,SAAS/P,EAAiCpD,EAAIgD,EAAMC,EAASf,GAChE,MAAOuB,EAAOC,GAAU,KAAkDV,EAAMC,GAChF,OAAO0O,EAA0B3R,EAAIyD,EAAOC,EAAQwP,EAA+ChR,GAAgBlC,EAAGoT,KAAMpT,EAAGqT,cACnI,CACO,SAASC,EAAwCpR,GACpD,OAAOA,EAAcqR,yBACzB,CACO,SAAS1P,EAA0B7D,EAAIgD,EAAMC,EAASf,GACzD,MAAOuB,EAAOC,GAAU,KAAgDV,EAAMC,GAC9E,OAAO0O,EAA0B3R,EAAIyD,EAAOC,EAAQ4P,EAAwCpR,GAAgBlC,EAAGoT,KAAMpT,EAAG8S,MAC5H,CACO,SAASU,EAA+CtR,GAC3D,OAAOA,EAAcuR,6BACzB,CACO,SAAS7P,EAAiC5D,EAAIgD,EAAMC,EAASf,GAChE,MAAOuB,EAAOC,GAAU,KAAgDV,EAAMC,GAC9E,OAAO0O,EAA0B3R,EAAIyD,EAAOC,EAAQ8P,EAA+CtR,GAAgBlC,EAAGoT,KAAMlR,EAAc+Q,qBAC9I,CACO,SAASS,EAAkC1T,EAAIE,EAAS6B,GAC3D,MAAM4R,EAAY,EACZC,EAAW,GACXC,EAAS,GACf,KAAwB7T,GAAI,IAAMA,EAAG2C,WAAW3C,EAAG4C,aAAcb,KACjE,MAAM+R,EAAU,KAA8C9T,EAAIE,EAAS,eAAgB6B,EAAc,EAAG8R,EAAQF,GACpH,OAAOG,GACH,KAA8C9T,EAAIE,EAAS,KAAM6B,EAAc,EAAG8R,EAAQD,EAClG,CACO,SAASpQ,EAA2BxD,EAAIsD,EAASG,EAAOC,EAAQC,EAAMzB,GAEzE,IAAI6R,EAAeC,EAAepC,EADlC,KAAwB5R,GAAI,IAAMA,EAAGiS,YAAYjS,EAAGgS,WAAY1O,KAE5DK,aAAgBsQ,YAChBF,EAAgB,IAAIE,WAAWxQ,EAAQC,EAAS,GAChDsQ,EAAgBhU,EAAGqT,cACnBzB,EAAiB5R,EAAGoT,OAGpBW,EAAgB,IAAI5E,aAAa1L,EAAQC,EAAS,GAClDsQ,EAAgBhU,EAAG8S,MACnBlB,EAAiB1P,EAAcqR,2BAEnCQ,EAAcG,IAAIvQ,GACuB,KAArC,WAAM9D,UAAU,iBAChB,KAAwBG,GAAI,IAAMA,EAAGmU,cAAcnU,EAAGgS,WAAY,EAAG,EAAG,EAAGvO,EAAOC,EAAQ1D,EAAGoT,KAAMY,EAAeD,KAGlH,KAAwB/T,GAAI,IAAMA,EAAGyS,WAAWzS,EAAGgS,WAAY,EAAGJ,EAAgBnO,EAAOC,EAAQ,EAAG1D,EAAGoT,KAAMY,EAAeD,KAEhI,KAAwB/T,GAAI,IAAMA,EAAGiS,YAAYjS,EAAGgS,WAAY,OACpE,CACO,SAAS3O,EAAyBrD,EAAIsD,EAASC,GAClD,KAAwBvD,GAAI,IAAMA,EAAGiS,YAAYjS,EAAGgS,WAAY1O,KAC5DC,EAAOI,gBAAgBsQ,WACkB,KAArC,WAAMpU,UAAU,iBAChB,KAAwBG,GAAI,IAAMA,EAAGmU,cAAcnU,EAAGgS,WAAY,EAAG,EAAG,EAAGzO,EAAOE,MAAOF,EAAOG,OAAQ1D,EAAGoT,KAAMpT,EAAGqT,cAAe9P,EAAOI,QAG1I,KAAwB3D,GAAI,IAAMA,EAAGyS,WAAWzS,EAAGgS,WAAY,EAAGhS,EAAGoT,KAAM7P,EAAOE,MAAOF,EAAOG,OAAQ,EAAG1D,EAAGoT,KAAMpT,EAAGqT,cAAe9P,EAAOI,QAIxG,KAArC,WAAM9D,UAAU,iBAChB,KAAwBG,GAAI,IAAMA,EAAGmU,cAAcnU,EAAGgS,WAAY,EAAG,EAAG,EAAGhS,EAAGoT,KAAMpT,EAAGqT,cAAe9P,KAGtG,KAAwBvD,GAAI,IAAMA,EAAGyS,WAAWzS,EAAGgS,WAAY,EAAGhS,EAAGoT,KAAMpT,EAAGoT,KAAMpT,EAAGqT,cAAe9P,KAG9G,KAAwBvD,GAAI,IAAMA,EAAGiS,YAAYjS,EAAGgS,WAAY,OACpE,CACO,SAASoC,EAA8B9T,EAAK0C,EAAMC,EAASf,GAE9D,MAAMiC,EAAS7D,EAAI+T,eACnB,KAAwB/T,GAAK,IAAMA,EAAIqC,WAAWrC,EAAIgU,kBAAmBnQ,KAEzE,MAAMoQ,EAAgB,EAChBC,EAAiB,EACjBC,EAAkBF,EAAgBC,EAAiBxR,EAAOC,EAMhE,OALA,KAAwB3C,GAAK,IAAMA,EAAIoU,WAAWpU,EAAIgU,kBAAmBG,EAAiBnU,EAAIqU,eAG9F,KAAwBrU,GAAK,IAAMA,EAAIsU,WAAW,EAAG,EAAG3R,EAASD,EAAM1C,EAAI8S,KAAM9S,EAAIwS,MAAO,KAC5F,KAAwBxS,GAAK,IAAMA,EAAIqC,WAAWrC,EAAIgU,kBAAmB,QAClEnQ,CACX,CACO,SAASI,EAAgCvE,EAAImE,EAAQK,GACxD,MAAMlE,EAAMN,EACN6U,EAAiB,IAAI1F,aAAa3K,GAIxC,OAHAlE,EAAIqC,WAAWrC,EAAIgU,kBAAmBnQ,GACtC7D,EAAIwU,iBAAiBxU,EAAIgU,kBAAmB,EAAGO,GAC/CvU,EAAIqC,WAAWrC,EAAIgU,kBAAmB,MAC/BO,CACX,CACO,SAAS7Q,EAAgDhE,EAAIgD,EAAMC,EAASf,GAC/E,MAAO6S,EAAGC,GAAK,KAAkDhS,EAAMC,GACjEgS,EAAc,EACdJ,EAAiB,IAAIZ,WAAW,KAA4CjR,EAAOC,EAASgS,IAIlG,OAHA,KAAwBjV,GAAI,IAAMA,EAAG4U,WAAW,EAAG,EAAGG,EAAGC,EAAG9S,EAAciR,sBAAuBnT,EAAGqT,cAAewB,KAG5G,IAAI1F,aAAa0F,EAAe1Q,OAC3C,CACO,SAASD,EAA+BlE,EAAImE,EAAQC,EAAOpB,EAAMkS,EAAM7Q,EAAcC,EAAcpC,GACtG,MAAM5B,EAAMN,EACN6U,EAAiB,IAAI1F,aAAa,KAA+C9K,EAAcC,IAIrG,OAHAhE,EAAIqC,WAAWrC,EAAIgU,kBAAmBnQ,GACtC7D,EAAIwU,iBAAiBxU,EAAIgU,kBAAmB,EAAGO,GAC/CvU,EAAIqC,WAAWrC,EAAIgU,kBAAmB,MAC/BO,CACX,CACO,SAASM,EAAsCnV,EAAIqE,EAAcC,GACpE,MAAM8Q,EAAa,IAAIjG,aAAa9K,EAAeC,EAAe,GAElE,OADA,KAAwBtE,GAAI,IAAMA,EAAG4U,WAAW,EAAG,EAAGtQ,EAAcD,EAAcrE,EAAGoT,KAAMpT,EAAG8S,MAAOsC,KAC9FA,CACX,C;;;;;;;;;;;;;;;;;AC/KO,MAAMC,EACT,WAAA1X,CAAYE,EAAayX,GACrBxX,KAAKC,cAAgB,CAAC,KACtBD,KAAK4Q,cAAe,EACpB5Q,KAAKyX,cAAe,EACpBzX,KAAKqP,eAAiB,CAClB,CAAElB,KAAM,aAAcwD,KAAM,SAC5B,CAAExD,KAAM,MAAOwD,KAAM,SACrB,CAAExD,KAAM,SAAUwD,KAAM,SACxB,CAAExD,KAAM,WAAYwD,KAAM,SAC1B,CAAExD,KAAM,aAAcwD,KAAM,OAC5B,CAAExD,KAAM,mBAAoBwD,KAAM,OAClC,CAAExD,KAAM,WAAYwD,KAAM,QAE9B3R,KAAKD,YAAcA,EACnBC,KAAKoP,qBAAsB,QAAiBpP,KAAKD,YAAYI,QAC7D,MAAM,WAAEuX,GAAeF,EACjBlE,GAAO,SACPqE,EAAgC,iBAAfD,EACjBE,EAASD,EAAiB,EAAI,EAC9BE,EAASF,EAAiB,EAAI,EAC9BG,EAAwB9X,KAAKoP,oBAC/B,sDACA,mBAAmBrP,EAAY,eAAeA,EAAY,QAC9D,IAAIgY,EAAW,GACf,IAAK,IAAIC,EAAM,EAAGA,GAAO,EAAGA,IACxB,IAAK,IAAIC,EAAM,EAAGA,GAAO,EAAGA,IACxBF,GAAY,mCACIE,8BACPD,mBAEbF,mLAIqBF,gaAQEC,0FAIbF,+EAEW,EAANK,EAAUC,+NAKJ,EAAND,EAAUC,uMAU7BjY,KAAKO,SAAW,oMASdwX,gBAEAzE,EAAK5R,iCAGX,E","sources":["webpack://benefit/./node_modules/@tensorflow/tfjs-backend-webgl/dist/gather_gpu.js","webpack://benefit/./node_modules/@tensorflow/tfjs-backend-webgl/dist/gather_nd_gpu.js","webpack://benefit/./node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js","webpack://benefit/./node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_context.js","webpack://benefit/./node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_math.js","webpack://benefit/./node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_util.js","webpack://benefit/./node_modules/@tensorflow/tfjs-backend-webgl/dist/im2col_packed_gpu.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class GatherProgram {\n    constructor(aShape, outputShape) {\n        this.variableNames = ['A', 'indices'];\n        this.outputShape = outputShape;\n        this.rank = outputShape.length;\n        const dtype = getCoordsDataType(this.rank);\n        const sourceCoords = getSourceCoords(aShape, 2);\n        this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${aShape[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${sourceCoords}));\n      }\n    `;\n    }\n}\n// The input and output are always flattened into rank 4 tensors.\nfunction getSourceCoords(aShape, axis) {\n    const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n    const sourceCoords = [];\n    for (let i = 0; i < aShape.length; i++) {\n        if (i === 2) {\n            sourceCoords.push('index');\n        }\n        else {\n            sourceCoords.push(`${currentCoords[i]}`);\n        }\n    }\n    return sourceCoords.join();\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2F0aGVyX2dwdS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3RmanMtYmFja2VuZC13ZWJnbC9zcmMvZ2F0aGVyX2dwdS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFHSCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUlwRCxNQUFNLE9BQU8sYUFBYTtJQU14QixZQUFZLE1BQW1CLEVBQUUsV0FBd0I7UUFMekQsa0JBQWEsR0FBRyxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQztRQU0vQixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUMvQixJQUFJLENBQUMsSUFBSSxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUM7UUFDL0IsTUFBTSxLQUFLLEdBQUcsaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNDLE1BQU0sWUFBWSxHQUFHLGVBQWUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFaEQsSUFBSSxDQUFDLFFBQVEsR0FBRzs7VUFFVixLQUFLOztvREFFcUMsTUFBTSxDQUFDLENBQUMsQ0FBQztvQ0FDekIsWUFBWTs7S0FFM0MsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQUVELGlFQUFpRTtBQUNqRSxTQUFTLGVBQWUsQ0FBQyxNQUFtQixFQUFFLElBQVk7SUFDeEQsTUFBTSxhQUFhLEdBQUcsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUVuRSxNQUFNLFlBQVksR0FBRyxFQUFFLENBQUM7SUFDeEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDdEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ1gsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUM1QjthQUFNO1lBQ0wsWUFBWSxDQUFDLElBQUksQ0FBQyxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDMUM7S0FDRjtJQUNELE9BQU8sWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQzdCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7R1BHUFVQcm9ncmFtfSBmcm9tICcuL2dwZ3B1X21hdGgnO1xuaW1wb3J0IHtnZXRDb29yZHNEYXRhVHlwZX0gZnJvbSAnLi9zaGFkZXJfY29tcGlsZXInO1xuXG5leHBvcnQgdHlwZSBHYXRoZXJTaGFwZSA9IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdO1xuXG5leHBvcnQgY2xhc3MgR2F0aGVyUHJvZ3JhbSBpbXBsZW1lbnRzIEdQR1BVUHJvZ3JhbSB7XG4gIHZhcmlhYmxlTmFtZXMgPSBbJ0EnLCAnaW5kaWNlcyddO1xuICBvdXRwdXRTaGFwZTogbnVtYmVyW107XG4gIHVzZXJDb2RlOiBzdHJpbmc7XG4gIHJhbms6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcihhU2hhcGU6IEdhdGhlclNoYXBlLCBvdXRwdXRTaGFwZTogR2F0aGVyU2hhcGUpIHtcbiAgICB0aGlzLm91dHB1dFNoYXBlID0gb3V0cHV0U2hhcGU7XG4gICAgdGhpcy5yYW5rID0gb3V0cHV0U2hhcGUubGVuZ3RoO1xuICAgIGNvbnN0IGR0eXBlID0gZ2V0Q29vcmRzRGF0YVR5cGUodGhpcy5yYW5rKTtcbiAgICBjb25zdCBzb3VyY2VDb29yZHMgPSBnZXRTb3VyY2VDb29yZHMoYVNoYXBlLCAyKTtcblxuICAgIHRoaXMudXNlckNvZGUgPSBgXG4gICAgICB2b2lkIG1haW4oKSB7XG4gICAgICAgICR7ZHR5cGV9IHJlc1JDID0gZ2V0T3V0cHV0Q29vcmRzKCk7XG4gICAgICAgIGludCBpbmRleCA9IGludChnZXRJbmRpY2VzKHJlc1JDLngsIHJlc1JDLnopKTtcbiAgICAgICAgZmxvYXQgaW5Cb3VuZHMgPSAoaW5kZXggPj0gMCkgJiYgKGluZGV4IDwgJHthU2hhcGVbMl19KSA/IDEuMCA6IDAuMDtcbiAgICAgICAgc2V0T3V0cHV0KGluQm91bmRzICogZ2V0QSgke3NvdXJjZUNvb3Jkc30pKTtcbiAgICAgIH1cbiAgICBgO1xuICB9XG59XG5cbi8vIFRoZSBpbnB1dCBhbmQgb3V0cHV0IGFyZSBhbHdheXMgZmxhdHRlbmVkIGludG8gcmFuayA0IHRlbnNvcnMuXG5mdW5jdGlvbiBnZXRTb3VyY2VDb29yZHMoYVNoYXBlOiBHYXRoZXJTaGFwZSwgYXhpczogbnVtYmVyKTogc3RyaW5nIHtcbiAgY29uc3QgY3VycmVudENvb3JkcyA9IFsncmVzUkMueCcsICdyZXNSQy55JywgJ3Jlc1JDLnonLCAncmVzUkMudyddO1xuXG4gIGNvbnN0IHNvdXJjZUNvb3JkcyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFTaGFwZS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChpID09PSAyKSB7XG4gICAgICBzb3VyY2VDb29yZHMucHVzaCgnaW5kZXgnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc291cmNlQ29vcmRzLnB1c2goYCR7Y3VycmVudENvb3Jkc1tpXX1gKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNvdXJjZUNvb3Jkcy5qb2luKCk7XG59XG4iXX0=","import { getCoordsDataType } from './shader_compiler';\nexport class GatherNDProgram {\n    constructor(sliceDim, strides, shape, paramsShape) {\n        this.sliceDim = sliceDim;\n        this.strides = strides;\n        this.paramsShape = paramsShape;\n        this.variableNames = ['x', 'indices'];\n        this.outputShape = shape;\n        const dtype = getCoordsDataType(shape.length);\n        let mainLoop = `\n    int index;`;\n        for (let j = 0; j < this.sliceDim; j++) {\n            mainLoop += `\n          index = round(getIndices(coords[0], ${j}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[j]};\n          flattenIndex += index * ${this.strides[j]};`;\n        }\n        this.userCode = `\n         void main() {\n          ${dtype} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${mainLoop}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2F0aGVyX25kX2dwdS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3RmanMtYmFja2VuZC13ZWJnbC9zcmMvZ2F0aGVyX25kX2dwdS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpQkEsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFFcEQsTUFBTSxPQUFPLGVBQWU7SUFJMUIsWUFDWSxRQUFnQixFQUFVLE9BQWlCLEVBQUUsS0FBZSxFQUM1RCxXQUFxQjtRQURyQixhQUFRLEdBQVIsUUFBUSxDQUFRO1FBQVUsWUFBTyxHQUFQLE9BQU8sQ0FBVTtRQUMzQyxnQkFBVyxHQUFYLFdBQVcsQ0FBVTtRQUxqQyxrQkFBYSxHQUFHLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBTS9CLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1FBQ3pCLE1BQU0sS0FBSyxHQUFHLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUU5QyxJQUFJLFFBQVEsR0FBRztlQUNKLENBQUM7UUFDWixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN0QyxRQUFRLElBQUk7Z0RBQzhCLENBQUM7O3NEQUVLLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO29DQUNyQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7U0FDbEQ7UUFFRCxJQUFJLENBQUMsUUFBUSxHQUFHOztZQUVSLEtBQUs7Ozs7WUFJTCxRQUFROzs7O09BSWIsQ0FBQztJQUNOLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cbmltcG9ydCB7R1BHUFVQcm9ncmFtfSBmcm9tICcuL2dwZ3B1X21hdGgnO1xuaW1wb3J0IHtnZXRDb29yZHNEYXRhVHlwZX0gZnJvbSAnLi9zaGFkZXJfY29tcGlsZXInO1xuXG5leHBvcnQgY2xhc3MgR2F0aGVyTkRQcm9ncmFtIGltcGxlbWVudHMgR1BHUFVQcm9ncmFtIHtcbiAgdmFyaWFibGVOYW1lcyA9IFsneCcsICdpbmRpY2VzJ107XG4gIG91dHB1dFNoYXBlOiBudW1iZXJbXTtcbiAgdXNlckNvZGU6IHN0cmluZztcbiAgY29uc3RydWN0b3IoXG4gICAgICBwcml2YXRlIHNsaWNlRGltOiBudW1iZXIsIHByaXZhdGUgc3RyaWRlczogbnVtYmVyW10sIHNoYXBlOiBudW1iZXJbXSxcbiAgICAgIHByaXZhdGUgcGFyYW1zU2hhcGU6IG51bWJlcltdKSB7XG4gICAgdGhpcy5vdXRwdXRTaGFwZSA9IHNoYXBlO1xuICAgIGNvbnN0IGR0eXBlID0gZ2V0Q29vcmRzRGF0YVR5cGUoc2hhcGUubGVuZ3RoKTtcblxuICAgIGxldCBtYWluTG9vcCA9IGBcbiAgICBpbnQgaW5kZXg7YDtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuc2xpY2VEaW07IGorKykge1xuICAgICAgbWFpbkxvb3AgKz0gYFxuICAgICAgICAgIGluZGV4ID0gcm91bmQoZ2V0SW5kaWNlcyhjb29yZHNbMF0sICR7an0pKTtcbiAgICAgICAgICBvdXRfb2ZfYm91bmRzID0gb3V0X29mX2JvdW5kcyB8fCBpbmRleCA8IDA7XG4gICAgICAgICAgb3V0X29mX2JvdW5kcyA9IG91dF9vZl9ib3VuZHMgfHwgaW5kZXggPj0gJHt0aGlzLnBhcmFtc1NoYXBlW2pdfTtcbiAgICAgICAgICBmbGF0dGVuSW5kZXggKz0gaW5kZXggKiAke3RoaXMuc3RyaWRlc1tqXX07YDtcbiAgICB9XG5cbiAgICB0aGlzLnVzZXJDb2RlID0gYFxuICAgICAgICAgdm9pZCBtYWluKCkge1xuICAgICAgICAgICR7ZHR5cGV9IGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xuICAgICAgICAgIGludCBmbGF0dGVuSW5kZXggPSAwO1xuICAgICAgICAgIGJvb2wgb3V0X29mX2JvdW5kcyA9IGZhbHNlO1xuXG4gICAgICAgICAgJHttYWluTG9vcH1cblxuICAgICAgICAgIHNldE91dHB1dChvdXRfb2ZfYm91bmRzID8gMC4wIDogZ2V0WChmbGF0dGVuSW5kZXgsIGNvb3Jkc1sxXSkpO1xuICAgICAgICB9XG4gICAgICBgO1xuICB9XG59XG4iXX0=","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nexport function getGlslDifferences() {\n    let version;\n    let attribute;\n    let varyingVs;\n    let varyingFs;\n    let texture2D;\n    let output;\n    let defineOutput;\n    let defineSpecialNaN;\n    let defineSpecialInf;\n    let defineRound;\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n        version = '#version 300 es';\n        attribute = 'in';\n        varyingVs = 'out';\n        varyingFs = 'in';\n        texture2D = 'texture';\n        output = 'outputColor';\n        defineOutput = 'out vec4 outputColor;';\n        // Use custom isnan definition to work across differences between\n        // implementations on various platforms. While this should happen in ANGLE\n        // we still see differences between android and windows (on chrome) when\n        // using isnan directly. Since WebGL2 supports uint type and\n        // floatBitsToUinT built-in function, we could implment isnan following\n        // IEEE 754 rules.\n        // NaN defination in IEEE 754-1985 is :\n        //   - sign = either 0 or 1.\n        //   - biased exponent = all 1 bits.\n        //   - fraction = anything except all 0 bits (since all 0 bits represents\n        //   infinity).\n        // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers\n        defineSpecialNaN = env().getBool('WEBGL2_ISNAN_CUSTOM') ? `\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ` :\n            '';\n        // In webgl 2 we do not need to specify a custom isinf so there is no\n        // need for a special INFINITY constant.\n        defineSpecialInf = ``;\n        defineRound = `\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n    }\n    else {\n        version = '';\n        attribute = 'attribute';\n        varyingVs = 'varying';\n        varyingFs = 'varying';\n        texture2D = 'texture2D';\n        output = 'gl_FragColor';\n        defineOutput = '';\n        // WebGL1 has no built in isnan so we define one here.\n        defineSpecialNaN = `\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    `;\n        defineSpecialInf = `\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    `;\n        defineRound = `\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n    }\n    return {\n        version,\n        attribute,\n        varyingVs,\n        varyingFs,\n        texture2D,\n        output,\n        defineOutput,\n        defineSpecialNaN,\n        defineSpecialInf,\n        defineRound\n    };\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xzbF92ZXJzaW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vdGZqcy1iYWNrZW5kLXdlYmdsL3NyYy9nbHNsX3ZlcnNpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBQ0gsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBZTFDLE1BQU0sVUFBVSxrQkFBa0I7SUFDaEMsSUFBSSxPQUFlLENBQUM7SUFDcEIsSUFBSSxTQUFpQixDQUFDO0lBQ3RCLElBQUksU0FBaUIsQ0FBQztJQUN0QixJQUFJLFNBQWlCLENBQUM7SUFDdEIsSUFBSSxTQUFpQixDQUFDO0lBQ3RCLElBQUksTUFBYyxDQUFDO0lBQ25CLElBQUksWUFBb0IsQ0FBQztJQUN6QixJQUFJLGdCQUF3QixDQUFDO0lBQzdCLElBQUksZ0JBQXdCLENBQUM7SUFDN0IsSUFBSSxXQUFtQixDQUFDO0lBRXhCLElBQUksR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUMxQyxPQUFPLEdBQUcsaUJBQWlCLENBQUM7UUFDNUIsU0FBUyxHQUFHLElBQUksQ0FBQztRQUNqQixTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ2xCLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFDakIsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUN0QixNQUFNLEdBQUcsYUFBYSxDQUFDO1FBQ3ZCLFlBQVksR0FBRyx1QkFBdUIsQ0FBQztRQUV2QyxpRUFBaUU7UUFDakUsMEVBQTBFO1FBQzFFLHdFQUF3RTtRQUN4RSw0REFBNEQ7UUFDNUQsdUVBQXVFO1FBQ3ZFLGtCQUFrQjtRQUNsQix1Q0FBdUM7UUFDdkMsNEJBQTRCO1FBQzVCLG9DQUFvQztRQUNwQyx5RUFBeUU7UUFDekUsZUFBZTtRQUNmLDRFQUE0RTtRQUM1RSxnQkFBZ0IsR0FBRyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUM7Ozs7Ozs7Ozs7OztLQVl6RCxDQUFDLENBQUM7WUFDdUQsRUFBRSxDQUFDO1FBQzdELHFFQUFxRTtRQUNyRSx3Q0FBd0M7UUFDeEMsZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO1FBQ3RCLFdBQVcsR0FBRzs7Ozs7Ozs7O0tBU2IsQ0FBQztLQUNIO1NBQU07UUFDTCxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2IsU0FBUyxHQUFHLFdBQVcsQ0FBQztRQUN4QixTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQ3RCLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDdEIsU0FBUyxHQUFHLFdBQVcsQ0FBQztRQUN4QixNQUFNLEdBQUcsY0FBYyxDQUFDO1FBQ3hCLFlBQVksR0FBRyxFQUFFLENBQUM7UUFDbEIsc0RBQXNEO1FBQ3RELGdCQUFnQixHQUFHOzs7Ozs7OztLQVFsQixDQUFDO1FBQ0YsZ0JBQWdCLEdBQUc7Ozs7Ozs7OztLQVNsQixDQUFDO1FBQ0YsV0FBVyxHQUFHOzs7Ozs7OztLQVFiLENBQUM7S0FDSDtJQUVELE9BQU87UUFDTCxPQUFPO1FBQ1AsU0FBUztRQUNULFNBQVM7UUFDVCxTQUFTO1FBQ1QsU0FBUztRQUNULE1BQU07UUFDTixZQUFZO1FBQ1osZ0JBQWdCO1FBQ2hCLGdCQUFnQjtRQUNoQixXQUFXO0tBQ1osQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5pbXBvcnQge2Vudn0gZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcblxuZXhwb3J0IHR5cGUgR0xTTCA9IHtcbiAgdmVyc2lvbjogc3RyaW5nLFxuICBhdHRyaWJ1dGU6IHN0cmluZyxcbiAgdmFyeWluZ1ZzOiBzdHJpbmcsXG4gIHZhcnlpbmdGczogc3RyaW5nLFxuICB0ZXh0dXJlMkQ6IHN0cmluZyxcbiAgb3V0cHV0OiBzdHJpbmcsXG4gIGRlZmluZU91dHB1dDogc3RyaW5nLFxuICBkZWZpbmVTcGVjaWFsTmFOOiBzdHJpbmcsXG4gIGRlZmluZVNwZWNpYWxJbmY6IHN0cmluZyxcbiAgZGVmaW5lUm91bmQ6IHN0cmluZ1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEdsc2xEaWZmZXJlbmNlcygpOiBHTFNMIHtcbiAgbGV0IHZlcnNpb246IHN0cmluZztcbiAgbGV0IGF0dHJpYnV0ZTogc3RyaW5nO1xuICBsZXQgdmFyeWluZ1ZzOiBzdHJpbmc7XG4gIGxldCB2YXJ5aW5nRnM6IHN0cmluZztcbiAgbGV0IHRleHR1cmUyRDogc3RyaW5nO1xuICBsZXQgb3V0cHV0OiBzdHJpbmc7XG4gIGxldCBkZWZpbmVPdXRwdXQ6IHN0cmluZztcbiAgbGV0IGRlZmluZVNwZWNpYWxOYU46IHN0cmluZztcbiAgbGV0IGRlZmluZVNwZWNpYWxJbmY6IHN0cmluZztcbiAgbGV0IGRlZmluZVJvdW5kOiBzdHJpbmc7XG5cbiAgaWYgKGVudigpLmdldE51bWJlcignV0VCR0xfVkVSU0lPTicpID09PSAyKSB7XG4gICAgdmVyc2lvbiA9ICcjdmVyc2lvbiAzMDAgZXMnO1xuICAgIGF0dHJpYnV0ZSA9ICdpbic7XG4gICAgdmFyeWluZ1ZzID0gJ291dCc7XG4gICAgdmFyeWluZ0ZzID0gJ2luJztcbiAgICB0ZXh0dXJlMkQgPSAndGV4dHVyZSc7XG4gICAgb3V0cHV0ID0gJ291dHB1dENvbG9yJztcbiAgICBkZWZpbmVPdXRwdXQgPSAnb3V0IHZlYzQgb3V0cHV0Q29sb3I7JztcblxuICAgIC8vIFVzZSBjdXN0b20gaXNuYW4gZGVmaW5pdGlvbiB0byB3b3JrIGFjcm9zcyBkaWZmZXJlbmNlcyBiZXR3ZWVuXG4gICAgLy8gaW1wbGVtZW50YXRpb25zIG9uIHZhcmlvdXMgcGxhdGZvcm1zLiBXaGlsZSB0aGlzIHNob3VsZCBoYXBwZW4gaW4gQU5HTEVcbiAgICAvLyB3ZSBzdGlsbCBzZWUgZGlmZmVyZW5jZXMgYmV0d2VlbiBhbmRyb2lkIGFuZCB3aW5kb3dzIChvbiBjaHJvbWUpIHdoZW5cbiAgICAvLyB1c2luZyBpc25hbiBkaXJlY3RseS4gU2luY2UgV2ViR0wyIHN1cHBvcnRzIHVpbnQgdHlwZSBhbmRcbiAgICAvLyBmbG9hdEJpdHNUb1VpblQgYnVpbHQtaW4gZnVuY3Rpb24sIHdlIGNvdWxkIGltcGxtZW50IGlzbmFuIGZvbGxvd2luZ1xuICAgIC8vIElFRUUgNzU0IHJ1bGVzLlxuICAgIC8vIE5hTiBkZWZpbmF0aW9uIGluIElFRUUgNzU0LTE5ODUgaXMgOlxuICAgIC8vICAgLSBzaWduID0gZWl0aGVyIDAgb3IgMS5cbiAgICAvLyAgIC0gYmlhc2VkIGV4cG9uZW50ID0gYWxsIDEgYml0cy5cbiAgICAvLyAgIC0gZnJhY3Rpb24gPSBhbnl0aGluZyBleGNlcHQgYWxsIDAgYml0cyAoc2luY2UgYWxsIDAgYml0cyByZXByZXNlbnRzXG4gICAgLy8gICBpbmZpbml0eSkuXG4gICAgLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSUVFRV83NTQtMTk4NSNSZXByZXNlbnRhdGlvbl9vZl9ub24tbnVtYmVyc1xuICAgIGRlZmluZVNwZWNpYWxOYU4gPSBlbnYoKS5nZXRCb29sKCdXRUJHTDJfSVNOQU5fQ1VTVE9NJykgPyBgXG4gICAgICBib29sIGlzbmFuX2N1c3RvbShmbG9hdCB2YWwpIHtcbiAgICAgICAgdWludCBmbG9hdFRvVWludCA9IGZsb2F0Qml0c1RvVWludCh2YWwpO1xuICAgICAgICByZXR1cm4gKGZsb2F0VG9VaW50ICYgMHg3ZmZmZmZmZnUpID4gMHg3ZjgwMDAwMHU7XG4gICAgICB9XG5cbiAgICAgIGJ2ZWM0IGlzbmFuX2N1c3RvbSh2ZWM0IHZhbCkge1xuICAgICAgICByZXR1cm4gYnZlYzQoaXNuYW5fY3VzdG9tKHZhbC54KSxcbiAgICAgICAgICBpc25hbl9jdXN0b20odmFsLnkpLCBpc25hbl9jdXN0b20odmFsLnopLCBpc25hbl9jdXN0b20odmFsLncpKTtcbiAgICAgIH1cblxuICAgICAgI2RlZmluZSBpc25hbih2YWx1ZSkgaXNuYW5fY3VzdG9tKHZhbHVlKVxuICAgIGAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJztcbiAgICAvLyBJbiB3ZWJnbCAyIHdlIGRvIG5vdCBuZWVkIHRvIHNwZWNpZnkgYSBjdXN0b20gaXNpbmYgc28gdGhlcmUgaXMgbm9cbiAgICAvLyBuZWVkIGZvciBhIHNwZWNpYWwgSU5GSU5JVFkgY29uc3RhbnQuXG4gICAgZGVmaW5lU3BlY2lhbEluZiA9IGBgO1xuICAgIGRlZmluZVJvdW5kID0gYFxuICAgICAgI2RlZmluZSByb3VuZCh2YWx1ZSkgbmV3Um91bmQodmFsdWUpXG4gICAgICBpbnQgbmV3Um91bmQoZmxvYXQgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGludChmbG9vcih2YWx1ZSArIDAuNSkpO1xuICAgICAgfVxuXG4gICAgICBpdmVjNCBuZXdSb3VuZCh2ZWM0IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpdmVjNChmbG9vcih2YWx1ZSArIHZlYzQoMC41KSkpO1xuICAgICAgfVxuICAgIGA7XG4gIH0gZWxzZSB7XG4gICAgdmVyc2lvbiA9ICcnO1xuICAgIGF0dHJpYnV0ZSA9ICdhdHRyaWJ1dGUnO1xuICAgIHZhcnlpbmdWcyA9ICd2YXJ5aW5nJztcbiAgICB2YXJ5aW5nRnMgPSAndmFyeWluZyc7XG4gICAgdGV4dHVyZTJEID0gJ3RleHR1cmUyRCc7XG4gICAgb3V0cHV0ID0gJ2dsX0ZyYWdDb2xvcic7XG4gICAgZGVmaW5lT3V0cHV0ID0gJyc7XG4gICAgLy8gV2ViR0wxIGhhcyBubyBidWlsdCBpbiBpc25hbiBzbyB3ZSBkZWZpbmUgb25lIGhlcmUuXG4gICAgZGVmaW5lU3BlY2lhbE5hTiA9IGBcbiAgICAgICNkZWZpbmUgaXNuYW4odmFsdWUpIGlzbmFuX2N1c3RvbSh2YWx1ZSlcbiAgICAgIGJvb2wgaXNuYW5fY3VzdG9tKGZsb2F0IHZhbCkge1xuICAgICAgICByZXR1cm4gKHZhbCA+IDAuIHx8IHZhbCA8IDEuIHx8IHZhbCA9PSAwLikgPyBmYWxzZSA6IHRydWU7XG4gICAgICB9XG4gICAgICBidmVjNCBpc25hbl9jdXN0b20odmVjNCB2YWwpIHtcbiAgICAgICAgcmV0dXJuIGJ2ZWM0KGlzbmFuKHZhbC54KSwgaXNuYW4odmFsLnkpLCBpc25hbih2YWwueiksIGlzbmFuKHZhbC53KSk7XG4gICAgICB9XG4gICAgYDtcbiAgICBkZWZpbmVTcGVjaWFsSW5mID0gYFxuICAgICAgdW5pZm9ybSBmbG9hdCBJTkZJTklUWTtcblxuICAgICAgYm9vbCBpc2luZihmbG9hdCB2YWwpIHtcbiAgICAgICAgcmV0dXJuIGFicyh2YWwpID09IElORklOSVRZO1xuICAgICAgfVxuICAgICAgYnZlYzQgaXNpbmYodmVjNCB2YWwpIHtcbiAgICAgICAgcmV0dXJuIGVxdWFsKGFicyh2YWwpLCB2ZWM0KElORklOSVRZKSk7XG4gICAgICB9XG4gICAgYDtcbiAgICBkZWZpbmVSb3VuZCA9IGBcbiAgICAgIGludCByb3VuZChmbG9hdCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaW50KGZsb29yKHZhbHVlICsgMC41KSk7XG4gICAgICB9XG5cbiAgICAgIGl2ZWM0IHJvdW5kKHZlYzQgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGl2ZWM0KGZsb29yKHZhbHVlICsgdmVjNCgwLjUpKSk7XG4gICAgICB9XG4gICAgYDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdmVyc2lvbixcbiAgICBhdHRyaWJ1dGUsXG4gICAgdmFyeWluZ1ZzLFxuICAgIHZhcnlpbmdGcyxcbiAgICB0ZXh0dXJlMkQsXG4gICAgb3V0cHV0LFxuICAgIGRlZmluZU91dHB1dCxcbiAgICBkZWZpbmVTcGVjaWFsTmFOLFxuICAgIGRlZmluZVNwZWNpYWxJbmYsXG4gICAgZGVmaW5lUm91bmRcbiAgfTtcbn1cbiJdfQ==","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext, setWebGLContext } from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport * as webgl_util from './webgl_util';\nexport class GPGPUContext {\n    constructor(gl) {\n        this.outputTexture = null;\n        this.program = null;\n        this.disposed = false;\n        this.itemsToPoll = [];\n        const glVersion = env().getNumber('WEBGL_VERSION');\n        if (gl != null) {\n            this.gl = gl;\n            setWebGLContext(glVersion, gl);\n        }\n        else {\n            this.gl = getWebGLContext(glVersion);\n        }\n        gl = this.gl;\n        if (env().getNumber('WEBGL_VERSION') === 2) {\n            const gl2 = gl;\n            this.createVertexArray = () => {\n                return webgl_util.callAndCheck(gl2, () => gl2.createVertexArray());\n            };\n            this.bindVertexArray = (vao) => {\n                return webgl_util.callAndCheck(gl2, () => gl2.bindVertexArray(vao));\n            };\n            this.deleteVertexArray = (vao) => {\n                return webgl_util.callAndCheck(gl2, () => gl2.deleteVertexArray(vao));\n            };\n            this.getVertexArray = () => {\n                return webgl_util.callAndCheck(gl2, () => gl2.getParameter(gl2.VERTEX_ARRAY_BINDING));\n            };\n        }\n        else if (gl != null) {\n            const ext = gl.getExtension('OES_vertex_array_object');\n            if (ext == null) {\n                throw new Error('All WebGL1 implementations are expected to offer' +\n                    ' OES_vertex_array_object.');\n            }\n            this.createVertexArray = () => {\n                return webgl_util.callAndCheck(gl, () => ext.createVertexArrayOES());\n            };\n            this.bindVertexArray = (vao) => {\n                return webgl_util.callAndCheck(gl, () => ext.bindVertexArrayOES(vao));\n            };\n            this.deleteVertexArray = (vao) => {\n                return webgl_util.callAndCheck(gl, () => ext.deleteVertexArrayOES(vao));\n            };\n            this.getVertexArray = () => {\n                return webgl_util.callAndCheck(gl, () => gl.getParameter(ext.VERTEX_ARRAY_BINDING_OES));\n            };\n        }\n        // WebGL 2.0 enables texture floats without an extension.\n        let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n        const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n        this.parallelCompilationExtension =\n            this.gl.getExtension('KHR_parallel_shader_compile');\n        if (env().getNumber('WEBGL_VERSION') === 1) {\n            const TEXTURE_FLOAT = 'OES_texture_float';\n            const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n            this.textureFloatExtension =\n                webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n            if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n                this.textureHalfFloatExtension =\n                    webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n            }\n            else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n                throw new Error('GL context does not support half float textures, yet the ' +\n                    'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n            }\n            this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n            if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n                this.colorBufferHalfFloatExtension =\n                    webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n            }\n            else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n                throw new Error('GL context does not support color renderable half floats, yet ' +\n                    'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n            }\n        }\n        else {\n            COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n            if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n                this.colorBufferFloatExtension =\n                    this.gl.getExtension(COLOR_BUFFER_FLOAT);\n            }\n            else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n                this.colorBufferHalfFloatExtension =\n                    this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n            }\n            else {\n                throw new Error('GL context does not support color renderable floats');\n            }\n        }\n        this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n        this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n        this.framebuffer = webgl_util.createFramebuffer(this.gl);\n        this.textureConfig =\n            tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n    }\n    get debug() {\n        return env().getBool('DEBUG');\n    }\n    dispose() {\n        if (this.disposed) {\n            return;\n        }\n        if (this.program != null) {\n            console.warn('Disposing a GPGPUContext that still has a bound WebGLProgram.' +\n                ' This is probably a resource leak, delete the program with ' +\n                'GPGPUContext.deleteProgram before disposing.');\n        }\n        if (this.outputTexture != null) {\n            console.warn('Disposing a GPGPUContext that still has a bound output matrix ' +\n                'texture.  This is probably a resource leak, delete the output ' +\n                'matrix texture with GPGPUContext.deleteMatrixTexture before ' +\n                'disposing.');\n        }\n        const gl = this.gl;\n        webgl_util.callAndCheck(gl, () => gl.finish());\n        webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n        webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n        webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n        webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n        webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n        this.disposed = true;\n    }\n    createFloat32MatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createFloat32MatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    createFloat16MatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createFloat16MatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    createUnsignedBytesMatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createUnsignedBytesMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    uploadPixelDataToTexture(texture, pixels) {\n        this.throwIfDisposed();\n        gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n    }\n    uploadDenseMatrixToTexture(texture, width, height, data) {\n        this.throwIfDisposed();\n        gpgpu_util.uploadDenseMatrixToTexture(this.gl, texture, width, height, data, this.textureConfig);\n    }\n    createFloat16PackedMatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createFloat16PackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    createPackedMatrixTexture(rows, columns) {\n        this.throwIfDisposed();\n        return gpgpu_util.createPackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n    }\n    deleteMatrixTexture(texture) {\n        this.throwIfDisposed();\n        if (this.outputTexture === texture) {\n            webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n            this.outputTexture = null;\n        }\n        webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n    }\n    downloadByteEncodedFloatMatrixFromOutputTexture(texture, rows, columns) {\n        return this.downloadMatrixDriver(texture, () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(this.gl, rows, columns, this.textureConfig));\n    }\n    downloadPackedMatrixFromBuffer(buffer, batch, rows, columns, physicalRows, physicalCols) {\n        return gpgpu_util.downloadPackedMatrixFromBuffer(this.gl, buffer, batch, rows, columns, physicalRows, physicalCols, this.textureConfig);\n    }\n    downloadFloat32MatrixFromBuffer(buffer, size) {\n        return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n    }\n    createBufferFromTexture(texture, rows, columns) {\n        this.bindTextureToFrameBuffer(texture);\n        const result = gpgpu_util.createBufferFromOutputTexture(this.gl, rows, columns, this.textureConfig);\n        this.unbindTextureToFrameBuffer();\n        return result;\n    }\n    createAndWaitForFence() {\n        const fenceContext = this.createFence(this.gl);\n        return this.pollFence(fenceContext);\n    }\n    createFence(gl) {\n        let query;\n        let isFencePassed;\n        if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n            const gl2 = gl;\n            const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n            gl.flush();\n            isFencePassed = () => {\n                const status = gl2.clientWaitSync(sync, 0, 0);\n                return status === gl2.ALREADY_SIGNALED ||\n                    status === gl2.CONDITION_SATISFIED;\n            };\n            query = sync;\n        }\n        else if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n            query = this.beginQuery();\n            this.endQuery();\n            isFencePassed = () => this.isQueryAvailable(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n        }\n        else {\n            // If we have no way to fence, return true immediately. This will fire in\n            // WebGL 1.0 when there is no disjoint query timer. In this case, because\n            // the fence passes immediately, we'll immediately ask for a download of\n            // the texture, which will cause the UI thread to hang.\n            isFencePassed = () => true;\n        }\n        return { query, isFencePassed };\n    }\n    downloadMatrixFromPackedTexture(texture, physicalRows, physicalCols) {\n        return this.downloadMatrixDriver(texture, () => gpgpu_util.downloadMatrixFromPackedOutputTexture(this.gl, physicalRows, physicalCols));\n    }\n    createProgram(fragmentShader) {\n        this.throwIfDisposed();\n        const gl = this.gl;\n        if (this.vertexShader == null) {\n            this.vertexShader = gpgpu_util.createVertexShader(gl);\n        }\n        const program = webgl_util.createProgram(gl);\n        webgl_util.callAndCheck(gl, () => gl.attachShader(program, this.vertexShader));\n        webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n        webgl_util.linkProgram(gl, program);\n        const program2 = Object.assign(program, { vao: this.createVertexArray() });\n        if (this.debug) {\n            webgl_util.validateProgram(gl, program2);\n        }\n        return program2;\n    }\n    buildVao(program) {\n        this.setProgram(program);\n        this.bindVertexArray(program.vao);\n        const gl = this.gl;\n        // Bind index buffer, and vertex buffers based on program attrib\n        // locations.\n        webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer));\n        gpgpu_util.bindVertexProgramAttributeStreams(gl, program, this.vertexBuffer);\n    }\n    deleteProgram(program) {\n        this.throwIfDisposed();\n        if (program === this.program) {\n            this.program = null;\n        }\n        if (program != null) {\n            webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n            this.deleteVertexArray(program.vao);\n        }\n    }\n    setProgram(program) {\n        this.throwIfDisposed();\n        this.program = program;\n        if (this.program != null) {\n            if (this.debug) {\n                webgl_util.validateProgram(this.gl, this.program);\n            }\n        }\n        webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));\n    }\n    getUniformLocation(program, uniformName, shouldThrow = true) {\n        this.throwIfDisposed();\n        if (shouldThrow) {\n            return webgl_util.getProgramUniformLocationOrThrow(this.gl, program, uniformName);\n        }\n        else {\n            return webgl_util.getProgramUniformLocation(this.gl, program, uniformName);\n        }\n    }\n    getAttributeLocation(program, attribute) {\n        this.throwIfDisposed();\n        return webgl_util.callAndCheck(this.gl, () => this.gl.getAttribLocation(program, attribute));\n    }\n    getUniformLocationNoThrow(program, uniformName) {\n        this.throwIfDisposed();\n        return this.gl.getUniformLocation(program, uniformName);\n    }\n    setInputMatrixTexture(inputMatrixTexture, uniformLocation, textureUnit) {\n        this.throwIfDisposed();\n        this.throwIfNoProgram();\n        webgl_util.bindTextureToProgramUniformSampler(this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n    }\n    setOutputMatrixTexture(outputMatrixTexture, rows, columns) {\n        this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n    }\n    setOutputPackedMatrixTexture(outputPackedMatrixTexture, rows, columns) {\n        this.throwIfDisposed();\n        const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n        this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n    }\n    setOutputMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n        this.setOutputMatrixWriteRegionDriver(startColumn, startRow, numColumns, numRows);\n    }\n    setOutputPackedMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n        throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n    }\n    debugValidate() {\n        if (this.program != null) {\n            webgl_util.validateProgram(this.gl, this.program);\n        }\n        webgl_util.validateFramebuffer(this.gl);\n    }\n    executeProgram() {\n        this.throwIfDisposed();\n        this.throwIfNoProgram();\n        const gl = this.gl;\n        if (this.debug) {\n            const boundVao = this.getVertexArray();\n            console.assert(boundVao === this.program.vao, 'VAO changed between setProgram and executeProgram!');\n            this.debugValidate();\n        }\n        webgl_util.callAndCheck(gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n    }\n    blockUntilAllProgramsCompleted() {\n        this.throwIfDisposed();\n        webgl_util.callAndCheck(this.gl, () => this.gl.finish());\n    }\n    getQueryTimerExtension() {\n        if (this.disjointQueryTimerExtension == null) {\n            this.disjointQueryTimerExtension =\n                webgl_util.getExtensionOrThrow(this.gl, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?\n                    'EXT_disjoint_timer_query_webgl2' :\n                    'EXT_disjoint_timer_query');\n        }\n        return this.disjointQueryTimerExtension;\n    }\n    getQueryTimerExtensionWebGL2() {\n        return this.getQueryTimerExtension();\n    }\n    getQueryTimerExtensionWebGL1() {\n        return this.getQueryTimerExtension();\n    }\n    beginQuery() {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n            const gl2 = this.gl;\n            const ext = this.getQueryTimerExtensionWebGL2();\n            const query = gl2.createQuery();\n            gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n            return query;\n        }\n        const ext = this.getQueryTimerExtensionWebGL1();\n        const query = ext.createQueryEXT();\n        ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n        return query;\n    }\n    endQuery() {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n            const gl2 = this.gl;\n            const ext = this.getQueryTimerExtensionWebGL2();\n            gl2.endQuery(ext.TIME_ELAPSED_EXT);\n            return;\n        }\n        const ext = this.getQueryTimerExtensionWebGL1();\n        ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n    }\n    async waitForQueryAndGetTime(query) {\n        await util.repeatedTry(() => this.disposed || // while testing contexts are created / disposed\n            // in rapid succession, so without this check we\n            // may poll for the query timer indefinitely\n            this.isQueryAvailable(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n        return this.getQueryTime(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    }\n    getQueryTime(query, queryTimerVersion) {\n        if (queryTimerVersion === 0) {\n            return null;\n        }\n        if (queryTimerVersion === 2) {\n            const gl2 = this.gl;\n            const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n            // Return milliseconds.\n            return timeElapsedNanos / 1000000;\n        }\n        else {\n            const ext = this.getQueryTimerExtensionWebGL1();\n            const timeElapsedNanos = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n            // Return milliseconds.\n            return timeElapsedNanos / 1000000;\n        }\n    }\n    isQueryAvailable(query, queryTimerVersion) {\n        if (queryTimerVersion === 0) {\n            return true;\n        }\n        if (queryTimerVersion === 2) {\n            const gl2 = this.gl;\n            const ext = this.getQueryTimerExtensionWebGL2();\n            const available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n            if (this.disjoint == null) {\n                this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n            }\n            return available && !this.disjoint;\n        }\n        else {\n            const ext = this.getQueryTimerExtensionWebGL1();\n            const available = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n            if (this.disjoint == null) {\n                this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n            }\n            return available && !this.disjoint;\n        }\n    }\n    pollFence(fenceContext) {\n        return new Promise(resolve => {\n            this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n        });\n    }\n    pollItems() {\n        // Find the last query that has finished.\n        const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n        for (let i = 0; i <= index; ++i) {\n            const { resolveFn } = this.itemsToPoll[i];\n            resolveFn();\n        }\n        this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n    }\n    addItemToPoll(isDoneFn, resolveFn) {\n        this.itemsToPoll.push({ isDoneFn, resolveFn });\n        if (this.itemsToPoll.length > 1) {\n            // We already have a running loop that polls.\n            return;\n        }\n        // Start a new loop that polls.\n        let scheduleFn = undefined;\n        if ('setTimeoutCustom' in env().platform) {\n            scheduleFn = env().platform.setTimeoutCustom.bind(env().platform);\n        }\n        util.repeatedTry(() => {\n            this.pollItems();\n            // End the loop if no more items to poll.\n            return this.itemsToPoll.length === 0;\n        }, () => 0, null, scheduleFn);\n    }\n    bindTextureToFrameBuffer(texture) {\n        this.throwIfDisposed();\n        webgl_util.bindColorTextureToFramebuffer(this.gl, texture, this.framebuffer);\n        if (this.debug) {\n            webgl_util.validateFramebuffer(this.gl);\n        }\n    }\n    unbindTextureToFrameBuffer() {\n        if (this.outputTexture != null) {\n            webgl_util.bindColorTextureToFramebuffer(this.gl, this.outputTexture, this.framebuffer);\n            if (this.debug) {\n                webgl_util.validateFramebuffer(this.gl);\n            }\n        }\n        else {\n            webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n        }\n    }\n    downloadMatrixDriver(texture, downloadAndDecode) {\n        this.bindTextureToFrameBuffer(texture);\n        const result = downloadAndDecode();\n        this.unbindTextureToFrameBuffer();\n        return result;\n    }\n    setOutputMatrixTextureDriver(outputMatrixTextureMaybePacked, width, height) {\n        this.throwIfDisposed();\n        const gl = this.gl;\n        webgl_util.bindColorTextureToFramebuffer(gl, outputMatrixTextureMaybePacked, this.framebuffer);\n        if (this.debug) {\n            webgl_util.validateFramebuffer(gl);\n        }\n        this.outputTexture = outputMatrixTextureMaybePacked;\n        webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n        webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n    }\n    setOutputMatrixWriteRegionDriver(x, y, width, height) {\n        this.throwIfDisposed();\n        webgl_util.callAndCheck(this.gl, () => this.gl.scissor(x, y, width, height));\n    }\n    throwIfDisposed() {\n        if (this.disposed) {\n            throw new Error('Attempted to use disposed GPGPUContext.');\n        }\n    }\n    throwIfNoProgram() {\n        if (this.program == null) {\n            throw new Error('No GPU program is currently set.');\n        }\n    }\n}\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr) {\n    let i = 0;\n    for (; i < arr.length; ++i) {\n        const isDone = arr[i]();\n        if (!isDone) {\n            break;\n        }\n    }\n    return i - 1;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, util } from '@tensorflow/tfjs-core';\nimport * as shader_compiler from './shader_compiler';\nimport { createFragmentShader } from './webgl_util';\nexport function compileProgram(gpgpu, program, inputs, output) {\n    const inputInfos = inputs.map((input, i) => {\n        const shapeInfo = {\n            logicalShape: input.shape,\n            texShape: input.isUniform ? null : input.texData.texShape,\n            isUniform: input.isUniform,\n            isPacked: input.isUniform ? false : input.texData.isPacked,\n            flatOffset: null\n        };\n        if (input.texData != null && input.texData.slice != null &&\n            input.texData.slice.flatOffset > 0) {\n            shapeInfo.flatOffset = input.texData.slice.flatOffset;\n        }\n        return { name: program.variableNames[i], shapeInfo };\n    });\n    const inShapeInfos = inputInfos.map(x => x.shapeInfo);\n    const outShapeInfo = {\n        logicalShape: output.shape,\n        texShape: output.texData.texShape,\n        isUniform: false,\n        isPacked: output.texData.isPacked,\n        flatOffset: null\n    };\n    const source = shader_compiler.makeShader(inputInfos, outShapeInfo, program);\n    const fragmentShader = createFragmentShader(gpgpu.gl, source);\n    const webGLProgram = gpgpu.createProgram(fragmentShader);\n    if (!env().get('ENGINE_COMPILE_ONLY')) {\n        gpgpu.buildVao(webGLProgram);\n        return Object.assign({ program,\n            fragmentShader,\n            source,\n            webGLProgram,\n            inShapeInfos,\n            outShapeInfo }, getUniformLocations(gpgpu, program, webGLProgram));\n    }\n    else {\n        return {\n            program,\n            fragmentShader,\n            source,\n            webGLProgram,\n            inShapeInfos,\n            outShapeInfo,\n            variablesLocations: null,\n            customUniformLocations: null,\n            infLoc: null,\n            nanLoc: null,\n            outShapeLocation: null,\n            outShapeStridesLocation: null,\n            outTexShapeLocation: null\n        };\n    }\n}\nexport function getUniformLocations(gpgpu, program, webGLProgram) {\n    const variablesLocations = [];\n    const customUniformLocations = [];\n    let outShapeLocation;\n    let outTexShapeLocation;\n    let outShapeStridesLocation;\n    let infLoc = null;\n    let nanLoc = null;\n    // Add special uniforms (NAN, INFINITY)\n    nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n        infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);\n    }\n    // Add user-defined uniforms\n    const shouldThrow = false;\n    for (const varName of program.variableNames) {\n        const varLocs = {\n            name: varName,\n            uniform: gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow),\n            offset: gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow),\n        };\n        if (program.enableShapeUniforms) {\n            varLocs.shape = gpgpu.getUniformLocation(webGLProgram, `${varName}Shape`, shouldThrow);\n            varLocs.texShape = gpgpu.getUniformLocation(webGLProgram, `${varName}TexShape`, shouldThrow);\n        }\n        variablesLocations.push(varLocs);\n    }\n    if (program.enableShapeUniforms) {\n        outShapeLocation =\n            gpgpu.getUniformLocation(webGLProgram, 'outShape', shouldThrow);\n        outShapeStridesLocation =\n            gpgpu.getUniformLocation(webGLProgram, 'outShapeStrides', shouldThrow);\n        outTexShapeLocation =\n            gpgpu.getUniformLocation(webGLProgram, 'outTexShape', shouldThrow);\n    }\n    if (program.customUniforms) {\n        for (const d of program.customUniforms) {\n            customUniformLocations.push(gpgpu.getUniformLocation(webGLProgram, d.name, shouldThrow));\n        }\n    }\n    return {\n        variablesLocations,\n        customUniformLocations,\n        infLoc,\n        nanLoc,\n        outShapeLocation,\n        outShapeStridesLocation,\n        outTexShapeLocation\n    };\n}\nfunction validateBinaryAndProgram(shapeInfos, inputs) {\n    if (shapeInfos.length !== inputs.length) {\n        throw Error(`Binary was compiled with ${shapeInfos.length} inputs, but ` +\n            `was executed with ${inputs.length} inputs`);\n    }\n    shapeInfos.forEach((s, i) => {\n        const shapeA = s.logicalShape;\n        const input = inputs[i];\n        const shapeB = input.shape;\n        if (!util.arraysEqual(shapeA, shapeB)) {\n            throw Error(`Binary was compiled with different shapes than ` +\n                `the current args. Shapes ${shapeA} and ${shapeB} must match`);\n        }\n        // The input is uploaded as uniform.\n        if (s.isUniform && input.isUniform) {\n            return;\n        }\n        const texShapeA = s.texShape;\n        const texShapeB = input.isUniform ? null : input.texData.texShape;\n        if (!util.arraysEqual(texShapeA, texShapeB)) {\n            throw Error(`Binary was compiled with different texture shapes than the` +\n                ` current args. Shape ${texShapeA} and ${texShapeB} must match`);\n        }\n    });\n}\nexport function runProgram(gpgpu, binary, inputs, output, customUniformValues) {\n    if (!binary.program.enableShapeUniforms) {\n        validateBinaryAndProgram(binary.inShapeInfos, inputs);\n        validateBinaryAndProgram([binary.outShapeInfo], [output]);\n    }\n    const outTex = output.texData.texture;\n    const outTexShape = output.texData.texShape;\n    if (output.texData.isPacked) {\n        gpgpu.setOutputPackedMatrixTexture(outTex.texture, outTexShape[0], outTexShape[1]);\n    }\n    else {\n        gpgpu.setOutputMatrixTexture(outTex.texture, outTexShape[0], outTexShape[1]);\n    }\n    gpgpu.setProgram(binary.webGLProgram);\n    gpgpu.bindVertexArray(binary.webGLProgram.vao);\n    // Set special uniforms (NAN, INFINITY)\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n        if (binary.infLoc !== null) {\n            gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n        }\n    }\n    if (binary.nanLoc !== null) {\n        gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n    }\n    // Set user-defined inputs\n    for (let i = 0; i < inputs.length; ++i) {\n        const input = inputs[i];\n        const { uniform: varLoc, offset: varOffsetLoc, shape: varShapeLoc, texShape: varTexShapeLoc, } = binary.variablesLocations[i];\n        if (varShapeLoc) {\n            const { uniformShape } = shader_compiler.getUniformInfoFromShape(binary.program.packedInputs, input.shape, input.texData.texShape);\n            switch (uniformShape.length) {\n                case 1:\n                    gpgpu.gl.uniform1iv(varShapeLoc, new Int32Array(uniformShape));\n                    break;\n                case 2:\n                    gpgpu.gl.uniform2iv(varShapeLoc, new Int32Array(uniformShape));\n                    break;\n                case 3:\n                    gpgpu.gl.uniform3iv(varShapeLoc, new Int32Array(uniformShape));\n                    break;\n                case 4:\n                    gpgpu.gl.uniform4iv(varShapeLoc, new Int32Array(uniformShape));\n                    break;\n                default:\n                    break;\n            }\n        }\n        if (varTexShapeLoc) {\n            gpgpu.gl.uniform2i(varTexShapeLoc, input.texData.texShape[0], input.texData.texShape[1]);\n        }\n        if (varLoc == null) {\n            // The compiler inferred that this variable is not used in this shader.\n            continue;\n        }\n        if (input.isUniform) {\n            // Upload the values of the tensor as uniform.\n            if (util.sizeFromShape(input.shape) < 2) {\n                gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);\n            }\n            else {\n                let vals = input.uniformValues;\n                if (!(vals instanceof Float32Array)) {\n                    vals = new Float32Array(vals);\n                }\n                gpgpu.gl.uniform1fv(varLoc, vals);\n            }\n            continue;\n        }\n        // If the input was sliced, upload the flat offset index.\n        if (input.texData.slice != null && varOffsetLoc != null) {\n            gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);\n        }\n        gpgpu.setInputMatrixTexture(input.texData.texture.texture, varLoc, i);\n    }\n    const outShapeLoc = binary.outShapeLocation;\n    if (outShapeLoc) {\n        switch (output.shape.length) {\n            case 1:\n                gpgpu.gl.uniform1iv(outShapeLoc, new Int32Array(output.shape));\n                break;\n            case 2:\n                gpgpu.gl.uniform2iv(outShapeLoc, new Int32Array(output.shape));\n                break;\n            case 3:\n                gpgpu.gl.uniform3iv(outShapeLoc, new Int32Array(output.shape));\n                break;\n            case 4:\n                gpgpu.gl.uniform4iv(outShapeLoc, new Int32Array(output.shape));\n                break;\n            default:\n                break;\n        }\n    }\n    if (binary.outShapeStridesLocation) {\n        const strides = util.computeStrides(output.shape);\n        switch (output.shape.length) {\n            case 2:\n                gpgpu.gl.uniform1iv(binary.outShapeStridesLocation, new Int32Array(strides));\n                break;\n            case 3:\n                gpgpu.gl.uniform2iv(binary.outShapeStridesLocation, new Int32Array(strides));\n                break;\n            case 4:\n                gpgpu.gl.uniform3iv(binary.outShapeStridesLocation, new Int32Array(strides));\n                break;\n            default:\n                break;\n        }\n    }\n    if (binary.outTexShapeLocation) {\n        gpgpu.gl.uniform2i(binary.outTexShapeLocation, output.texData.texShape[0], output.texData.texShape[1]);\n    }\n    if (binary.program.customUniforms && customUniformValues) {\n        for (let i = 0; i < binary.program.customUniforms.length; ++i) {\n            const d = binary.program.customUniforms[i];\n            const customLoc = binary.customUniformLocations[i];\n            const customValue = customUniformValues[i];\n            if (d.type === 'float') {\n                gpgpu.gl.uniform1fv(customLoc, customValue);\n            }\n            else if (d.type === 'vec2') {\n                gpgpu.gl.uniform2fv(customLoc, customValue);\n            }\n            else if (d.type === 'vec3') {\n                gpgpu.gl.uniform3fv(customLoc, customValue);\n            }\n            else if (d.type === 'vec4') {\n                gpgpu.gl.uniform4fv(customLoc, customValue);\n            }\n            else if (d.type === 'int') {\n                gpgpu.gl.uniform1iv(customLoc, customValue);\n            }\n            else if (d.type === 'ivec2') {\n                gpgpu.gl.uniform2iv(customLoc, customValue);\n            }\n            else if (d.type === 'ivec3') {\n                gpgpu.gl.uniform3iv(customLoc, customValue);\n            }\n            else if (d.type === 'ivec4') {\n                gpgpu.gl.uniform4iv(customLoc, customValue);\n            }\n            else {\n                throw Error(`uniform type ${d.type} is not supported yet.`);\n            }\n        }\n    }\n    gpgpu.executeProgram();\n}\nexport function makeShaderKey(program, inputs, output) {\n    let keyInputs = '';\n    inputs.concat(output).forEach(x => {\n        const hasOffset = x.texData != null && x.texData.slice != null &&\n            x.texData.slice.flatOffset > 0;\n        // TODO: Remove the condition of !x.isUniform.\n        if (program.enableShapeUniforms && !x.isUniform) {\n            const xTexShape = x.texData.texShape;\n            const { useSqueezeShape, uniformShape, keptDims } = shader_compiler.getUniformInfoFromShape(program.packedInputs, x.shape, xTexShape);\n            let rank1 = '', rank2 = '', rank34 = '';\n            if (uniformShape.length === 1 && program.packedInputs) {\n                const packedTexShape = [Math.ceil(xTexShape[0] / 2), Math.ceil(xTexShape[1] / 2)];\n                rank1 = `${packedTexShape[0] > 1}_${packedTexShape[1] > 1}`;\n            }\n            else if (uniformShape.length === 2 && !program.packedInputs) {\n                rank2 = `${uniformShape[0] > 1}_${uniformShape[1] > 1}`;\n            }\n            else if (uniformShape.length > 2 && !program.packedInputs) {\n                const strides = util.computeStrides(uniformShape);\n                rank34 = `${strides[0] === xTexShape[1]}_${strides[strides.length - 1] === xTexShape[1]}`;\n            }\n            const xRank = x.shape.length;\n            const isLogicalShapTexShapeEqual = uniformShape.length === 2 && util.arraysEqual(x.shape, xTexShape);\n            const isScalar = util.sizeFromShape(x.shape) === 1;\n            const broadcastDims = backend_util.getBroadcastDims(x.shape, output.shape);\n            const isInOutTexShapeEqual = !program.packedInputs &&\n                xRank === output.shape.length &&\n                util.arraysEqual(xTexShape, output.texData.texShape);\n            const isTexShapeGreaterThanOne = program.packedInputs || uniformShape.length > 2 ?\n                '' :\n                `${xTexShape[0] > 1}_${xTexShape[1] > 1}`;\n            // These key components are needed due to shader_compiler is embedding\n            // them in the shader.\n            // |xRank| is used to determine the coords length. See\n            // get[Packed]SamplerAtOutputCoords.\n            // |isInOutTexShapeEqual| is used to determine whether going to an\n            // optimization path in getSamplerAtOutputCoords.\n            // |useSqueezeShape| is extracted from squeezeInputInfo of\n            // getSampler[2|3|4]D/getPackedSampler3D.\n            // |isScalar| is extracted from isInputScalar/isOutputScalar in\n            // getPackedSamplerAtOutputCoords.\n            // |broadcastDims| is extracted from get[Packed]SamplerAtOutputCoords.\n            // |isLogicalShapTexShapeEqual| is used in\n            // getOutput[Packed]2DCoords/get[Packed]Sampler2D.\n            // |rank1| is used in getOutputPacked1DCoords.\n            // |rank2| is used in getOutput2DCoords.\n            // |rank34| is used in getSampler3D/getSampler4D.\n            // |isTexShapeGreaterThanOne| are used in\n            // getSampler[Scalar|1D|2D]/getOutput1DCoords.\n            keyInputs += `${xRank}_${isInOutTexShapeEqual}_${useSqueezeShape ? keptDims : ''}_${uniformShape.length}_${isScalar}_${broadcastDims}_${isLogicalShapTexShapeEqual}_${rank1}_${rank2}_${rank34}_${isTexShapeGreaterThanOne}_${hasOffset}`;\n        }\n        else {\n            const texShape = x.isUniform ? 'uniform' : x.texData.texShape;\n            keyInputs += `${x.shape}_${texShape}_${hasOffset}`;\n        }\n    });\n    const keyUserCode = program.userCode;\n    let key = program.constructor.name;\n    // Fast string concat. See https://jsperf.com/string-concatenation/14.\n    key += '_' + keyInputs + '_' + keyUserCode +\n        `${env().getNumber('WEBGL_VERSION')}`;\n    return key;\n}\nexport function useShapeUniforms(rank) {\n    // TODO: Remove the limitaion of rank <= 4.\n    return env().getBool('WEBGL_USE_SHAPES_UNIFORMS') && rank <= 4;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { getGlslDifferences } from './glsl_version';\nimport * as tex_util from './tex_util';\nimport * as webgl_util from './webgl_util';\nexport function createVertexShader(gl) {\n    const glsl = getGlslDifferences();\n    const vertexShaderSource = `${glsl.version}\n    precision highp float;\n    ${glsl.attribute} vec3 clipSpacePos;\n    ${glsl.attribute} vec2 uv;\n    ${glsl.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`;\n    return webgl_util.createVertexShader(gl, vertexShaderSource);\n}\nexport function createVertexBuffer(gl) {\n    // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n    const vertexArray = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n    return webgl_util.createStaticVertexBuffer(gl, vertexArray);\n}\nexport function createIndexBuffer(gl) {\n    // OpenGL (and WebGL) have \"CCW == front\" winding\n    const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n    return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\nfunction createAndConfigureTexture(gl, width, height, internalFormat, textureFormat, textureType) {\n    webgl_util.validateTextureSize(width, height);\n    const texture = webgl_util.createTexture(gl);\n    const tex2d = gl.TEXTURE_2D;\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(tex2d, texture));\n    webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));\n    webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));\n    webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));\n    webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n        webgl_util.callAndCheck(gl, () => gl.texImage2D(tex2d, 0, internalFormat, width, height, 0, textureFormat, textureType, null));\n    }\n    else {\n        webgl_util.callAndCheck(gl, () => gl\n            .texStorage2D(tex2d, 1, internalFormat, width, height));\n    }\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n    return { texture, texShape: [height, width] };\n}\nexport function getInternalFormatForFloat32MatrixTexture(textureConfig) {\n    return textureConfig.internalFormatFloat;\n}\nexport function createFloat32MatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat32MatrixTexture(textureConfig), textureConfig.textureFormatFloat, gl.FLOAT);\n}\nexport function getInternalFormatForFloat16MatrixTexture(textureConfig) {\n    return textureConfig.internalFormatHalfFloat;\n}\nexport function createFloat16MatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16MatrixTexture(textureConfig), textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\nexport function getInternalFormatForUnsignedBytesMatrixTexture(textureConfig) {\n    return textureConfig.downloadTextureFormat;\n}\nexport function createUnsignedBytesMatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA, gl.UNSIGNED_BYTE);\n}\nexport function getInternalFormatForPackedMatrixTexture(textureConfig) {\n    return textureConfig.internalFormatPackedFloat;\n}\nexport function createPackedMatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig), gl.RGBA, gl.FLOAT);\n}\nexport function getInternalFormatForFloat16PackedMatrixTexture(textureConfig) {\n    return textureConfig.internalFormatPackedHalfFloat;\n}\nexport function createFloat16PackedMatrixTexture(gl, rows, columns, textureConfig) {\n    const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA, textureConfig.textureTypeHalfFloat);\n}\nexport function bindVertexProgramAttributeStreams(gl, program, vertexBuffer) {\n    const posOffset = 0; // x is the first buffer element\n    const uvOffset = 3 * 4; // uv comes after [x y z]\n    const stride = (3 * 4) + (2 * 4); // xyz + uv, each entry is 4-byte float.\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));\n    const success = webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n    return success &&\n        webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\nexport function uploadDenseMatrixToTexture(gl, texture, width, height, data, textureConfig) {\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n    let dataForUpload, texelDataType, internalFormat;\n    if (data instanceof Uint8Array) {\n        dataForUpload = new Uint8Array(width * height * 4);\n        texelDataType = gl.UNSIGNED_BYTE;\n        internalFormat = gl.RGBA;\n    }\n    else {\n        dataForUpload = new Float32Array(width * height * 4);\n        texelDataType = gl.FLOAT;\n        internalFormat = textureConfig.internalFormatPackedFloat;\n    }\n    dataForUpload.set(data);\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n        webgl_util.callAndCheck(gl, () => gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, gl.RGBA, texelDataType, dataForUpload));\n    }\n    else {\n        webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA, texelDataType, dataForUpload));\n    }\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\nexport function uploadPixelDataToTexture(gl, texture, pixels) {\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n    if (pixels.data instanceof Uint8Array) {\n        if (env().getNumber('WEBGL_VERSION') === 2) {\n            webgl_util.callAndCheck(gl, () => gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, pixels.width, pixels.height, gl.RGBA, gl.UNSIGNED_BYTE, pixels.data));\n        }\n        else {\n            webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels.data));\n        }\n    }\n    else {\n        if (env().getNumber('WEBGL_VERSION') === 2) {\n            webgl_util.callAndCheck(gl, () => gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels));\n        }\n        else {\n            webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, pixels));\n        }\n    }\n    webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\nexport function createBufferFromOutputTexture(gl2, rows, columns, textureConfig) {\n    // Create and bind the buffer.\n    const buffer = gl2.createBuffer();\n    webgl_util.callAndCheck(gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));\n    // Initialize the buffer to the size of the texture in bytes.\n    const bytesPerFloat = 4;\n    const valuesPerTexel = 4;\n    const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n    webgl_util.callAndCheck(gl2, () => gl2.bufferData(gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ));\n    // Enqueue a command on the GPU command queue to copy of texture into the\n    // buffer.\n    webgl_util.callAndCheck(gl2, () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));\n    webgl_util.callAndCheck(gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));\n    return buffer;\n}\nexport function downloadFloat32MatrixFromBuffer(gl, buffer, size) {\n    const gl2 = gl;\n    const downloadTarget = new Float32Array(size);\n    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n    gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n    return downloadTarget;\n}\nexport function downloadByteEncodedFloatMatrixFromOutputTexture(gl, rows, columns, textureConfig) {\n    const [w, h] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n    const numChannels = 4;\n    const downloadTarget = new Uint8Array(tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n    webgl_util.callAndCheck(gl, () => gl.readPixels(0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE, downloadTarget));\n    // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n    // decoding of the 4 bytes that back each 32 bit float.\n    return new Float32Array(downloadTarget.buffer);\n}\nexport function downloadPackedMatrixFromBuffer(gl, buffer, batch, rows, cols, physicalRows, physicalCols, textureConfig) {\n    const gl2 = gl;\n    const downloadTarget = new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(physicalRows, physicalCols));\n    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n    gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n    gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n    return downloadTarget;\n}\nexport function downloadMatrixFromPackedOutputTexture(gl, physicalRows, physicalCols) {\n    const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n    webgl_util.callAndCheck(gl, () => gl.readPixels(0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));\n    return packedRGBA;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { useShapeUniforms } from './gpgpu_math';\nexport class Im2ColPackedProgram {\n    constructor(outputShape, convInfo) {\n        this.variableNames = ['A'];\n        this.packedInputs = true;\n        this.packedOutput = true;\n        this.customUniforms = [\n            { name: 'inputShape', type: 'ivec4' },\n            { name: 'pad', type: 'ivec2' },\n            { name: 'stride', type: 'ivec2' },\n            { name: 'dilation', type: 'ivec2' },\n            { name: 'inChannels', type: 'int' },\n            { name: 'itemsPerBlockRow', type: 'int' },\n            { name: 'outWidth', type: 'int' },\n        ];\n        this.outputShape = outputShape;\n        this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n        const { dataFormat } = convInfo;\n        const glsl = getGlslDifferences();\n        const isChannelsLast = dataFormat === 'channelsLast';\n        const rowDim = isChannelsLast ? 1 : 2;\n        const colDim = isChannelsLast ? 2 : 3;\n        const boundsCheckingSnippet = this.enableShapeUniforms ?\n            'if(blockIndex < outShape[2] && pos < outShape[1]) {' :\n            `if(blockIndex < ${outputShape[2]} && pos < ${outputShape[1]}) {`;\n        let unrolled = ``;\n        for (let row = 0; row <= 1; row++) {\n            for (let col = 0; col <= 1; col++) {\n                unrolled += `\n          blockIndex = rc.z + ${col};\n          pos = rc.y + ${row};\n\n          ${boundsCheckingSnippet}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${rowDim}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${colDim}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n            }\n        }\n        this.userCode = `\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW0yY29sX3BhY2tlZF9ncHUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90ZmpzLWJhY2tlbmQtd2ViZ2wvc3JjL2ltMmNvbF9wYWNrZWRfZ3B1LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUdILE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ2xELE9BQU8sRUFBZSxnQkFBZ0IsRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUU1RCxNQUFNLE9BQU8sbUJBQW1CO0lBaUI5QixZQUFZLFdBQXFCLEVBQUUsUUFBaUM7UUFoQnBFLGtCQUFhLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0QixpQkFBWSxHQUFHLElBQUksQ0FBQztRQUNwQixpQkFBWSxHQUFHLElBQUksQ0FBQztRQUlwQixtQkFBYyxHQUFHO1lBQ2YsRUFBQyxJQUFJLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxPQUFnQixFQUFFO1lBQzdDLEVBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsT0FBZ0IsRUFBRTtZQUN0QyxFQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE9BQWdCLEVBQUU7WUFDekMsRUFBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxPQUFnQixFQUFFO1lBQzNDLEVBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsS0FBYyxFQUFFO1lBQzNDLEVBQUMsSUFBSSxFQUFFLGtCQUFrQixFQUFFLElBQUksRUFBRSxLQUFjLEVBQUU7WUFDakQsRUFBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxLQUFjLEVBQUU7U0FDMUMsQ0FBQztRQUdBLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBQy9CLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JFLE1BQU0sRUFBQyxVQUFVLEVBQUMsR0FBRyxRQUFRLENBQUM7UUFDOUIsTUFBTSxJQUFJLEdBQUcsa0JBQWtCLEVBQUUsQ0FBQztRQUNsQyxNQUFNLGNBQWMsR0FBRyxVQUFVLEtBQUssY0FBYyxDQUFDO1FBQ3JELE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEMsTUFBTSxNQUFNLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV0QyxNQUFNLHFCQUFxQixHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1lBQ3BELHFEQUFxRCxDQUFDLENBQUM7WUFDdkQsbUJBQW1CLFdBQVcsQ0FBQyxDQUFDLENBQUMsYUFBYSxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUN0RSxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFFbEIsS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUNqQyxLQUFLLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFO2dCQUNqQyxRQUFRLElBQUk7Z0NBQ1ksR0FBRzt5QkFDVixHQUFHOztZQUVoQixxQkFBcUI7Ozs7aUNBSUEsTUFBTTs7Ozs7Ozs7bUNBUUosTUFBTTs7OztzQkFJbkIsY0FBYzs7MkJBRVQsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHOzs7OzsyQkFLYixHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUc7Ozs7Ozs7U0FPL0IsQ0FBQzthQUNIO1NBQ0Y7UUFFRCxJQUFJLENBQUMsUUFBUSxHQUFHOzs7Ozs7Ozs7VUFTVixRQUFROztVQUVSLElBQUksQ0FBQyxNQUFNOztLQUVoQixDQUFDO0lBQ0osQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge2JhY2tlbmRfdXRpbH0gZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcbmltcG9ydCB7Z2V0R2xzbERpZmZlcmVuY2VzfSBmcm9tICcuL2dsc2xfdmVyc2lvbic7XG5pbXBvcnQge0dQR1BVUHJvZ3JhbSwgdXNlU2hhcGVVbmlmb3Jtc30gZnJvbSAnLi9ncGdwdV9tYXRoJztcblxuZXhwb3J0IGNsYXNzIEltMkNvbFBhY2tlZFByb2dyYW0gaW1wbGVtZW50cyBHUEdQVVByb2dyYW0ge1xuICB2YXJpYWJsZU5hbWVzID0gWydBJ107XG4gIHBhY2tlZElucHV0cyA9IHRydWU7XG4gIHBhY2tlZE91dHB1dCA9IHRydWU7XG4gIG91dHB1dFNoYXBlOiBudW1iZXJbXTtcbiAgdXNlckNvZGU6IHN0cmluZztcbiAgZW5hYmxlU2hhcGVVbmlmb3JtczogYm9vbGVhbjtcbiAgY3VzdG9tVW5pZm9ybXMgPSBbXG4gICAge25hbWU6ICdpbnB1dFNoYXBlJywgdHlwZTogJ2l2ZWM0JyBhcyBjb25zdCB9LFxuICAgIHtuYW1lOiAncGFkJywgdHlwZTogJ2l2ZWMyJyBhcyBjb25zdCB9LFxuICAgIHtuYW1lOiAnc3RyaWRlJywgdHlwZTogJ2l2ZWMyJyBhcyBjb25zdCB9LFxuICAgIHtuYW1lOiAnZGlsYXRpb24nLCB0eXBlOiAnaXZlYzInIGFzIGNvbnN0IH0sXG4gICAge25hbWU6ICdpbkNoYW5uZWxzJywgdHlwZTogJ2ludCcgYXMgY29uc3QgfSxcbiAgICB7bmFtZTogJ2l0ZW1zUGVyQmxvY2tSb3cnLCB0eXBlOiAnaW50JyBhcyBjb25zdCB9LFxuICAgIHtuYW1lOiAnb3V0V2lkdGgnLCB0eXBlOiAnaW50JyBhcyBjb25zdCB9LFxuICBdO1xuXG4gIGNvbnN0cnVjdG9yKG91dHB1dFNoYXBlOiBudW1iZXJbXSwgY29udkluZm86IGJhY2tlbmRfdXRpbC5Db252MkRJbmZvKSB7XG4gICAgdGhpcy5vdXRwdXRTaGFwZSA9IG91dHB1dFNoYXBlO1xuICAgIHRoaXMuZW5hYmxlU2hhcGVVbmlmb3JtcyA9IHVzZVNoYXBlVW5pZm9ybXModGhpcy5vdXRwdXRTaGFwZS5sZW5ndGgpO1xuICAgIGNvbnN0IHtkYXRhRm9ybWF0fSA9IGNvbnZJbmZvO1xuICAgIGNvbnN0IGdsc2wgPSBnZXRHbHNsRGlmZmVyZW5jZXMoKTtcbiAgICBjb25zdCBpc0NoYW5uZWxzTGFzdCA9IGRhdGFGb3JtYXQgPT09ICdjaGFubmVsc0xhc3QnO1xuICAgIGNvbnN0IHJvd0RpbSA9IGlzQ2hhbm5lbHNMYXN0ID8gMSA6IDI7XG4gICAgY29uc3QgY29sRGltID0gaXNDaGFubmVsc0xhc3QgPyAyIDogMztcblxuICAgIGNvbnN0IGJvdW5kc0NoZWNraW5nU25pcHBldCA9IHRoaXMuZW5hYmxlU2hhcGVVbmlmb3JtcyA/XG4gICAgICAgICdpZihibG9ja0luZGV4IDwgb3V0U2hhcGVbMl0gJiYgcG9zIDwgb3V0U2hhcGVbMV0pIHsnIDpcbiAgICAgICAgYGlmKGJsb2NrSW5kZXggPCAke291dHB1dFNoYXBlWzJdfSAmJiBwb3MgPCAke291dHB1dFNoYXBlWzFdfSkge2A7XG4gICAgbGV0IHVucm9sbGVkID0gYGA7XG5cbiAgICBmb3IgKGxldCByb3cgPSAwOyByb3cgPD0gMTsgcm93KyspIHtcbiAgICAgIGZvciAobGV0IGNvbCA9IDA7IGNvbCA8PSAxOyBjb2wrKykge1xuICAgICAgICB1bnJvbGxlZCArPSBgXG4gICAgICAgICAgYmxvY2tJbmRleCA9IHJjLnogKyAke2NvbH07XG4gICAgICAgICAgcG9zID0gcmMueSArICR7cm93fTtcblxuICAgICAgICAgICR7Ym91bmRzQ2hlY2tpbmdTbmlwcGV0fVxuICAgICAgICAgICAgb2Zmc2V0WSA9IGludChibG9ja0luZGV4IC8gb3V0V2lkdGgpICogc3RyaWRlWzBdIC0gcGFkWzBdO1xuICAgICAgICAgICAgZDAgPSBvZmZzZXRZICsgZGlsYXRpb25bMF0gKiAocG9zIC8gaXRlbXNQZXJCbG9ja1Jvdyk7XG5cbiAgICAgICAgICAgIGlmKGQwIDwgaW5wdXRTaGFwZVske3Jvd0RpbX1dICYmIGQwID49IDApIHtcbiAgICAgICAgICAgICAgLy8gVXNlIGN1c3RvbSBpbW9kIGluc3RlYWQgbW9kLiBPbiBJbnRlbCBHUFUsIG1vZCBtYXkgZ2VuZXJhdGVcbiAgICAgICAgICAgICAgLy8gdW5leHBlY3RlZCB2YWx1ZS5cbiAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RlbnNvcmZsb3cvdGZqcy9pc3N1ZXMvNTQ0N1xuICAgICAgICAgICAgICBvZmZzZXRYID0gaW1vZChibG9ja0luZGV4LCBvdXRXaWR0aCkgKiBzdHJpZGVbMV0gLSBwYWRbMV07XG4gICAgICAgICAgICAgIGQxID0gb2Zmc2V0WCArIGRpbGF0aW9uWzFdICogKGltb2QocG9zLCBpdGVtc1BlckJsb2NrUm93KSAvXG4gICAgICAgICAgICAgICAgICBpbkNoYW5uZWxzKTtcblxuICAgICAgICAgICAgICBpZihkMSA8IGlucHV0U2hhcGVbJHtjb2xEaW19XSAmJiBkMSA+PSAwKSB7XG5cbiAgICAgICAgICAgICAgICBjaCA9IGltb2QocG9zLCBpbkNoYW5uZWxzKTtcblxuICAgICAgICAgICAgICAgIGlmICgke2lzQ2hhbm5lbHNMYXN0fSkge1xuICAgICAgICAgICAgICAgICAgaW5uZXJEaW1zID0gdmVjMihkMSwgY2gpO1xuICAgICAgICAgICAgICAgICAgcmVzdWx0WyR7cm93ICogMiArIGNvbH1dID0gZ2V0Q2hhbm5lbChcbiAgICAgICAgICAgICAgICAgICAgZ2V0QShyYy54LCBkMCwgaW50KGlubmVyRGltcy54KSxcbiAgICAgICAgICAgICAgICAgICAgaW50KGlubmVyRGltcy55KSksIGlubmVyRGltcyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGlubmVyRGltcyA9IHZlYzIoZDAsIGQxKTtcbiAgICAgICAgICAgICAgICAgIHJlc3VsdFske3JvdyAqIDIgKyBjb2x9XSA9IGdldENoYW5uZWwoXG4gICAgICAgICAgICAgICAgICAgIGdldEEocmMueCwgY2gsIGludChpbm5lckRpbXMueCksXG4gICAgICAgICAgICAgICAgICAgIGludChpbm5lckRpbXMueSkpLCBpbm5lckRpbXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgYDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnVzZXJDb2RlID0gYFxuICAgICAgdm9pZCBtYWluKCkge1xuICAgICAgICBpdmVjMyByYyA9IGdldE91dHB1dENvb3JkcygpO1xuXG4gICAgICAgIHZlYzQgcmVzdWx0ID0gdmVjNCgwKTtcblxuICAgICAgICBpbnQgYmxvY2tJbmRleCwgcG9zLCBvZmZzZXRZLCBkMCwgb2Zmc2V0WCwgZDEsIGNoO1xuICAgICAgICB2ZWMyIGlubmVyRGltcztcblxuICAgICAgICAke3Vucm9sbGVkfVxuXG4gICAgICAgICR7Z2xzbC5vdXRwdXR9ID0gcmVzdWx0O1xuICAgICAgfVxuICAgIGA7XG4gIH1cbn1cbiJdfQ=="],"names":["GatherProgram","constructor","aShape","outputShape","this","variableNames","rank","length","dtype","sourceCoords","getSourceCoords","userCode","axis","currentCoords","i","push","join","GatherNDProgram","sliceDim","strides","shape","paramsShape","mainLoop","j","getGlslDifferences","version","attribute","varyingVs","varyingFs","texture2D","output","defineOutput","defineSpecialNaN","defineSpecialInf","defineRound","getNumber","getBool","GPGPUContext","gl","outputTexture","program","disposed","itemsToPoll","glVersion","gl2","createVertexArray","bindVertexArray","vao","deleteVertexArray","getVertexArray","getParameter","VERTEX_ARRAY_BINDING","ext","getExtension","Error","createVertexArrayOES","bindVertexArrayOES","deleteVertexArrayOES","VERTEX_ARRAY_BINDING_OES","COLOR_BUFFER_FLOAT","COLOR_BUFFER_HALF_FLOAT","parallelCompilationExtension","TEXTURE_FLOAT","TEXTURE_HALF_FLOAT","textureFloatExtension","textureHalfFloatExtension","get","colorBufferFloatExtension","colorBufferHalfFloatExtension","vertexBuffer","indexBuffer","framebuffer","textureConfig","debug","dispose","console","warn","finish","bindFramebuffer","FRAMEBUFFER","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","deleteBuffer","createFloat32MatrixTexture","rows","columns","throwIfDisposed","createFloat16MatrixTexture","createUnsignedBytesMatrixTexture","uploadPixelDataToTexture","texture","pixels","uploadDenseMatrixToTexture","width","height","data","createFloat16PackedMatrixTexture","createPackedMatrixTexture","deleteMatrixTexture","deleteTexture","downloadByteEncodedFloatMatrixFromOutputTexture","downloadMatrixDriver","downloadPackedMatrixFromBuffer","buffer","batch","physicalRows","physicalCols","downloadFloat32MatrixFromBuffer","size","createBufferFromTexture","bindTextureToFrameBuffer","result","unbindTextureToFrameBuffer","createAndWaitForFence","fenceContext","createFence","pollFence","query","isFencePassed","sync","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","status","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","beginQuery","endQuery","isQueryAvailable","downloadMatrixFromPackedTexture","createProgram","fragmentShader","vertexShader","attachShader","program2","Object","assign","buildVao","setProgram","deleteProgram","useProgram","getUniformLocation","uniformName","shouldThrow","getAttributeLocation","getAttribLocation","getUniformLocationNoThrow","setInputMatrixTexture","inputMatrixTexture","uniformLocation","textureUnit","throwIfNoProgram","setOutputMatrixTexture","outputMatrixTexture","setOutputMatrixTextureDriver","setOutputPackedMatrixTexture","outputPackedMatrixTexture","setOutputMatrixWriteRegion","startRow","numRows","startColumn","numColumns","setOutputMatrixWriteRegionDriver","setOutputPackedMatrixWriteRegion","debugValidate","executeProgram","boundVao","assert","drawElements","TRIANGLES","UNSIGNED_SHORT","blockUntilAllProgramsCompleted","getQueryTimerExtension","disjointQueryTimerExtension","getQueryTimerExtensionWebGL2","getQueryTimerExtensionWebGL1","createQuery","TIME_ELAPSED_EXT","createQueryEXT","beginQueryEXT","endQueryEXT","waitForQueryAndGetTime","getQueryTime","queryTimerVersion","timeElapsedNanos","getQueryParameter","QUERY_RESULT","getQueryObjectEXT","QUERY_RESULT_EXT","available","QUERY_RESULT_AVAILABLE","disjoint","GPU_DISJOINT_EXT","QUERY_RESULT_AVAILABLE_EXT","Promise","resolve","addItemToPoll","pollItems","index","linearSearchLastTrue","map","x","isDoneFn","resolveFn","slice","scheduleFn","platform","setTimeoutCustom","bind","downloadAndDecode","outputMatrixTextureMaybePacked","viewport","scissor","y","arr","isDone","compileProgram","gpgpu","inputs","inputInfos","input","shapeInfo","logicalShape","texShape","isUniform","texData","isPacked","flatOffset","name","inShapeInfos","outShapeInfo","source","webGLProgram","variablesLocations","customUniformLocations","infLoc","nanLoc","outShapeLocation","outShapeStridesLocation","outTexShapeLocation","getUniformLocations","varName","varLocs","uniform","offset","enableShapeUniforms","customUniforms","d","validateBinaryAndProgram","shapeInfos","forEach","s","shapeA","shapeB","texShapeA","texShapeB","runProgram","binary","customUniformValues","outTex","outTexShape","uniform1f","Infinity","NaN","varLoc","varOffsetLoc","varShapeLoc","varTexShapeLoc","uniformShape","packedInputs","uniform1iv","Int32Array","uniform2iv","uniform3iv","uniform4iv","uniform2i","uniformValues","vals","Float32Array","uniform1fv","uniform1i","outShapeLoc","customLoc","customValue","type","uniform2fv","uniform3fv","uniform4fv","makeShaderKey","keyInputs","concat","hasOffset","xTexShape","useSqueezeShape","keptDims","rank1","rank2","rank34","packedTexShape","Math","ceil","xRank","isLogicalShapTexShapeEqual","isScalar","broadcastDims","isInOutTexShapeEqual","isTexShapeGreaterThanOne","keyUserCode","key","useShapeUniforms","createVertexShader","glsl","vertexShaderSource","createVertexBuffer","vertexArray","createIndexBuffer","triangleVertexIndices","Uint16Array","createAndConfigureTexture","internalFormat","textureFormat","textureType","tex2d","TEXTURE_2D","bindTexture","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texImage2D","texStorage2D","getInternalFormatForFloat32MatrixTexture","internalFormatFloat","textureFormatFloat","FLOAT","getInternalFormatForFloat16MatrixTexture","internalFormatHalfFloat","textureTypeHalfFloat","getInternalFormatForUnsignedBytesMatrixTexture","downloadTextureFormat","RGBA","UNSIGNED_BYTE","getInternalFormatForPackedMatrixTexture","internalFormatPackedFloat","getInternalFormatForFloat16PackedMatrixTexture","internalFormatPackedHalfFloat","bindVertexProgramAttributeStreams","posOffset","uvOffset","stride","success","dataForUpload","texelDataType","Uint8Array","set","texSubImage2D","createBufferFromOutputTexture","createBuffer","PIXEL_PACK_BUFFER","bytesPerFloat","valuesPerTexel","bufferSizeBytes","bufferData","STREAM_READ","readPixels","downloadTarget","getBufferSubData","w","h","numChannels","cols","downloadMatrixFromPackedOutputTexture","packedRGBA","Im2ColPackedProgram","convInfo","packedOutput","dataFormat","isChannelsLast","rowDim","colDim","boundsCheckingSnippet","unrolled","row","col"],"sourceRoot":""}