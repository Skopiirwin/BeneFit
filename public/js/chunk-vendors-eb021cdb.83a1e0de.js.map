{"version":3,"file":"js/chunk-vendors-eb021cdb.83a1e0de.js","mappings":";;;;;;;;;;;;;;;;;AAgBA,MAAMA,EAAgB,KACmB,qBAA1BC,sBACAA,sBAEsB,qBAAjBC,aACLA,aAEHC,GAAMA,IAPI,GAmBtB,SAASC,IACL,OAAO,IAAIC,SAAQC,GAAWN,GAAc,IAAMM,OACtD,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CClBA,UAYA,MAAMC,EAAY,CACdC,OAAM,IACNC,KAAI,IACJC,MAAK,IACLC,MAAK,MAET,QAAaJ,E;;;;;;;;;;;;;;;;;ACpBb,SAASK,IACL,MAA4B,qBAAdC,WAA0C,MAAbA,SAC/C,CACA,IAAIC,EACG,SAASC,EAAaC,GACzBF,EAAoBE,CACxB,CACO,SAASC,EAASC,GACrB,QAA0BC,IAAtBL,EACA,OAAOA,EAEX,GAAII,GAAON,IAAuB,CAI9B,GAHKM,IACDA,EAAML,WAEU,gBAAhBK,EAAIE,QACJ,OAAO,EAEX,MAAMC,EAAIH,EAAII,WAAaJ,EAAIK,SAER,qBAAXC,OAAyBA,OAAOC,MAAQ,IAEpD,IAAKJ,EAAG,CAEJ,MAAMK,EAASR,EACf,OAAOQ,EAAOC,eAAiBD,EAAOC,cAAcC,MACxD,CAEA,MAAO,2TACFC,KAAKR,IAEN,0kDACKQ,KAAKR,EAAES,OAAO,EAAG,GAC9B,CACA,OAAO,CACX,CACO,SAASC,IACZ,MAA0B,qBAAXP,QAA6C,MAAnBA,OAAOQ,UAEd,qBAAtBC,iBAChB,C;;;;;;;;;;;;;;;;;AC7BA,SAASC,EAA6BC,GAClC,OAAsC,MAA/BA,EAAiBC,UAC5B,CACA,MAAMC,EACF,WAAAC,GAEIC,KAAKC,oBAAsB,CAAC,EAC5BD,KAAKE,eAAiB,EACtBF,KAAKG,SAAW,EAChBH,KAAKI,WAAa,EAClBJ,KAAKK,iBAAmB,EACxBL,KAAKM,eAAiB,EAItBN,KAAKO,cAAgB,EAGrBP,KAAKQ,YAAc,EACnBR,KAAKS,WAAa,GAKlBT,KAAKU,kBAAoB,GACzBV,KAAKW,YAAc,EACnBX,KAAKY,WAAa,IAAIC,QACtBb,KAAKc,WAAY,EACjBd,KAAKe,cAAgB,CACjBC,SAAU,EACVC,WAAY,EACZC,UAAW,EACXC,QAAS,GACTC,OAAQ,KACR,eAAIC,GACA,OAAOC,MAAMC,KAAK,IAAIC,IAAIxB,KAAKmB,QAAQM,KAAIC,GAAKA,EAAEC,QACtD,EAER,CACA,OAAAC,GACI,IAAK,MAAMC,KAAgB7B,KAAKC,oBAC5BD,KAAKC,oBAAoB4B,GAAcD,SAE/C,EAEJ,MAAME,EACF,WAAA/B,CAAYgC,GACR/B,KAAK+B,IAAMA,EACX/B,KAAKgC,SAAW,CAAC,EACjBhC,KAAKiC,gBAAkB,CAAC,EACxBjC,KAAKkC,qBAAuB,EAC5BlC,KAAKmC,MAAQ,IAAIrC,CACrB,CACA,WAAMsC,GACF,GAA+B,MAA3BpC,KAAKqC,mBACL,OAAOrC,KAAKqC,mBAAmBC,MAAK,SAExC,GAA4B,MAAxBtC,KAAKuC,gBACL,OAEJ,MAAMC,EAAiBxC,KAAKyC,oBAC5B,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAeG,OAAQD,IAAK,CAC5C,MAAME,EAAcJ,EAAeE,GAC7BG,QAAgB7C,KAAK8C,kBAAkBF,GAAaC,QAC1D,GAAIA,EAEA,kBADM7C,KAAK+C,WAAWH,EAG9B,CACA,MAAM,IAAII,MAAM,yEAEpB,CACA,WAAIC,GACA,GAA+B,MAA3BjD,KAAKqC,mBACL,MAAM,IAAIW,MAAM,YAAYhD,KAAK4C,kIAIrC,GAA4B,MAAxB5C,KAAKuC,gBAAyB,CAC9B,MAAM,KAAEZ,EAAI,UAAEuB,GAAclD,KAAKmD,kCACjC,GAAID,EACA,MAAM,IAAIF,MAAM,iCAAiCrB,wHAIrD3B,KAAK+C,WAAWpB,EACpB,CACA,OAAO3B,KAAKuC,eAChB,CACA,YAAAa,GACI,OAAOC,OAAOC,KAAKtD,KAAKiC,gBAC5B,CACA,WAAAsB,CAAYX,GACR,KAAMA,KAAe5C,KAAKgC,UAAW,CAGjC,KAAIY,KAAe5C,KAAKiC,iBAQpB,OAAO,KAR8B,CACrC,MAAM,UAAEiB,GAAclD,KAAK8C,kBAAkBF,GAC7C,GAAIM,EAEA,OAAO,IAEf,CAIJ,CACA,OAAOlD,KAAKgC,SAASY,EACzB,CACA,kBAAAY,CAAmBZ,GACf,OAAMA,KAAe5C,KAAKiC,gBAGnBjC,KAAKiC,gBAAgBW,GAAaa,QAF9B,IAGf,CACA,eAAAC,CAAgBd,EAAaa,EAASE,EAAW,GAC7C,OAAIf,KAAe5C,KAAKiC,iBACpB,IAAS,GAAGW,wEAEL,IAEX5C,KAAKiC,gBAAgBW,GAAe,CAAEa,UAASE,aACxC,EACX,CACA,gBAAMZ,CAAWH,GACb,GAAyC,MAArC5C,KAAKiC,gBAAgBW,GACrB,MAAM,IAAII,MAAM,iBAAiBJ,4BAGrC,GADA5C,KAAK4C,YAAcA,EACe,MAA9B5C,KAAKgC,SAASY,GAAsB,CACpC5C,KAAKuC,gBAAkB,KACvB,MAAM,QAAEM,EAAO,UAAEK,GAAclD,KAAK8C,kBAAkBF,GAChDxB,EAAS8B,QAAkBL,EAAUA,EAC3C,IAAKzB,EACD,OAAO,CAEf,CAKA,OAJApB,KAAKuC,gBAAkBvC,KAAKgC,SAASY,GACrC5C,KAAK4D,yBAEL5D,KAAK6D,SAAW,IAAI,KAAS7D,KAAKuC,kBAC3B,CACX,CACA,sBAAAqB,GACI,MAAMzC,GAAU,QAAqBnB,KAAK4C,aAC1CzB,EAAQ2C,SAAQC,IACY,MAApBA,EAAOC,WACPD,EAAOC,UAAUhE,KAAKuC,gBAC1B,GAER,CACA,wBAAA0B,CAAyBrB,GACrB,MAAMzB,GAAU,QAAqByB,GACrCzB,EAAQ2C,SAAQC,IACc,MAAtBA,EAAOG,aACPH,EAAOG,YAAYlE,KAAKgC,SAASY,GACrC,GAER,CAOA,iBAAAE,CAAkBF,GACd,MAAMuB,EAAuBnE,KAAKiC,gBAAgBW,GAClD,GAA4B,MAAxBuB,EACA,MAAM,IAAInB,MAAM,6BAA6BJ,6BAEjD,IACI,MAAMK,EAAUkB,EAAqBV,UAMrC,IAAIR,GAAaA,aAAmB,MACR,oBAAjBA,EAAQX,KA2Bf,OADAtC,KAAKgC,SAASY,GAAeK,EACtB,CAAEJ,SAAS,EAAMK,WAAW,GA3BC,CACpC,MAAMkB,IAAcpE,KAAKkC,qBACnBW,EAAUI,EACXX,MAAKC,KAEF6B,EAAYpE,KAAKkC,wBAGrBlC,KAAKgC,SAASY,GAAeL,EAC7BvC,KAAKqC,mBAAqB,MACnB,KAENgC,OAAMC,IAEHF,EAAYpE,KAAKkC,uBAGrBlC,KAAKqC,mBAAqB,KAC1B,IAAS,6BAA6BO,YACtC,IAAS0B,EAAIC,OAASD,EAAIE,WAJf,KAQf,OADAxE,KAAKqC,mBAAqBQ,EACnB,CAAEA,UAASK,WAAW,EACjC,CAKJ,CACA,MAAOoB,GAGH,OAFA,IAAS,6BAA6B1B,YACtC,IAAS0B,EAAIC,OAASD,EAAIE,SACnB,CAAE3B,SAAS,EAAOK,WAAW,EACxC,CACJ,CACA,aAAAuB,CAAc7B,GACV,KAAMA,KAAe5C,KAAKiC,iBACtB,MAAM,IAAIe,MAAM,GAAGJ,mCAEnB5C,KAAK4C,cAAgBA,GAA0C,MAA3B5C,KAAKqC,oBAGzCrC,KAAKkC,uBAELU,KAAe5C,KAAKgC,WACpBhC,KAAKiE,yBAAyBrB,GAC9B5C,KAAKgC,SAASY,GAAahB,iBACpB5B,KAAKgC,SAASY,WAElB5C,KAAKiC,gBAAgBW,GAExB5C,KAAK4C,cAAgBA,IACrB5C,KAAKqC,mBAAqB,KAC1BrC,KAAK4C,YAAc,KACnB5C,KAAKuC,gBAAkB,KAE/B,CACA,iBAAAE,GACI,GAAiD,IAA7CY,OAAOC,KAAKtD,KAAKiC,iBAAiBU,OAClC,MAAM,IAAIK,MAAM,iCAEpB,OAAOK,OAAOC,KAAKtD,KAAKiC,iBAAiByC,MAAK,CAAC5F,EAAG6F,IAEvC3E,KAAKiC,gBAAgB0C,GAAGhB,SAC3B3D,KAAKiC,gBAAgBnD,GAAG6E,UAEpC,CACA,+BAAAR,GACI,MAAMX,EAAiBxC,KAAKyC,oBAC5B,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAeG,OAAQD,IAAK,CAC5C,MAAME,EAAcJ,EAAeE,IAC7B,QAAEG,EAAO,UAAEK,GAAclD,KAAK8C,kBAAkBF,GACtD,GAAIM,GAAaL,EACb,MAAO,CAAElB,KAAMiB,EAAaM,YAEpC,CACA,MAAM,IAAIF,MAAM,yEAEpB,CACA,QAAA4B,CAAS3B,EAAS4B,GACd,MAAMC,EAAO9E,KAAKmC,MAAMvB,WAAWmE,IAAIF,GACjCG,EAAaF,EAAK7B,QAClBgC,EAASjF,KAAKkF,SAASL,GACvBM,EAAWH,EAAWG,SAASN,GAGrCG,EAAWI,YAAYP,GAAQ,GAC/BC,EAAK7B,QAAUA,EACfA,EAAQoC,KAAKR,EAAQI,EAAQH,EAAKQ,MAAOR,EAAKS,MAAOJ,GACjDnF,KAAKwF,0BAGLxF,KAAKmC,MAAMzB,kBAAkBV,KAAKmC,MAAMzB,kBAAkBiC,OAAS,IAE3E,CACA,IAAA8C,CAAKC,EAAUC,GACX,IAsBIvE,EAtBAO,EAAO,KACX,GAAU,MAANgE,EAAY,CAEZ,GAAwB,oBAAbD,EACP,MAAM,IAAI1C,MAAM,uCAEpB2C,EAAKD,CACT,KACK,CAED,GAAwB,kBAAbA,KAA2BA,aAAoBE,QACtD,MAAM,IAAI5C,MAAM,kFAGpB,GAAkB,oBAAP2C,EACP,MAAM,IAAI3C,MAAM,kFAGpBrB,EAAO+D,CAGX,CAEA,OAAO1F,KAAK6F,WAAU,IAAM7F,KAAK8F,WAAWnE,KAAO,IAAM3B,KAAK+F,SAAS3E,KAAS,KAC5EA,EAASuE,IACLvE,aAAkBtD,SAClBkI,QAAQC,MAAM,2CAEX7E,IAEf,CACA,SAAAyE,CAAUK,EAAOC,EAAKvI,GAClBsI,IACA,IACI,MAAME,EAAMxI,IAEZ,OADAuI,IACOC,CACX,CACA,MAAOC,GAEH,MADAF,IACME,CACV,CACJ,CACA,YAAAC,GACI,OAAOxE,EAAOwE,cAClB,CACA,cAAAC,GACI,OAAOzE,EAAOyE,gBAClB,CAOA,KAAApI,CAAMqI,GACF,MAAMC,EAAIC,EAAOC,UAAU,MAAU,CAAEH,MACjCI,EAAS,CAAEJ,KACXK,EAAQC,IAAO,CACjBN,EAAG,KACC,MAAMjB,EAAQ,UACRwB,EAAa,CAAEP,EAAGM,GAClBE,EAAQ,CAAEzB,SAChB,OAAOmB,EAAOC,UAAU,MAAMI,EAE9BC,EAAM,IAGRC,EAAQ,GAEd,OADAjH,KAAKkH,YAAYlH,KAAKmC,MAAMgF,YAAYxF,KAAMiF,EAAQ,CAACH,GAAII,EAAMI,EAAO,CAAC,GAClER,CACX,CAcA,SAAAE,CAAU9G,EAAY+G,EAAQI,GACF,MAApBhH,KAAK4C,aAML5C,KAAKiD,QAET,MAAMmE,EAAuD,OAA3C,QAAUvH,EAAYG,KAAK4C,aAC7C,IAAKwE,EACD,MAAM,IAAIpE,MAAM,WAAWnD,kCAA2CG,KAAK4C,gBAE/E,OAAO5C,KAAKqH,cAAc,CAAExH,aAAY+G,SAAQI,SACpD,CACA,sBAAAxB,GACI,OAAOxF,KAAK+B,IAAIuF,QAAQ,UAC5B,CACA,qBAAAC,CAAsB1H,EAAY2H,EAAkBC,GAChD,MAAMC,EAAkB1H,KAAKiD,QAAQ0E,aAErC,IAAIC,EAAmB,EACvBH,EAAS3D,SAAQgB,IAGb8C,GAAoC,cAAf9C,EAAKS,MAAwB,EAAI,CAAE,IAO5D,MAAMsC,EAAW7H,KAAKmC,MAAMzB,kBAAkBV,KAAKmC,MAAMzB,kBAAkBiC,OAAS,GAC9EmF,EAAgBJ,EAAkBF,EAAmBI,EAAmBC,EAC9E,GAAIC,EAAgB,EAChB,MAAM,IAAI9E,MAAM,YAAYhD,KAAK4C,6CACzBkF,8BAA0CjI,KAE1D,CAMA,aAAAwH,CAAcU,GACV,IAAIC,EACAf,EAAQ,GACZ,MAAMgB,EAAWjI,KAAKiI,WAChBC,EAAoBlI,KAAKmC,MAAMhC,SAC/BgI,EAAqBnI,KAAKmC,MAAM/B,WAItC,IAAIgI,EASAC,EAZArI,KAAKwF,0BACLxF,KAAKmC,MAAMzB,kBAAkB4H,KAAK,GAGd,MAApBtI,KAAK4C,aAML5C,KAAKiD,QAGT,MAAMsF,EAAoB5I,EAA6BoI,GACnDA,EAAalI,WACa,MAA1BG,KAAKmC,MAAMgF,YAAsBnH,KAAKmC,MAAMgF,YAAYxF,KAAO,GAInE,GAAIhC,EAA6BoI,GAAe,CAC5C,MAAM,WAAElI,EAAU,OAAE+G,EAAM,MAAEI,GAAUe,EACd,MAApB/H,KAAK4C,aAML5C,KAAKiD,QAET,MAAMc,GAAS,QAAUlE,EAAYG,KAAK4C,aAC1C,KAAsB,MAAVmB,GAAgB,IAAM,kCAAkClE,mBAA4BG,KAAK4C,iBACrGwF,EAAa,KACT,MAAMZ,EAAmBxH,KAAKiD,QAAQ0E,aACtCU,EAAMtE,EAAOqE,WAAW,CAAExB,SAAQI,QAAO/D,QAASjD,KAAKiD,UACvD,MAAMwE,EAAWnG,MAAMkH,QAAQH,GAAOA,EAAM,CAACA,GACzCrI,KAAKwF,0BACLxF,KAAKuH,sBAAsB1H,EAAY2H,EAAkBC,GAE7D,MAAMgB,EAAahB,EAAShG,KAAKiH,GAIT,MAAhBA,EAAQC,KACDD,EAEJ1I,KAAK4I,yBAAyBF,KAMzC,GAAIT,EAAU,CACV,MAAMY,EAAgB7I,KAAK8I,sBAAsBjJ,EAAY+G,EAAQ6B,GACrExB,EAAQjH,KAAK+I,2BAA2BF,EAC5C,CACA,OAAOJ,CAAU,CAEzB,KACK,CACD,MAAM,YAAEO,GAAgBjB,EAElBkB,EAAYC,IAITjB,IAGLhB,EAAQiC,EAAQzH,KAAI0H,GAAUnJ,KAAKoJ,KAAKpJ,KAAK7B,MAAMgL,MAAS,EAEhEf,EAAa,KACT,MAAMZ,EAAmBxH,KAAKiD,QAAQ0E,aACtCU,EAAMrI,KAAKyF,MAAK,IAAMuD,EAAYhJ,KAAKiD,QAASgG,KAChD,MAAMI,EAAQ/H,MAAMkH,QAAQH,GAAOA,EAAM,CAACA,GAK1C,OAJIrI,KAAKwF,0BAELxF,KAAKuH,sBAAsBgB,EAAmBf,EAAkB6B,GAE7DA,CAAI,CAEnB,CAIA,MAAM,OAAEzC,EAAM,MAAEI,GAAUe,EACpBuB,EAAgB3J,EAA6BoI,GAC/C,KACAA,EAAauB,cACjB,IAAIC,EA+BJ,OA9BAvJ,KAAK6F,WAEL,IAAM7F,KAAKmC,MAAM3B,gBAAe,IAAMR,KAAKmC,MAAM3B,gBAAe,KACvDR,KAAK+B,IAAIuF,QAAQ,UAAatH,KAAKmC,MAAMrB,WAI1CyI,EAAgBvJ,KAAK6D,SAAS2F,cAAcjB,EAAmB3B,GAAQ,IAAMwB,MACzEpI,KAAK+B,IAAIuF,QAAQ,UACjBtH,KAAK6D,SAAS4F,iBAAiBF,GAEnCvB,EAAUuB,EAAcvB,SAPxBA,EAAUI,GAQd,IAEAH,GACAjI,KAAKkH,YAAYqB,EAAmB3B,EAAQoB,EAASsB,EAAerC,EAAOD,GAE3EhH,KAAKmC,MAAMrB,WACXd,KAAKmC,MAAMpB,cAAcI,QAAQmH,KAAK,CAClC3G,KAAM4G,EACNmB,WAAY1J,KAAKmC,MAAMhC,SAAW+H,EAClCyB,mBAAoB3J,KAAKmC,MAAMhC,SAC/ByJ,aAAc5J,KAAKmC,MAAM/B,WAAa+H,EACtC0B,qBAAsB7J,KAAKmC,MAAM/B,WACjC0J,YAAazG,OAAOC,KAAKsD,GAAQnF,KAAIsI,GAAsB,MAAfnD,EAAOmD,GAAenD,EAAOmD,GAAKzE,MAAQ,OACtF0E,aAAchC,EAAQvG,KAAIwI,GAAQA,EAAK3E,QACvC4E,aAAcX,EAAcY,OAC5BC,UAAWb,EAAca,YAGzB9I,MAAMkH,QAAQH,GAAOL,EAAUA,EAAQ,EACnD,CAMA,0BAAAe,CAA2BG,GACvB,MAAMjC,EAAQiC,EAAQzH,KAAI0H,GAAUnJ,KAAKoJ,KAAKpJ,KAAK7B,MAAMgL,MACzD,OAAOlC,CACX,CAQA,qBAAA6B,CAAsBjJ,EAAY+G,EAAQoB,GACtC,MAAMqC,GAAa,QAAYxK,GAC/B,GAAkB,MAAdwK,EAAoB,CACpB,MAAMC,EAAeD,EAAWC,cAAgB,GAC1CC,EAAgBF,EAAWE,eAAiB,GAGlD,IAAIC,EACAH,EAAWI,eACX,KAAYnJ,MAAMkH,QAAQ5B,IAAS,IAAM,2DACzC4D,EAAqBnH,OAAOC,KAAKsD,GAAQnF,KAAKsI,GAAQnD,EAAOmD,MAG7DS,EAAqBF,EAAa7I,KAAKiJ,GAAc9D,EAAO8D,KAEhE,MAAMC,EAAsB3C,EAAQ4C,QAAO,CAACC,EAAGnI,IAAM6H,EAAc7H,KACnE,OAAO8H,EAAmBM,OAAOH,EACrC,CAOA,MAAO,EACX,CAMA,UAAAI,CAAW9F,EAAQK,EAAOC,EAAOtC,GAC7B,GAAc,MAAVgC,EACA,MAAM,IAAIjC,MAAM,iDAEpBuC,EAAQA,GAAS,UACjBtC,EAAUA,GAAWjD,KAAKiD,QAC1B,IAAI+H,EAAc/F,EACJ,WAAVM,GAAsB,KAAcN,EAAO,MAC3C+F,EAAc/F,EAAOxD,KAAIwJ,GAAK,eAAkBA,MAEpD,MAAMpG,EAAS5B,EAAQiI,MAAMF,EAAa1F,EAAOC,GAC3C4F,EAAI,IAAI,KAAO7F,EAAOC,EAAOV,EAAQ7E,KAAKsG,gBAGhD,GAFAtG,KAAKoL,YAAYD,EAAGlI,GAEN,WAAVsC,EAAoB,CACpB,MAAMT,EAAO9E,KAAKmC,MAAMvB,WAAWmE,IAAIF,GACjC7D,GAAW,QAAqBgK,GACtChL,KAAKmC,MAAMhC,UAAYa,EAAW8D,EAAKuG,MACvCvG,EAAKuG,MAAQrK,CACjB,CACA,OAAOmK,CACX,CAOA,oBAAAG,CAAqBzG,EAAQS,EAAOC,EAAOtC,GACvCsC,EAAQA,GAAS,UACjB,MAAM3E,EAAa,CAAEiE,SAAQS,QAAOC,SACpC,OAAOvF,KAAK4I,yBAAyBhI,EAAYqC,EACrD,CAMA,wBAAA2F,CAAyBhI,EAAYqC,GACjC,MAAM,OAAE4B,EAAM,MAAES,EAAK,MAAEC,GAAU3E,EAC3BuK,EAAI,IAAI,KAAO7F,EAAOC,EAAOV,EAAQ7E,KAAKsG,gBAEhD,OADAtG,KAAKoL,YAAYD,EAAGlI,GACbkI,CACX,CACA,YAAAI,CAAaC,EAAcC,GAAY,EAAM9J,EAAM4D,GAC/C5D,EAAOA,GAAQ3B,KAAKuG,iBAAiBmF,WACxB,MAATnG,GAAiBA,IAAUiG,EAAajG,QACxCiG,EAAeA,EAAatN,KAAKqH,IAErC,MAAMoG,EAAI,IAAI,KAASH,EAAcC,EAAW9J,EAAM3B,KAAKsG,gBAC3D,GAA8C,MAA1CtG,KAAKmC,MAAMlC,oBAAoB0L,EAAEhK,MACjC,MAAM,IAAIqB,MAAM,sBAAsB2I,EAAEhK,+BAI5C,OAFA3B,KAAKmC,MAAMlC,oBAAoB0L,EAAEhK,MAAQgK,EACzC3L,KAAK4L,OAAOD,EAAG3L,KAAKiD,SACb0I,CACX,CACA,WAAAP,CAAYtM,EAAGmE,GACXjD,KAAKmC,MAAM/B,aACK,WAAZtB,EAAEyG,OACFvF,KAAKmC,MAAM9B,mBAIf,IAAIgL,EAAQ,EACI,cAAZvM,EAAEyG,OAAqC,WAAZzG,EAAEyG,QAC7B8F,EAAQvM,EAAE+M,KAAO,KAAqB/M,EAAEyG,QAE5CvF,KAAKmC,MAAMhC,UAAYkL,EAClBrL,KAAKmC,MAAMvB,WAAWkL,IAAIhN,EAAE+F,UAC7B7E,KAAKmC,MAAM7B,iBACXN,KAAKmC,MAAMvB,WAAWmL,IAAIjN,EAAE+F,OAAQ,CAChC5B,QAASA,GAAWjD,KAAKiD,QACzBsC,MAAOzG,EAAEyG,MACTD,MAAOxG,EAAEwG,MACT+F,WAGFvM,aAAa,MACfkB,KAAKgM,MAAMlN,EAEnB,CAMA,MAAA8M,CAAO9M,EAAGmE,GACNjD,KAAKoL,YAAYtM,EAAGmE,GACpBjD,KAAKiD,QAAQ2I,OAAO9M,EAAE+F,OAC1B,CACA,YAAAoH,CAAapH,EAAQ5B,GACbjD,KAAKmC,MAAMvB,WAAWkL,IAAIjH,IAC1B7E,KAAKmC,MAAMvB,WAAWmE,IAAIF,GAAQ5B,UAAYA,IAC9CjD,KAAKmC,MAAMvB,WAAWsL,OAAOrH,GAC7B7E,KAAKmC,MAAM7B,iBAEnB,CACA,aAAA6L,CAAcrN,GACV,IAAKkB,KAAKmC,MAAMvB,WAAWkL,IAAIhN,EAAE+F,QAC7B,OAEJ,MAAMC,EAAO9E,KAAKmC,MAAMvB,WAAWmE,IAAIjG,EAAE+F,QAQzC,GAPA7E,KAAKmC,MAAM/B,aACK,WAAZtB,EAAEyG,QACFvF,KAAKmC,MAAM9B,mBACXL,KAAKmC,MAAMhC,UAAY2E,EAAKuG,OAIhB,cAAZvM,EAAEyG,OAAqC,WAAZzG,EAAEyG,MAAoB,CACjD,MAAM8F,EAAQvM,EAAE+M,KAAO,KAAqB/M,EAAEyG,OAC9CvF,KAAKmC,MAAMhC,UAAYkL,CAC3B,CAEIvG,EAAK7B,QAAQmC,YAAYtG,EAAE+F,SAC3B7E,KAAKiM,aAAanN,EAAE+F,OAAQC,EAAK7B,QAKzC,CACA,gBAAAmJ,GACI,IAAK,MAAMC,KAAWrM,KAAKmC,MAAMlC,oBAAqB,CAClD,MAAM0L,EAAI3L,KAAKmC,MAAMlC,oBAAoBoM,GACzCrM,KAAKsM,gBAAgBX,EACzB,CACJ,CACA,eAAAW,CAAgBX,GACZ3L,KAAKmM,cAAcR,GAC2B,MAA1C3L,KAAKmC,MAAMlC,oBAAoB0L,EAAEhK,cAC1B3B,KAAKmC,MAAMlC,oBAAoB0L,EAAEhK,KAEhD,CACA,MAAA4K,GACI,MAAMzH,EAAO9E,KAAKiD,QAAQsJ,SAY1B,OAXAzH,EAAK1E,WAAaJ,KAAKmC,MAAM/B,WAC7B0E,EAAKxE,eAAiBN,KAAKmC,MAAM7B,eACjCwE,EAAK3E,SAAWH,KAAKmC,MAAMhC,SACvBH,KAAKmC,MAAM9B,iBAAmB,IAC9ByE,EAAK0H,YAAa,EACE,MAAhB1H,EAAK2H,UACL3H,EAAK2H,QAAU,IAEnB3H,EAAK2H,QAAQnE,KAAK,0EAGfxD,CACX,CACA,aAAM4H,CAAQC,GACV3M,KAAKmC,MAAMrB,WAAY,EACvB,MAAM8L,EAAa5M,KAAKmC,MAAMhC,SACxB0M,EAAkB7M,KAAKmC,MAAM/B,WACnCJ,KAAKmC,MAAMpB,cAAcI,QAAU,GACnCnB,KAAKmC,MAAMpB,cAAcK,aAAeuL,IACxC3M,KAAKmC,MAAMrB,WAAY,EACvBd,KAAKmC,MAAMpB,cAAcG,UAAY4L,KAAKC,OAAO/M,KAAKmC,MAAMpB,cAAcI,QAAQM,KAAIwJ,GAAKA,EAAEtB,sBAC7F3J,KAAKmC,MAAMpB,cAAcC,SAAWhB,KAAKmC,MAAMhC,SAAWyM,EAC1D5M,KAAKmC,MAAMpB,cAAcE,WACrBjB,KAAKmC,MAAM/B,WAAayM,EAC5B,IAAK,MAAM9I,KAAU/D,KAAKmC,MAAMpB,cAAcI,QAC1C4C,EAAOmG,mBAAqBnG,EAAOmG,aACnCnG,EAAOqG,gBAAkBrG,EAAOqG,UAEpC,OAAOpK,KAAKmC,MAAMpB,aACtB,CACA,QAAAkH,GACI,OAAOjI,KAAKmC,MAAM5B,cAAgB,GAAgC,IAA3BP,KAAKmC,MAAM3B,WACtD,CACA,WAAA0G,CAAYrH,EAAY+G,EAAQoB,EAASgF,EAAe/F,EAAOD,GAC3D,MAAMiG,EAAW,CAAEC,GAAIlN,KAAKmC,MAAMjC,iBAAkBL,aAAY+G,SAAQoB,UAASf,SAC3EoD,GAAa,QAAYxK,GACb,MAAdwK,IACA2C,EAAgB3C,EAAW8C,UAEV,MAAjBH,IACAC,EAASG,SAAYC,IAGjBA,EAAMA,EAAI5L,KAAI,CAACqF,EAAIpE,KACf,GAAU,MAANoE,EAAY,CACZ,MAAMwG,EAAStF,EAAQtF,GACjB6K,EAAO,KAAyBD,EAAOzB,KAAMyB,EAAO/H,OAC1D,OAAOvF,KAAK+K,WAAWwC,EAAMD,EAAOhI,MAAOgI,EAAO/H,MACtD,CACA,OAAOuB,CAAE,IAINkG,EAAcK,EAAI1K,OAAS,EAAI0K,EAAMA,EAAI,GAAIpG,EAAOD,KAGnEhH,KAAKmC,MAAMqL,WAAWlF,KAAK2E,EAC/B,CACA,IAAA7D,CAAKhI,GAED,OADAA,EAAOqM,MAAO,EACPrM,CACX,CACA,SAAAsM,GACqC,IAA7B1N,KAAKmC,MAAM5B,gBACXP,KAAKmC,MAAMqL,WAAa,IAE5BxN,KAAKmC,MAAM5B,eACf,CACA,OAAAoN,GACI3N,KAAKmC,MAAM5B,eACf,CAKA,UAAAuF,CAAWnE,GACP,MAAMiM,EAAY,CACd5B,MAAO,GACPrK,KAAM,gBACNuL,GAAIlN,KAAKmC,MAAMxB,eAEfgB,IACAiM,EAAUjM,KAAOA,GAErB3B,KAAKmC,MAAM1B,WAAW6H,KAAKsF,GAC3B5N,KAAKmC,MAAMgF,YAAcyG,CAC7B,CAKA,QAAA7H,CAAS3E,GACL,MAAMyM,GAAyB,QAAsBzM,GAC/C0M,EAA4B,IAAItM,IAAIqM,EAAuBpM,KAAI0J,GAAKA,EAAE+B,MAE5E,IAAK,IAAIxK,EAAI,EAAGA,EAAI1C,KAAKmC,MAAMgF,YAAY6E,MAAMrJ,OAAQD,IAAK,CAC1D,MAAMyG,EAASnJ,KAAKmC,MAAMgF,YAAY6E,MAAMtJ,GACvCyG,EAAOsE,MAASK,EAA0BhC,IAAI3C,EAAO+D,KACtD/D,EAAOvH,SAEf,CACA,MAAMmM,EAAW/N,KAAKmC,MAAM1B,WAAWuN,MACvChO,KAAKmC,MAAMgF,YAA+C,IAAjCnH,KAAKmC,MAAM1B,WAAWkC,OAC3C,KACA3C,KAAKmC,MAAM1B,WAAWT,KAAKmC,MAAM1B,WAAWkC,OAAS,GAEzDkL,EAAuB/J,SAAQqF,IAGtBA,EAAOsE,MAAQtE,EAAO8E,UAAYF,EAASb,IAC5ClN,KAAKgM,MAAM7C,EACf,GAER,CAOA,SAAA+E,CAAUtQ,EAAGuQ,EAAIrH,EAAIsH,GAAmB,GAEpC,GADA,KAAYD,EAAGxL,OAAS,GAAG,IAAM,8CACvB,MAANmE,GAA2B,YAAbA,EAAGvB,MACjB,MAAM,IAAIvC,MAAM,0CAA0C8D,EAAGvB,UAEjE,MAAMkB,EAAIzG,KAAK6F,WAAU,IAAM7F,KAAK0N,cAAa,IAAM1N,KAAK2N,YAAW,IAAM3N,KAAKyF,KAAK,UAAW7H,KAClG,KAAY6I,aAAa,MAAQ,IAAM,mDAEvC,MAAM4H,GAAe,OAAqBrO,KAAKmC,MAAMqL,WAAYW,EAAI1H,GACrE,IAAK2H,GAA4C,IAAxBC,EAAa1L,QAAgBwL,EAAGxL,OAAS,EAC9D,MAAM,IAAIK,MAAM,uIAIpB,OAAOhD,KAAKyF,KAAK,YAAY,KACzB,MAAM6I,EAAyB,CAAC,EAChCA,EAAuB7H,EAAEyG,IAAa,MAANpG,EAAcyH,EAAK9H,EAAEnB,OAASwB,GAE9D,OAAuBwH,EAAwBD,GAE/CzQ,GAAKoC,KAAKyF,KAAK7H,IAEf4Q,GACA,MAAMC,EAAQN,EAAG1M,KAAI+E,GAAK8H,EAAuB9H,EAAE0G,MAWnD,OAViC,IAA7BlN,KAAKmC,MAAM5B,gBAGXP,KAAKmC,MAAMqL,WAAW1J,SAAQ4K,IAC1B,IAAK,MAAMvF,KAAUuF,EAAKzH,MACtBkC,EAAOvH,SACX,IAEJ5B,KAAKmC,MAAMqL,WAAa,MAErB,CAAE/O,MAAOgI,EAAGgI,QAAO,GAElC,CACA,UAAAE,CAAW/Q,GAEP,OADA,KAAY,KAAgBA,IAAI,IAAM,sDAC/B,IAAIgJ,KAGP,IAAIR,EAFJ,KAAYQ,EAAOgI,OAAMzD,GAAKA,aAAa,QAAS,IAAM,qEAG1D,MAAM0D,EAAW,CAAC,EAClBjI,EAAO9C,SAAQ,CAACgL,EAAOpM,KACnBmM,EAASnM,GAAKoM,CAAK,IAEvB,MAAM9F,EAAc,CAAC6B,EAAGkE,KACpB3I,EAAMxI,KAASgJ,EAAQmI,GACvB,KAAY3I,EAAI3H,iBAAiB,MAAQ,IAAM,+FAE/C,KAAY,KAAgB2H,EAAI+G,WAAW,IAAM,qGAE1C/G,EAAI3H,OAET6K,EAAgB,CAACxC,EAAIG,KACvB,MAAM+H,EAAU5I,EAAI+G,SAASrG,EAAIG,GAC3BwH,EAAQnN,MAAMkH,QAAQwG,GAAWA,EAAU,CAACA,GAClD,KAAYP,EAAM9L,SAAWiE,EAAOjE,QAAQ,IAAM,wKAGlD,KAAY8L,EAAMG,OAAMzD,GAAKA,aAAa,QAAS,IAAM,yIAGzD,MAAM8D,EAAU,CAAC,EAIjB,OAHAR,EAAM3K,SAAQ,CAAC+C,EAAMnE,KACjBuM,EAAQvM,GAAK,IAAMmE,CAAI,IAEpBoI,CAAO,EAElB,OAAOjP,KAAKqH,cAAc,CACtB2B,cACAM,gBACA1C,OAAQiI,GACV,CAEV,CACA,QAAA3J,CAASL,GAEL,MAAMC,EAAO9E,KAAKmC,MAAMvB,WAAWmE,IAAIF,GACvC,OAAOC,EAAK7B,QAAQiC,SAASL,EACjC,CACA,IAAAqK,CAAKrK,GAED,MAAMC,EAAO9E,KAAKmC,MAAMvB,WAAWmE,IAAIF,GACvC,OAAOC,EAAK7B,QAAQiM,KAAKrK,EAC7B,CACA,SAAAsK,CAAUtK,EAAQuK,GAEd,MAAMtK,EAAO9E,KAAKmC,MAAMvB,WAAWmE,IAAIF,GACvC,OAAOC,EAAK7B,QAAQkM,UAAUtK,EAAQuK,EAC1C,CACA,UAAMC,CAAK1C,GACP,MAAMzG,GAAQ,IAAAoJ,OACRC,QAAmBvP,KAAKiD,QAAQoM,KAAK1C,GAE3C,OADA4C,EAAWC,QAAS,IAAAF,OAAQpJ,EACrBqJ,CACX,CAOA,KAAAvD,CAAM5K,GAKF,OAJ8B,MAA1BpB,KAAKmC,MAAMgF,cACX/F,EAAO6M,QAAUjO,KAAKmC,MAAMgF,YAAY+F,GACxClN,KAAKmC,MAAMgF,YAAY6E,MAAM1D,KAAKlH,IAE/BA,CACX,CACA,uBAAInB,GACA,OAAOD,KAAKmC,MAAMlC,mBACtB,CAKA,KAAAwP,GAEIzP,KAAKkC,uBACLlC,KAAKmC,MAAMP,UACX5B,KAAK+B,IAAI0N,QACTzP,KAAKmC,MAAQ,IAAIrC,EACjB,IAAK,MAAM8C,KAAe5C,KAAKgC,SAC3BhC,KAAKiE,yBAAyBrB,GAC9B5C,KAAKgC,SAASY,GAAahB,iBACpB5B,KAAKgC,SAASY,GAEzB5C,KAAK4C,YAAc,KACnB5C,KAAKuC,gBAAkB,KACvBvC,KAAKqC,mBAAqB,IAC9B,EAKJ,SAASkM,EAAKjJ,GACV,MAAML,GAAS,SAAmB,QAAcK,GAAQ,WACxD,OAAOoB,EAAOqE,WAAW9F,EAAQK,EAAO,UAC5C,CACO,SAASoK,IACZ,MAAMC,GAAK,SACX,GAAoB,MAAhBA,EAAGC,UAAmB,CACtB,MAAMC,EAAc,IAAI,KAAYF,GACpCA,EAAGC,UAAY,IAAI9N,EAAO+N,EAC9B,CAKA,OAJA,QAAqBF,EAAGC,UAAU7N,MAGlC,SAAiB,IAAM4N,EAAGC,YACnBD,EAAGC,SACd,CAlBA9N,EAAOwE,aAAe,EACtBxE,EAAOyE,eAAiB,EAkBjB,MAAMG,EAASgJ,IAOf,SAASlB,EAAI1P,EAAG6F,GAEnB,MAAMiC,EAAS,CAAE9H,IAAG6F,KACpB,OAAO+B,EAAOC,UAAU,MAAKC,EACjC,C;;;;;;;;;;;;;;;;GCh/BA,MAAMkJ,EAA4B,YAQ3B,MAAMC,EAET,WAAAhQ,CAAYiQ,GACRhQ,KAAKgQ,OAASA,EACdhQ,KAAKiQ,MAAQ,CAAC,EACdjQ,KAAKkQ,aAAe,CAAC,EACrBlQ,KAAKmQ,SAAW,CAAC,EAEjBnQ,KAAKoQ,eAAiBA,EACtBpQ,KAAKqQ,kBACT,CACA,WAAAC,CAAYC,EAAcC,GACD,MAAjBxQ,KAAKwQ,WACCC,IAAMnJ,QAAQ,YAAcmJ,IAAMnJ,QAAQ,SAC5CtB,QAAQ0K,KAAK,YAAY1Q,KAAKuQ,oEACOA,OAG7CvQ,KAAKuQ,aAAeA,EACpBvQ,KAAKwQ,SAAWA,CACpB,CACA,YAAAG,CAAaC,EAAUC,EAAcC,GAIjC,GAHA9Q,KAAKkQ,aAAaU,GAAY,CAAEC,eAAcC,WAGf,MAA3B9Q,KAAKmQ,SAASS,GAAmB,CACjC,MAAMG,EAAY/Q,KAAKmQ,SAASS,GAC1BH,IAAMnJ,QAAQ,YAAcmJ,IAAMnJ,QAAQ,SAC5CtB,QAAQ0K,KAAK,qCAAqCE,MAAaG,MAEnE/Q,KAAK+L,IAAI6E,EAAUG,EACvB,CACJ,CACA,cAAMC,CAASJ,GACX,OAAIA,KAAY5Q,KAAKiQ,QAGrBjQ,KAAKiQ,MAAMW,SAAkB5Q,KAAKiR,aAAaL,IAFpC5Q,KAAKiQ,MAAMW,EAI1B,CACA,GAAA7L,CAAI6L,GACA,GAAIA,KAAY5Q,KAAKiQ,MACjB,OAAOjQ,KAAKiQ,MAAMW,GAEtB,MAAMG,EAAY/Q,KAAKiR,aAAaL,GACpC,IAAI,QAAUG,GACV,MAAM,IAAI/N,MAAM,QAAQ4N,uEAI5B,OADA5Q,KAAKiQ,MAAMW,GAAYG,EAChB/Q,KAAKiQ,MAAMW,EACtB,CACA,SAAAM,CAAUN,GACN,OAAO5Q,KAAK+E,IAAI6L,EACpB,CACA,OAAAtJ,CAAQsJ,GACJ,OAAO5Q,KAAK+E,IAAI6L,EACpB,CACA,SAAAO,CAAUP,GACN,OAAO5Q,KAAK+E,IAAI6L,EACpB,CACA,QAAAQ,GACI,OAAOpR,KAAKiQ,KAChB,CAEA,YAAIoB,GACA,OAAOrR,KAAKiQ,KAChB,CACA,GAAAlE,CAAI6E,EAAUnS,GACV,GAAmC,MAA/BuB,KAAKkQ,aAAaU,GAClB,MAAM,IAAI5N,MAAM,mBAAmB4N,oCAEvC5Q,KAAKiQ,MAAMW,GAAYnS,EACoB,MAAvCuB,KAAKkQ,aAAaU,GAAUE,SAC5B9Q,KAAKkQ,aAAaU,GAAUE,QAAQrS,EAE5C,CACA,YAAAwS,CAAaL,GACT,GAAmC,MAA/B5Q,KAAKkQ,aAAaU,GAClB,MAAM,IAAI5N,MAAM,yBAAyB4N,qCAE7C,OAAO5Q,KAAKkQ,aAAaU,GAAUC,cACvC,CACA,QAAAS,CAASrB,GACLjQ,KAAKiQ,MAAQ5M,OAAOkO,OAAO,CAAC,EAAGtB,EACnC,CACA,KAAAR,GACIzP,KAAKiQ,MAAQ,CAAC,EACdjQ,KAAKmQ,SAAW,CAAC,EACjBnQ,KAAKqQ,kBACT,CACA,gBAAAA,GACI,GAA2B,qBAAhBrQ,KAAKgQ,QACoB,qBAAzBhQ,KAAKgQ,OAAOwB,UACoB,qBAAhCxR,KAAKgQ,OAAOwB,SAASC,OAC5B,OAEJ,MAAMC,EAAY1R,KAAKoQ,eAAepQ,KAAKgQ,OAAOwB,SAASC,QAC3D,GAAI3B,KAA6B4B,EAAW,CACxC,MAAMC,EAAYD,EAAU5B,GAA2B8B,MAAM,KAC7DD,EAAU7N,SAAQ+N,IACd,MAAO9H,EAAKtL,GAASoT,EAASD,MAAM,KACpC5R,KAAKmQ,SAASpG,GAAO+H,EAAW/H,EAAKtL,EAAM,GAEnD,CACJ,EAEG,SAAS2R,EAAe2B,GAC3B,MAAMC,EAAS,CAAC,EAKhB,OAJAD,EAAYE,QAAQ,+BAA+B,CAACC,KAAM/G,KACtDgH,EAAYH,EAAQ7G,EAAE,GAAIA,EAAE,IACrBA,EAAEiH,KAAK,QAEXJ,CACX,CACA,SAASG,EAAYH,EAAQrQ,EAAMlD,GAC/BuT,EAAOK,mBAAmB1Q,IAAS0Q,mBAAmB5T,GAAS,GACnE,CACA,SAASqT,EAAWlB,EAAUnS,GAC1B,MAAM6T,EAAiB7T,EAAM8T,cAC7B,MAAuB,SAAnBD,GAAgD,UAAnBA,EACH,SAAnBA,EAEF,KAAIA,IAAqBA,GACtBA,EAGD7T,CAEf,CASO,SAASgS,IACZ,OAAO1O,CACX,CACO,IAAIA,EAAM,KACV,SAASyQ,EAAqB3C,GACjC9N,EAAM8N,CACV,C","sources":["webpack://benefit/./node_modules/@tensorflow/tfjs-core/dist/browser_util.js","webpack://benefit/./node_modules/@tensorflow/tfjs-core/dist/base_side_effects.js","webpack://benefit/./node_modules/@tensorflow/tfjs-core/dist/device_util.js","webpack://benefit/./node_modules/@tensorflow/tfjs-core/dist/engine.js","webpack://benefit/./node_modules/@tensorflow/tfjs-core/dist/environment.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nconst delayCallback = (() => {\n    if (typeof requestAnimationFrame !== 'undefined') {\n        return requestAnimationFrame;\n    }\n    else if (typeof setImmediate !== 'undefined') {\n        return setImmediate;\n    }\n    return (f) => f(); // no delays\n})();\n/**\n * Returns a promise that resolves when a requestAnimationFrame has completed.\n *\n * On Node.js this uses setImmediate instead of requestAnimationFrame.\n *\n * This is simply a sugar method so that users can do the following:\n * `await tf.nextFrame();`\n *\n * @doc {heading: 'Performance', subheading: 'Timing'}\n */\nfunction nextFrame() {\n    return new Promise(resolve => delayCallback(() => resolve()));\n}\nexport { nextFrame };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJvd3Nlcl91dGlsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vdGZqcy1jb3JlL3NyYy9icm93c2VyX3V0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBRUgsTUFBTSxhQUFhLEdBQWEsQ0FBQyxHQUFHLEVBQUU7SUFDcEMsSUFBSSxPQUFPLHFCQUFxQixLQUFLLFdBQVcsRUFBRTtRQUNoRCxPQUFPLHFCQUFxQixDQUFDO0tBQzlCO1NBQU0sSUFBSSxPQUFPLFlBQVksS0FBSyxXQUFXLEVBQUU7UUFDOUMsT0FBTyxZQUFZLENBQUM7S0FDckI7SUFDRCxPQUFPLENBQUMsQ0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFFLFlBQVk7QUFDNUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUVMOzs7Ozs7Ozs7R0FTRztBQUNILFNBQVMsU0FBUztJQUNoQixPQUFPLElBQUksT0FBTyxDQUFPLE9BQU8sQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN0RSxDQUFDO0FBRUQsT0FBTyxFQUFDLFNBQVMsRUFBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5jb25zdCBkZWxheUNhbGxiYWNrOiBGdW5jdGlvbiA9ICgoKSA9PiB7XG4gIGlmICh0eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHNldEltbWVkaWF0ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gc2V0SW1tZWRpYXRlO1xuICB9XG4gIHJldHVybiAoZjogRnVuY3Rpb24pID0+IGYoKTsgIC8vIG5vIGRlbGF5c1xufSkoKTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gYSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgaGFzIGNvbXBsZXRlZC5cbiAqXG4gKiBPbiBOb2RlLmpzIHRoaXMgdXNlcyBzZXRJbW1lZGlhdGUgaW5zdGVhZCBvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuXG4gKlxuICogVGhpcyBpcyBzaW1wbHkgYSBzdWdhciBtZXRob2Qgc28gdGhhdCB1c2VycyBjYW4gZG8gdGhlIGZvbGxvd2luZzpcbiAqIGBhd2FpdCB0Zi5uZXh0RnJhbWUoKTtgXG4gKlxuICogQGRvYyB7aGVhZGluZzogJ1BlcmZvcm1hbmNlJywgc3ViaGVhZGluZzogJ1RpbWluZyd9XG4gKi9cbmZ1bmN0aW9uIG5leHRGcmFtZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KHJlc29sdmUgPT4gZGVsYXlDYWxsYmFjaygoKSA9PiByZXNvbHZlKCkpKTtcbn1cblxuZXhwb3J0IHtuZXh0RnJhbWV9O1xuIl19","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Required side effectful code for tfjs-core\n// Set up Engine and ENV\nimport { getOrMakeEngine } from './engine';\ngetOrMakeEngine();\n// Register backend-agnostic flags.\nimport './flags';\n// Register platforms\nimport './platforms/platform_browser';\nimport './platforms/platform_node';\n// Set up OpHandler\nimport { buffer } from './ops/buffer';\nimport { cast } from './ops/cast';\nimport { clone } from './ops/clone';\nimport { print } from './ops/print';\nimport { setOpHandler } from './tensor';\nconst opHandler = {\n    buffer,\n    cast,\n    clone,\n    print\n};\nsetOpHandler(opHandler);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZV9zaWRlX2VmZmVjdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90ZmpzLWNvcmUvc3JjL2Jhc2Vfc2lkZV9lZmZlY3RzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUVILDZDQUE2QztBQUU3Qyx3QkFBd0I7QUFDeEIsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUN6QyxlQUFlLEVBQUUsQ0FBQztBQUVsQixtQ0FBbUM7QUFDbkMsT0FBTyxTQUFTLENBQUM7QUFDakIscUJBQXFCO0FBQ3JCLE9BQU8sOEJBQThCLENBQUM7QUFDdEMsT0FBTywyQkFBMkIsQ0FBQztBQUVuQyxtQkFBbUI7QUFDbkIsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUNwQyxPQUFPLEVBQUMsSUFBSSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBQ2hDLE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFDbEMsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUNsQyxPQUFPLEVBQVksWUFBWSxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBQ2pELE1BQU0sU0FBUyxHQUFjO0lBQzNCLE1BQU07SUFDTixJQUFJO0lBQ0osS0FBSztJQUNMLEtBQUs7Q0FDTixDQUFDO0FBQ0YsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG4vLyBSZXF1aXJlZCBzaWRlIGVmZmVjdGZ1bCBjb2RlIGZvciB0ZmpzLWNvcmVcblxuLy8gU2V0IHVwIEVuZ2luZSBhbmQgRU5WXG5pbXBvcnQge2dldE9yTWFrZUVuZ2luZX0gZnJvbSAnLi9lbmdpbmUnO1xuZ2V0T3JNYWtlRW5naW5lKCk7XG5cbi8vIFJlZ2lzdGVyIGJhY2tlbmQtYWdub3N0aWMgZmxhZ3MuXG5pbXBvcnQgJy4vZmxhZ3MnO1xuLy8gUmVnaXN0ZXIgcGxhdGZvcm1zXG5pbXBvcnQgJy4vcGxhdGZvcm1zL3BsYXRmb3JtX2Jyb3dzZXInO1xuaW1wb3J0ICcuL3BsYXRmb3Jtcy9wbGF0Zm9ybV9ub2RlJztcblxuLy8gU2V0IHVwIE9wSGFuZGxlclxuaW1wb3J0IHtidWZmZXJ9IGZyb20gJy4vb3BzL2J1ZmZlcic7XG5pbXBvcnQge2Nhc3R9IGZyb20gJy4vb3BzL2Nhc3QnO1xuaW1wb3J0IHtjbG9uZX0gZnJvbSAnLi9vcHMvY2xvbmUnO1xuaW1wb3J0IHtwcmludH0gZnJvbSAnLi9vcHMvcHJpbnQnO1xuaW1wb3J0IHtPcEhhbmRsZXIsIHNldE9wSGFuZGxlcn0gZnJvbSAnLi90ZW5zb3InO1xuY29uc3Qgb3BIYW5kbGVyOiBPcEhhbmRsZXIgPSB7XG4gIGJ1ZmZlcixcbiAgY2FzdCxcbiAgY2xvbmUsXG4gIHByaW50XG59O1xuc2V0T3BIYW5kbGVyKG9wSGFuZGxlcik7XG4iXX0=","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line:no-any\nfunction _isNavigatorDefined() {\n    return typeof navigator !== 'undefined' && navigator != null;\n}\nlet isMobileMockValue;\nexport function mockIsMobile(value) {\n    isMobileMockValue = value;\n}\nexport function isMobile(nav) {\n    if (isMobileMockValue !== undefined) {\n        return isMobileMockValue;\n    }\n    if (nav || _isNavigatorDefined()) {\n        if (!nav) {\n            nav = navigator;\n        }\n        if (nav.product === 'ReactNative') {\n            return true;\n        }\n        const a = nav.userAgent || nav.vendor ||\n            // tslint:disable-next-line:no-any\n            (typeof window !== 'undefined' ? window.opera : '');\n        // Use `navigator.userAgentData.mobile` as fallback.\n        if (!a) {\n            // tslint:disable-next-line:no-any\n            const navAny = nav;\n            return navAny.userAgentData && navAny.userAgentData.mobile;\n        }\n        // tslint:disable-next-line:max-line-length\n        return /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i\n            .test(a) ||\n            // tslint:disable-next-line:max-line-length\n            /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i\n                .test(a.substr(0, 4));\n    }\n    return false;\n}\nexport function isBrowser() {\n    return (typeof window !== 'undefined' && window.document != null) ||\n        //@ts-ignore\n        (typeof WorkerGlobalScope !== 'undefined');\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlX3V0aWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90ZmpzLWNvcmUvc3JjL2RldmljZV91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUVILGtDQUFrQztBQUNsQyxTQUFTLG1CQUFtQjtJQUMxQixPQUFPLE9BQU8sU0FBUyxLQUFLLFdBQVcsSUFBSSxTQUFTLElBQUksSUFBSSxDQUFDO0FBQy9ELENBQUM7QUFFRCxJQUFJLGlCQUFvQyxDQUFDO0FBRXpDLE1BQU0sVUFBVSxZQUFZLENBQUMsS0FBd0I7SUFDbkQsaUJBQWlCLEdBQUcsS0FBSyxDQUFDO0FBQzVCLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUFDLEdBQWU7SUFDdEMsSUFBSSxpQkFBaUIsS0FBSyxTQUFTLEVBQUU7UUFDbkMsT0FBTyxpQkFBaUIsQ0FBQztLQUMxQjtJQUNELElBQUksR0FBRyxJQUFJLG1CQUFtQixFQUFFLEVBQUU7UUFDaEMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNSLEdBQUcsR0FBRyxTQUFTLENBQUM7U0FDakI7UUFDRCxJQUFJLEdBQUcsQ0FBQyxPQUFPLEtBQUssYUFBYSxFQUFFO1lBQ2pDLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsU0FBUyxJQUFJLEdBQUcsQ0FBQyxNQUFNO1lBQ2pDLGtDQUFrQztZQUNsQyxDQUFDLE9BQU8sTUFBTSxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUUsTUFBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDakUsb0RBQW9EO1FBQ3BELElBQUksQ0FBQyxDQUFDLEVBQUU7WUFDTixrQ0FBa0M7WUFDbEMsTUFBTSxNQUFNLEdBQUcsR0FBVSxDQUFDO1lBQzFCLE9BQU8sTUFBTSxDQUFDLGFBQWEsSUFBSSxNQUFNLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQztTQUM1RDtRQUNELDJDQUEyQztRQUMzQyxPQUFPLDBUQUEwVDthQUNyVCxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ2YsMkNBQTJDO1lBQzNDLHlrREFBeWtEO2lCQUNwa0QsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDL0I7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFRCxNQUFNLFVBQVUsU0FBUztJQUN2QixPQUFPLENBQUMsT0FBTyxNQUFNLEtBQUssV0FBVyxJQUFJLE1BQU0sQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDO1FBQzdELFlBQVk7UUFDWixDQUFDLE9BQU8saUJBQWlCLEtBQUssV0FBVyxDQUFDLENBQUM7QUFDakQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuZnVuY3Rpb24gX2lzTmF2aWdhdG9yRGVmaW5lZCgpOiBib29sZWFuIHtcbiAgcmV0dXJuIHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvciAhPSBudWxsO1xufVxuXG5sZXQgaXNNb2JpbGVNb2NrVmFsdWU6IGJvb2xlYW58dW5kZWZpbmVkO1xuXG5leHBvcnQgZnVuY3Rpb24gbW9ja0lzTW9iaWxlKHZhbHVlOiBib29sZWFufHVuZGVmaW5lZCkge1xuICBpc01vYmlsZU1vY2tWYWx1ZSA9IHZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNNb2JpbGUobmF2PzogTmF2aWdhdG9yKTogYm9vbGVhbiB7XG4gIGlmIChpc01vYmlsZU1vY2tWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGlzTW9iaWxlTW9ja1ZhbHVlO1xuICB9XG4gIGlmIChuYXYgfHwgX2lzTmF2aWdhdG9yRGVmaW5lZCgpKSB7XG4gICAgaWYgKCFuYXYpIHtcbiAgICAgIG5hdiA9IG5hdmlnYXRvcjtcbiAgICB9XG4gICAgaWYgKG5hdi5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBhID0gbmF2LnVzZXJBZ2VudCB8fCBuYXYudmVuZG9yIHx8XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgICAgICAgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gKHdpbmRvdyBhcyBhbnkpLm9wZXJhIDogJycpO1xuICAgIC8vIFVzZSBgbmF2aWdhdG9yLnVzZXJBZ2VudERhdGEubW9iaWxlYCBhcyBmYWxsYmFjay5cbiAgICBpZiAoIWEpIHtcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgICAgIGNvbnN0IG5hdkFueSA9IG5hdiBhcyBhbnk7XG4gICAgICByZXR1cm4gbmF2QW55LnVzZXJBZ2VudERhdGEgJiYgbmF2QW55LnVzZXJBZ2VudERhdGEubW9iaWxlO1xuICAgIH1cbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWxpbmUtbGVuZ3RoXG4gICAgcmV0dXJuIC8oYW5kcm9pZHxiYlxcZCt8bWVlZ28pLittb2JpbGV8YXZhbnRnb3xiYWRhXFwvfGJsYWNrYmVycnl8YmxhemVyfGNvbXBhbHxlbGFpbmV8ZmVubmVjfGhpcHRvcHxpZW1vYmlsZXxpcChob25lfG9kKXxpcmlzfGtpbmRsZXxsZ2UgfG1hZW1vfG1pZHB8bW1wfG1vYmlsZS4rZmlyZWZveHxuZXRmcm9udHxvcGVyYSBtKG9ifGluKWl8cGFsbSggb3MpP3xwaG9uZXxwKGl4aXxyZSlcXC98cGx1Y2tlcnxwb2NrZXR8cHNwfHNlcmllcyg0fDYpMHxzeW1iaWFufHRyZW98dXBcXC4oYnJvd3NlcnxsaW5rKXx2b2RhZm9uZXx3YXB8d2luZG93cyBjZXx4ZGF8eGlpbm8vaVxuICAgICAgICAgICAgICAgLnRlc3QoYSkgfHxcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1saW5lLWxlbmd0aFxuICAgICAgICAvMTIwN3w2MzEwfDY1OTB8M2dzb3w0dGhwfDUwWzEtNl1pfDc3MHN8ODAyc3xhIHdhfGFiYWN8YWMoZXJ8b298c1xcLSl8YWkoa298cm4pfGFsKGF2fGNhfGNvKXxhbW9pfGFuKGV4fG55fHl3KXxhcHR1fGFyKGNofGdvKXxhcyh0ZXx1cyl8YXR0d3xhdShkaXxcXC1tfHIgfHMgKXxhdmFufGJlKGNrfGxsfG5xKXxiaShsYnxyZCl8YmwoYWN8YXopfGJyKGV8dil3fGJ1bWJ8YndcXC0obnx1KXxjNTVcXC98Y2FwaXxjY3dhfGNkbVxcLXxjZWxsfGNodG18Y2xkY3xjbWRcXC18Y28obXB8bmQpfGNyYXd8ZGEoaXR8bGx8bmcpfGRidGV8ZGNcXC1zfGRldml8ZGljYXxkbW9ifGRvKGN8cClvfGRzKDEyfFxcLWQpfGVsKDQ5fGFpKXxlbShsMnx1bCl8ZXIoaWN8azApfGVzbDh8ZXooWzQtN10wfG9zfHdhfHplKXxmZXRjfGZseShcXC18Xyl8ZzEgdXxnNTYwfGdlbmV8Z2ZcXC01fGdcXC1tb3xnbyhcXC53fG9kKXxncihhZHx1bil8aGFpZXxoY2l0fGhkXFwtKG18cHx0KXxoZWlcXC18aGkocHR8dGEpfGhwKCBpfGlwKXxoc1xcLWN8aHQoYyhcXC18IHxffGF8Z3xwfHN8dCl8dHApfGh1KGF3fHRjKXxpXFwtKDIwfGdvfG1hKXxpMjMwfGlhYyggfFxcLXxcXC8pfGlicm98aWRlYXxpZzAxfGlrb218aW0xa3xpbm5vfGlwYXF8aXJpc3xqYSh0fHYpYXxqYnJvfGplbXV8amlnc3xrZGRpfGtlaml8a2d0KCB8XFwvKXxrbG9ufGtwdCB8a3djXFwtfGt5byhjfGspfGxlKG5vfHhpKXxsZyggZ3xcXC8oa3xsfHUpfDUwfDU0fFxcLVthLXddKXxsaWJ3fGx5bnh8bTFcXC13fG0zZ2F8bTUwXFwvfG1hKHRlfHVpfHhvKXxtYygwMXwyMXxjYSl8bVxcLWNyfG1lKHJjfHJpKXxtaShvOHxvYXx0cyl8bW1lZnxtbygwMXwwMnxiaXxkZXxkb3x0KFxcLXwgfG98dil8enopfG10KDUwfHAxfHYgKXxtd2JwfG15d2F8bjEwWzAtMl18bjIwWzItM118bjMwKDB8Mil8bjUwKDB8Mnw1KXxuNygwKDB8MSl8MTApfG5lKChjfG0pXFwtfG9ufHRmfHdmfHdnfHd0KXxub2soNnxpKXxuenBofG8yaW18b3AodGl8d3YpfG9yYW58b3dnMXxwODAwfHBhbihhfGR8dCl8cGR4Z3xwZygxM3xcXC0oWzEtOF18YykpfHBoaWx8cGlyZXxwbChheXx1Yyl8cG5cXC0yfHBvKGNrfHJ0fHNlKXxwcm94fHBzaW98cHRcXC1nfHFhXFwtYXxxYygwN3wxMnwyMXwzMnw2MHxcXC1bMi03XXxpXFwtKXxxdGVrfHIzODB8cjYwMHxyYWtzfHJpbTl8cm8odmV8em8pfHM1NVxcL3xzYShnZXxtYXxtbXxtc3xueXx2YSl8c2MoMDF8aFxcLXxvb3xwXFwtKXxzZGtcXC98c2UoYyhcXC18MHwxKXw0N3xtY3xuZHxyaSl8c2doXFwtfHNoYXJ8c2llKFxcLXxtKXxza1xcLTB8c2woNDV8aWQpfHNtKGFsfGFyfGIzfGl0fHQ1KXxzbyhmdHxueSl8c3AoMDF8aFxcLXx2XFwtfHYgKXxzeSgwMXxtYil8dDIoMTh8NTApfHQ2KDAwfDEwfDE4KXx0YShndHxsayl8dGNsXFwtfHRkZ1xcLXx0ZWwoaXxtKXx0aW1cXC18dFxcLW1vfHRvKHBsfHNoKXx0cyg3MHxtXFwtfG0zfG01KXx0eFxcLTl8dXAoXFwuYnxnMXxzaSl8dXRzdHx2NDAwfHY3NTB8dmVyaXx2aShyZ3x0ZSl8dmsoNDB8NVswLTNdfFxcLXYpfHZtNDB8dm9kYXx2dWxjfHZ4KDUyfDUzfDYwfDYxfDcwfDgwfDgxfDgzfDg1fDk4KXx3M2MoXFwtfCApfHdlYmN8d2hpdHx3aShnIHxuY3xudyl8d21sYnx3b251fHg3MDB8eWFzXFwtfHlvdXJ8emV0b3x6dGVcXC0vaVxuICAgICAgICAgICAgLnRlc3QoYS5zdWJzdHIoMCwgNCkpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQnJvd3NlcigpOiBib29sZWFuIHtcbiAgcmV0dXJuICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgIT0gbnVsbCkgfHxcbiAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgKHR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSAhPT0gJ3VuZGVmaW5lZCcpO1xufVxuIl19","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { KernelBackend } from './backends/backend';\nimport { Environment, setEnvironmentGlobal } from './environment';\nimport { getGlobalNamespace } from './global_util';\nimport { Add, Cast, Identity } from './kernel_names';\nimport { getGradient, getKernel, getKernelsForBackend } from './kernel_registry';\nimport * as log from './log';\nimport { Profiler } from './profiler';\nimport { backpropagateGradients, getFilteredNodesXToY } from './tape';\nimport { setTensorTracker, Tensor, Variable } from './tensor';\nimport { getTensorsInContainer } from './tensor_util';\nimport * as util from './util';\nimport { bytesFromStringArray, makeOnesTypedArray, now, sizeFromShape } from './util';\nfunction isRegisteredKernelInvocation(kernelInvocation) {\n    return kernelInvocation.kernelName != null;\n}\nclass EngineState {\n    constructor() {\n        // Public since optimizers will use it.\n        this.registeredVariables = {};\n        this.nextTapeNodeId = 0;\n        this.numBytes = 0;\n        this.numTensors = 0;\n        this.numStringTensors = 0;\n        this.numDataBuffers = 0;\n        // Number of nested tf.grad() statements when computing higher-order\n        // gradients. E.g. `1` for first-order gradients and `2` for second-order\n        // gradients. Used to track if the tape should be removed after a backprop.\n        this.gradientDepth = 0;\n        // Number of nested kernel calls. When kernel depth is greater than 1, we turn\n        // off the tape.\n        this.kernelDepth = 0;\n        this.scopeStack = [];\n        /**\n         * Keeps track of the number of data moves during a kernel execution. We\n         * maintain a stack since kernels can call other kernels, recursively.\n         */\n        this.numDataMovesStack = [];\n        this.nextScopeId = 0;\n        this.tensorInfo = new WeakMap();\n        this.profiling = false;\n        this.activeProfile = {\n            newBytes: 0,\n            newTensors: 0,\n            peakBytes: 0,\n            kernels: [],\n            result: null,\n            get kernelNames() {\n                return Array.from(new Set(this.kernels.map(k => k.name)));\n            }\n        };\n    }\n    dispose() {\n        for (const variableName in this.registeredVariables) {\n            this.registeredVariables[variableName].dispose();\n        }\n    }\n}\nclass Engine {\n    constructor(ENV) {\n        this.ENV = ENV;\n        this.registry = {};\n        this.registryFactory = {};\n        this.pendingBackendInitId = 0;\n        this.state = new EngineState();\n    }\n    async ready() {\n        if (this.pendingBackendInit != null) {\n            return this.pendingBackendInit.then(() => { });\n        }\n        if (this.backendInstance != null) {\n            return;\n        }\n        const sortedBackends = this.getSortedBackends();\n        for (let i = 0; i < sortedBackends.length; i++) {\n            const backendName = sortedBackends[i];\n            const success = await this.initializeBackend(backendName).success;\n            if (success) {\n                await this.setBackend(backendName);\n                return;\n            }\n        }\n        throw new Error(`Could not initialize any backends, all backend initializations ` +\n            `failed.`);\n    }\n    get backend() {\n        if (this.pendingBackendInit != null) {\n            throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make ` +\n                `sure to await tf.ready() or await tf.setBackend() before calling ` +\n                `other methods`);\n        }\n        if (this.backendInstance == null) {\n            const { name, asyncInit } = this.initializeBackendsAndReturnBest();\n            if (asyncInit) {\n                throw new Error(`The highest priority backend '${name}' has not yet been ` +\n                    `initialized. Make sure to await tf.ready() or ` +\n                    `await tf.setBackend() before calling other methods`);\n            }\n            this.setBackend(name);\n        }\n        return this.backendInstance;\n    }\n    backendNames() {\n        return Object.keys(this.registryFactory);\n    }\n    findBackend(backendName) {\n        if (!(backendName in this.registry)) {\n            // If the backend hasn't been initialized but we have a registry entry for\n            // it, initialize it and return it.\n            if (backendName in this.registryFactory) {\n                const { asyncInit } = this.initializeBackend(backendName);\n                if (asyncInit) {\n                    // Backend is not ready yet.\n                    return null;\n                }\n            }\n            else {\n                return null;\n            }\n        }\n        return this.registry[backendName];\n    }\n    findBackendFactory(backendName) {\n        if (!(backendName in this.registryFactory)) {\n            return null;\n        }\n        return this.registryFactory[backendName].factory;\n    }\n    registerBackend(backendName, factory, priority = 1) {\n        if (backendName in this.registryFactory) {\n            log.warn(`${backendName} backend was already registered. ` +\n                `Reusing existing backend factory.`);\n            return false;\n        }\n        this.registryFactory[backendName] = { factory, priority };\n        return true;\n    }\n    async setBackend(backendName) {\n        if (this.registryFactory[backendName] == null) {\n            throw new Error(`Backend name '${backendName}' not found in registry`);\n        }\n        this.backendName = backendName;\n        if (this.registry[backendName] == null) {\n            this.backendInstance = null;\n            const { success, asyncInit } = this.initializeBackend(backendName);\n            const result = asyncInit ? await success : success;\n            if (!result) {\n                return false;\n            }\n        }\n        this.backendInstance = this.registry[backendName];\n        this.setupRegisteredKernels();\n        // Reset the profiler.\n        this.profiler = new Profiler(this.backendInstance);\n        return true;\n    }\n    setupRegisteredKernels() {\n        const kernels = getKernelsForBackend(this.backendName);\n        kernels.forEach(kernel => {\n            if (kernel.setupFunc != null) {\n                kernel.setupFunc(this.backendInstance);\n            }\n        });\n    }\n    disposeRegisteredKernels(backendName) {\n        const kernels = getKernelsForBackend(backendName);\n        kernels.forEach(kernel => {\n            if (kernel.disposeFunc != null) {\n                kernel.disposeFunc(this.registry[backendName]);\n            }\n        });\n    }\n    /**\n     * Initializes a backend by looking up the backend name in the factory\n     * registry and calling the factory method. Returns a boolean representing\n     * whether the initialization of the backend suceeded. Throws an error if\n     * there is no backend in the factory registry.\n     */\n    initializeBackend(backendName) {\n        const registryFactoryEntry = this.registryFactory[backendName];\n        if (registryFactoryEntry == null) {\n            throw new Error(`Cannot initialize backend ${backendName}, no registration found.`);\n        }\n        try {\n            const backend = registryFactoryEntry.factory();\n            /* Test if the factory returns a promise.\n            Done in a more liberal way than\n            previous 'Promise.resolve(backend)===backend'\n            as we needed to account for custom Promise\n            implementations (e.g. Angular) */\n            if (backend && !(backend instanceof KernelBackend) &&\n                typeof backend.then === 'function') {\n                const promiseId = ++this.pendingBackendInitId;\n                const success = backend\n                    .then(backendInstance => {\n                    // Outdated promise. Another backend was set in the meantime.\n                    if (promiseId < this.pendingBackendInitId) {\n                        return false;\n                    }\n                    this.registry[backendName] = backendInstance;\n                    this.pendingBackendInit = null;\n                    return true;\n                })\n                    .catch(err => {\n                    // Outdated promise. Another backend was set in the meantime.\n                    if (promiseId < this.pendingBackendInitId) {\n                        return false;\n                    }\n                    this.pendingBackendInit = null;\n                    log.warn(`Initialization of backend ${backendName} failed`);\n                    log.warn(err.stack || err.message);\n                    return false;\n                });\n                this.pendingBackendInit = success;\n                return { success, asyncInit: true };\n            }\n            else {\n                this.registry[backendName] = backend;\n                return { success: true, asyncInit: false };\n            }\n        }\n        catch (err) {\n            log.warn(`Initialization of backend ${backendName} failed`);\n            log.warn(err.stack || err.message);\n            return { success: false, asyncInit: false };\n        }\n    }\n    removeBackend(backendName) {\n        if (!(backendName in this.registryFactory)) {\n            throw new Error(`${backendName} backend not found in registry`);\n        }\n        if (this.backendName === backendName && this.pendingBackendInit != null) {\n            // There is a pending promise of the backend we want to remove. Make it\n            // obsolete.\n            this.pendingBackendInitId++;\n        }\n        if (backendName in this.registry) {\n            this.disposeRegisteredKernels(backendName);\n            this.registry[backendName].dispose();\n            delete this.registry[backendName];\n        }\n        delete this.registryFactory[backendName];\n        // Unset the backend if it is active.\n        if (this.backendName === backendName) {\n            this.pendingBackendInit = null;\n            this.backendName = null;\n            this.backendInstance = null;\n        }\n    }\n    getSortedBackends() {\n        if (Object.keys(this.registryFactory).length === 0) {\n            throw new Error('No backend found in registry.');\n        }\n        return Object.keys(this.registryFactory).sort((a, b) => {\n            // Highest priority comes first.\n            return this.registryFactory[b].priority -\n                this.registryFactory[a].priority;\n        });\n    }\n    initializeBackendsAndReturnBest() {\n        const sortedBackends = this.getSortedBackends();\n        for (let i = 0; i < sortedBackends.length; i++) {\n            const backendName = sortedBackends[i];\n            const { success, asyncInit } = this.initializeBackend(backendName);\n            if (asyncInit || success) {\n                return { name: backendName, asyncInit };\n            }\n        }\n        throw new Error(`Could not initialize any backends, all backend initializations ` +\n            `failed.`);\n    }\n    moveData(backend, dataId) {\n        const info = this.state.tensorInfo.get(dataId);\n        const srcBackend = info.backend;\n        const values = this.readSync(dataId);\n        const refCount = srcBackend.refCount(dataId);\n        // Delete the tensor from the old backend and move it to the new\n        // backend.\n        srcBackend.disposeData(dataId, true);\n        info.backend = backend;\n        backend.move(dataId, values, info.shape, info.dtype, refCount);\n        if (this.shouldCheckForMemLeaks()) {\n            // Track the number of moves during a kernel execution to correctly\n            // detect memory leaks.\n            this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;\n        }\n    }\n    tidy(nameOrFn, fn) {\n        let name = null;\n        if (fn == null) {\n            // Called with only 1 argument.\n            if (typeof nameOrFn !== 'function') {\n                throw new Error('Please provide a function to tidy()');\n            }\n            fn = nameOrFn;\n        }\n        else {\n            // Called with 2 arguments.\n            if (typeof nameOrFn !== 'string' && !(nameOrFn instanceof String)) {\n                throw new Error('When calling with two arguments, the first argument ' +\n                    'to tidy() must be a string');\n            }\n            if (typeof fn !== 'function') {\n                throw new Error('When calling with two arguments, the 2nd argument ' +\n                    'to tidy() must be a function');\n            }\n            name = nameOrFn;\n            // TODO(nsthorat,smilkov): Do operation logging and performance\n            // profiling.\n        }\n        let result;\n        return this.scopedRun(() => this.startScope(name), () => this.endScope(result), () => {\n            result = fn();\n            if (result instanceof Promise) {\n                console.error('Cannot return a Promise inside of tidy.');\n            }\n            return result;\n        });\n    }\n    scopedRun(start, end, f) {\n        start();\n        try {\n            const res = f();\n            end();\n            return res;\n        }\n        catch (ex) {\n            end();\n            throw ex;\n        }\n    }\n    nextTensorId() {\n        return Engine.nextTensorId++;\n    }\n    nextVariableId() {\n        return Engine.nextVariableId++;\n    }\n    /**\n     * This method is called instead of the public-facing tensor.clone() when\n     * saving a tensor for backwards pass. It makes sure to add the clone\n     * operation to the tape regardless of being called inside a kernel\n     * execution.\n     */\n    clone(x) {\n        const y = ENGINE.runKernel(Identity, { x });\n        const inputs = { x };\n        const grad = (dy) => ({\n            x: () => {\n                const dtype = 'float32';\n                const gradInputs = { x: dy };\n                const attrs = { dtype };\n                return ENGINE.runKernel(Cast, gradInputs, \n                // tslint:disable-next-line: no-unnecessary-type-assertion\n                attrs);\n            }\n        });\n        const saved = [];\n        this.addTapeNode(this.state.activeScope.name, inputs, [y], grad, saved, {});\n        return y;\n    }\n    /**\n     * Execute a kernel with the given name and return the output tensor.\n     *\n     * @param kernelName The name of the kernel to execute.\n     * @param inputs A map of input names to tensors.\n     * @param attrs A map of attribute names to their values. An attribute is a\n     *     primitive (non-tensor) input to the kernel.\n     * @param inputsToSave A list of tensors, inputs to save for the backprop\n     *     computation.\n     * @param outputsToSave A list of booleans, specifying which output to save\n     *     for the backprop computation. These are booleans since the output\n     * tensors are not visible to the user.\n     */\n    runKernel(kernelName, inputs, attrs) {\n        if (this.backendName == null) {\n            // backend has not been initialized yet (backend initialization is lazy\n            // can be deferred until an op/ kernel is run).\n            // The below getter has side effects that will try to initialize the\n            // backend and set properties like this.backendName\n            // tslint:disable-next-line: no-unused-expression\n            this.backend;\n        }\n        const hasKernel = getKernel(kernelName, this.backendName) != null;\n        if (!hasKernel) {\n            throw new Error(`Kernel '${kernelName}' not registered for backend '${this.backendName}'`);\n        }\n        return this.runKernelFunc({ kernelName, inputs, attrs });\n    }\n    shouldCheckForMemLeaks() {\n        return this.ENV.getBool('IS_TEST');\n    }\n    checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos) {\n        const numDataIdsAfter = this.backend.numDataIds();\n        // Count the number of data ids associated with the result of the kernel.\n        let numOutputDataIds = 0;\n        outInfos.forEach(info => {\n            // Complex numbers allocate 3 data ids, one for 'real', one for\n            // 'imaginary', and one for the container that holds the former two.\n            numOutputDataIds += (info.dtype === 'complex64' ? 3 : 1);\n        });\n        // Account for the number of moves during kernel execution. A \"data move\"\n        // can happen in the middle of a kernel execution, placing a new (key,value)\n        // pair in the data storage. Since data moves have net zero effect (we\n        // always remove the data from the old backend), we have to cancel them out\n        // when detecting memory leaks.\n        const numMoves = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1];\n        const dataIdsLeaked = numDataIdsAfter - numDataIdsBefore - numOutputDataIds - numMoves;\n        if (dataIdsLeaked > 0) {\n            throw new Error(`Backend '${this.backendName}' has an internal memory leak ` +\n                `(${dataIdsLeaked} data ids) after running '${kernelName}'`);\n        }\n    }\n    /**\n     * Internal helper method to execute a kernel Func\n     *\n     * Use `runKernel` to execute kernels from outside of engine.\n     */\n    runKernelFunc(kernelParams) {\n        let outputs;\n        let saved = [];\n        const isTapeOn = this.isTapeOn();\n        const startingBytecount = this.state.numBytes;\n        const startingNumTensors = this.state.numTensors;\n        if (this.shouldCheckForMemLeaks()) {\n            this.state.numDataMovesStack.push(0);\n        }\n        let kernelFunc;\n        if (this.backendName == null) {\n            // backend has not been initialized yet (backend initialization is lazy\n            // can be deferred until an op/ kernel is run).\n            // The below getter has side effects that will try to initialize the\n            // backend and set properties like this.backendName\n            // tslint:disable-next-line: no-unused-expression\n            this.backend;\n        }\n        let out;\n        const kernelOrScopeName = isRegisteredKernelInvocation(kernelParams) ?\n            kernelParams.kernelName :\n            this.state.activeScope != null ? this.state.activeScope.name : '';\n        // Create the kernelFunc from either a registered kernel OR passed in\n        // forward/backward functions (used by custom grad). In this context a\n        // kernelFunc wraps a kernel implementation with some bookkeeping.\n        if (isRegisteredKernelInvocation(kernelParams)) {\n            const { kernelName, inputs, attrs } = kernelParams;\n            if (this.backendName == null) {\n                // backend has not been initialized yet (backend initialization is lazy\n                // can be deferred until an op/ kernel is run).\n                // The below getter has side effects that will try to initialize the\n                // backend and set properties like this.backendName\n                // tslint:disable-next-line: no-unused-expression\n                this.backend;\n            }\n            const kernel = getKernel(kernelName, this.backendName);\n            util.assert(kernel != null, () => `Cannot find registered kernel '${kernelName}' for backend '${this.backendName}'`);\n            kernelFunc = () => {\n                const numDataIdsBefore = this.backend.numDataIds();\n                out = kernel.kernelFunc({ inputs, attrs, backend: this.backend });\n                const outInfos = Array.isArray(out) ? out : [out];\n                if (this.shouldCheckForMemLeaks()) {\n                    this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos);\n                }\n                const outTensors = outInfos.map((outInfo) => {\n                    // todo (yassogba) remove this option (Tensor) when node backend\n                    // methods have been modularized and they all return tensorInfo.\n                    // TensorInfos do not have a rank attribute.\n                    if (outInfo.rank != null) {\n                        return outInfo;\n                    }\n                    return this.makeTensorFromTensorInfo(outInfo);\n                });\n                // Save any required inputs and outputs.\n                // Do not save unless we are recording to the tape. Otherwise it would\n                // cause a mem leak since there would be no backprop for these tensors\n                // (which would otherwise dispose them).\n                if (isTapeOn) {\n                    const tensorsToSave = this.getTensorsForGradient(kernelName, inputs, outTensors);\n                    saved = this.saveTensorsForBackwardMode(tensorsToSave);\n                }\n                return outTensors;\n            };\n        }\n        else {\n            const { forwardFunc } = kernelParams;\n            // Running a customGrad op.\n            const saveFunc = (tensors) => {\n                // Do not save unless we are recording to the tape. Otherwise it would\n                // cause a mem leak since we would never run backprop, which disposes\n                // the kept tensors.\n                if (!isTapeOn) {\n                    return;\n                }\n                saved = tensors.map(tensor => this.keep(this.clone(tensor)));\n            };\n            kernelFunc = () => {\n                const numDataIdsBefore = this.backend.numDataIds();\n                out = this.tidy(() => forwardFunc(this.backend, saveFunc));\n                const outs = (Array.isArray(out) ? out : [out]);\n                if (this.shouldCheckForMemLeaks()) {\n                    // Scope name is used to print a more helpful error message if needed.\n                    this.checkKernelForMemLeak(kernelOrScopeName, numDataIdsBefore, outs);\n                }\n                return outs;\n            };\n        }\n        //\n        // Run the kernelFunc. Optionally profiling it.\n        //\n        const { inputs, attrs } = kernelParams;\n        const backwardsFunc = isRegisteredKernelInvocation(kernelParams) ?\n            null :\n            kernelParams.backwardsFunc;\n        let kernelProfile;\n        this.scopedRun(\n        // Stop recording to a tape when running a kernel.\n        () => this.state.kernelDepth++, () => this.state.kernelDepth--, () => {\n            if (!this.ENV.getBool('DEBUG') && !this.state.profiling) {\n                outputs = kernelFunc();\n            }\n            else {\n                kernelProfile = this.profiler.profileKernel(kernelOrScopeName, inputs, () => kernelFunc());\n                if (this.ENV.getBool('DEBUG')) {\n                    this.profiler.logKernelProfile(kernelProfile);\n                }\n                outputs = kernelProfile.outputs;\n            }\n        });\n        if (isTapeOn) {\n            this.addTapeNode(kernelOrScopeName, inputs, outputs, backwardsFunc, saved, attrs);\n        }\n        if (this.state.profiling) {\n            this.state.activeProfile.kernels.push({\n                name: kernelOrScopeName,\n                bytesAdded: this.state.numBytes - startingBytecount,\n                totalBytesSnapshot: this.state.numBytes,\n                tensorsAdded: this.state.numTensors - startingNumTensors,\n                totalTensorsSnapshot: this.state.numTensors,\n                inputShapes: Object.keys(inputs).map(key => inputs[key] != null ? inputs[key].shape : null),\n                outputShapes: outputs.map(item => item.shape),\n                kernelTimeMs: kernelProfile.timeMs,\n                extraInfo: kernelProfile.extraInfo\n            });\n        }\n        return (Array.isArray(out) ? outputs : outputs[0]);\n    }\n    /**\n     * Saves tensors used in forward mode for use in backward mode.\n     *\n     * @param tensors the list of tensors to save.\n     */\n    saveTensorsForBackwardMode(tensors) {\n        const saved = tensors.map(tensor => this.keep(this.clone(tensor)));\n        return saved;\n    }\n    /**\n     * Returns a list of tensors to save for a given gradient calculation.\n     *\n     * @param kernelName name of kernel to look up gradient for.\n     * @param inputs a map of input tensors.\n     * @param outputs an array of output tensors from forward mode of kernel.\n     */\n    getTensorsForGradient(kernelName, inputs, outputs) {\n        const gradConfig = getGradient(kernelName);\n        if (gradConfig != null) {\n            const inputsToSave = gradConfig.inputsToSave || [];\n            const outputsToSave = gradConfig.outputsToSave || [];\n            // If saveAllInputs is true, all inputs will be saved. Otherwise, inputs\n            // specified in inputsToSave will be saved.\n            let inputTensorsToSave;\n            if (gradConfig.saveAllInputs) {\n                util.assert(Array.isArray(inputs), () => 'saveAllInputs is true, expected inputs to be an array.');\n                inputTensorsToSave = Object.keys(inputs).map((key) => inputs[key]);\n            }\n            else {\n                inputTensorsToSave = inputsToSave.map((inputName) => inputs[inputName]);\n            }\n            const outputTensorsToSave = outputs.filter((_, i) => outputsToSave[i]);\n            return inputTensorsToSave.concat(outputTensorsToSave);\n        }\n        // We return an empty list rather than throw an error because the kernel we\n        // are looking up may not actually be relevant to backproping through the\n        // overall function\n        //\n        // See 'does not error if irrelevant (pruned) ops are missing grads' test\n        // in gradients_test.ts for an example.\n        return [];\n    }\n    /**\n     * Internal method used by public APIs for tensor creation. Makes a new\n     * tensor with the provided shape, dtype and values. It always\n     * creates a new data id and writes the values to the underlying backend.\n     */\n    makeTensor(values, shape, dtype, backend) {\n        if (values == null) {\n            throw new Error('Values passed to engine.makeTensor() are null');\n        }\n        dtype = dtype || 'float32';\n        backend = backend || this.backend;\n        let backendVals = values;\n        if (dtype === 'string' && util.isString(values[0])) {\n            backendVals = values.map(d => util.encodeString(d));\n        }\n        const dataId = backend.write(backendVals, shape, dtype);\n        const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n        this.trackTensor(t, backend);\n        // Count bytes for string tensors.\n        if (dtype === 'string') {\n            const info = this.state.tensorInfo.get(dataId);\n            const newBytes = bytesFromStringArray(backendVals);\n            this.state.numBytes += newBytes - info.bytes;\n            info.bytes = newBytes;\n        }\n        return t;\n    }\n    /**\n     * Internal method used by backends. Makes a new tensor\n     * that is a wrapper around an existing data id. It doesn't create\n     * a new data id, only increments the ref count used in memory tracking.\n     * @deprecated\n     */\n    makeTensorFromDataId(dataId, shape, dtype, backend) {\n        dtype = dtype || 'float32';\n        const tensorInfo = { dataId, shape, dtype };\n        return this.makeTensorFromTensorInfo(tensorInfo, backend);\n    }\n    /**\n     * Internal method used by backends. Makes a new tensor that is a wrapper\n     * around an existing data id in TensorInfo. It doesn't create a new data id,\n     * only increments the ref count used in memory tracking.\n     */\n    makeTensorFromTensorInfo(tensorInfo, backend) {\n        const { dataId, shape, dtype } = tensorInfo;\n        const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n        this.trackTensor(t, backend);\n        return t;\n    }\n    makeVariable(initialValue, trainable = true, name, dtype) {\n        name = name || this.nextVariableId().toString();\n        if (dtype != null && dtype !== initialValue.dtype) {\n            initialValue = initialValue.cast(dtype);\n        }\n        const v = new Variable(initialValue, trainable, name, this.nextTensorId());\n        if (this.state.registeredVariables[v.name] != null) {\n            throw new Error(`Variable with name ${v.name} was already registered`);\n        }\n        this.state.registeredVariables[v.name] = v;\n        this.incRef(v, this.backend);\n        return v;\n    }\n    trackTensor(a, backend) {\n        this.state.numTensors++;\n        if (a.dtype === 'string') {\n            this.state.numStringTensors++;\n        }\n        // Bytes for complex numbers are counted by their components. Bytes for\n        // string tensors are counted when writing values.\n        let bytes = 0;\n        if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n            bytes = a.size * util.bytesPerElement(a.dtype);\n        }\n        this.state.numBytes += bytes;\n        if (!this.state.tensorInfo.has(a.dataId)) {\n            this.state.numDataBuffers++;\n            this.state.tensorInfo.set(a.dataId, {\n                backend: backend || this.backend,\n                dtype: a.dtype,\n                shape: a.shape,\n                bytes\n            });\n        }\n        if (!(a instanceof Variable)) {\n            this.track(a);\n        }\n    }\n    // Track the tensor by dataId and increase the refCount for the dataId in the\n    // backend.\n    // TODO(pyu10055): This is currently used by makeVariable method, to increase\n    // refCount on the backend for the dataId. It can potentially be replaced with\n    // Identity op indead of calling backend directly.\n    incRef(a, backend) {\n        this.trackTensor(a, backend);\n        this.backend.incRef(a.dataId);\n    }\n    removeDataId(dataId, backend) {\n        if (this.state.tensorInfo.has(dataId) &&\n            this.state.tensorInfo.get(dataId).backend === backend) {\n            this.state.tensorInfo.delete(dataId);\n            this.state.numDataBuffers--;\n        }\n    }\n    disposeTensor(a) {\n        if (!this.state.tensorInfo.has(a.dataId)) {\n            return;\n        }\n        const info = this.state.tensorInfo.get(a.dataId);\n        this.state.numTensors--;\n        if (a.dtype === 'string') {\n            this.state.numStringTensors--;\n            this.state.numBytes -= info.bytes;\n        }\n        // Don't count bytes for complex numbers as they are counted by their\n        // components.\n        if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n            const bytes = a.size * util.bytesPerElement(a.dtype);\n            this.state.numBytes -= bytes;\n        }\n        // Remove the reference to dataId if backend dispose the data successfully\n        if (info.backend.disposeData(a.dataId)) {\n            this.removeDataId(a.dataId, info.backend);\n        }\n        // TODO(nsthorat): Construct an error and save the stack trace for\n        // debugging when in debug mode. Creating a stack trace is too expensive\n        // to do unconditionally.\n    }\n    disposeVariables() {\n        for (const varName in this.state.registeredVariables) {\n            const v = this.state.registeredVariables[varName];\n            this.disposeVariable(v);\n        }\n    }\n    disposeVariable(v) {\n        this.disposeTensor(v);\n        if (this.state.registeredVariables[v.name] != null) {\n            delete this.state.registeredVariables[v.name];\n        }\n    }\n    memory() {\n        const info = this.backend.memory();\n        info.numTensors = this.state.numTensors;\n        info.numDataBuffers = this.state.numDataBuffers;\n        info.numBytes = this.state.numBytes;\n        if (this.state.numStringTensors > 0) {\n            info.unreliable = true;\n            if (info.reasons == null) {\n                info.reasons = [];\n            }\n            info.reasons.push('Memory usage by string tensors is approximate ' +\n                '(2 bytes per character)');\n        }\n        return info;\n    }\n    async profile(query) {\n        this.state.profiling = true;\n        const startBytes = this.state.numBytes;\n        const startNumTensors = this.state.numTensors;\n        this.state.activeProfile.kernels = [];\n        this.state.activeProfile.result = await query();\n        this.state.profiling = false;\n        this.state.activeProfile.peakBytes = Math.max(...this.state.activeProfile.kernels.map(d => d.totalBytesSnapshot));\n        this.state.activeProfile.newBytes = this.state.numBytes - startBytes;\n        this.state.activeProfile.newTensors =\n            this.state.numTensors - startNumTensors;\n        for (const kernel of this.state.activeProfile.kernels) {\n            kernel.kernelTimeMs = await kernel.kernelTimeMs;\n            kernel.extraInfo = await kernel.extraInfo;\n        }\n        return this.state.activeProfile;\n    }\n    isTapeOn() {\n        return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;\n    }\n    addTapeNode(kernelName, inputs, outputs, gradientsFunc, saved, attrs) {\n        const tapeNode = { id: this.state.nextTapeNodeId++, kernelName, inputs, outputs, saved };\n        const gradConfig = getGradient(kernelName);\n        if (gradConfig != null) {\n            gradientsFunc = gradConfig.gradFunc;\n        }\n        if (gradientsFunc != null) {\n            tapeNode.gradient = (dys) => {\n                // TODO(smilkov): To optimize back-prop, pass dys that are not used in\n                // the backprop graph to the user as null instead of zeros\n                dys = dys.map((dy, i) => {\n                    if (dy == null) {\n                        const output = outputs[i];\n                        const vals = util.makeZerosTypedArray(output.size, output.dtype);\n                        return this.makeTensor(vals, output.shape, output.dtype);\n                    }\n                    return dy;\n                });\n                // Grad functions of ops with single outputs expect a dy, while ops\n                // with multiple outputs expect dys (array of dy).\n                return gradientsFunc(dys.length > 1 ? dys : dys[0], saved, attrs);\n            };\n        }\n        this.state.activeTape.push(tapeNode);\n    }\n    keep(result) {\n        result.kept = true;\n        return result;\n    }\n    startTape() {\n        if (this.state.gradientDepth === 0) {\n            this.state.activeTape = [];\n        }\n        this.state.gradientDepth++;\n    }\n    endTape() {\n        this.state.gradientDepth--;\n    }\n    /**\n     * Start a scope. Use this with endScope() to achieve the same functionality\n     * as scope() without the need for a function closure.\n     */\n    startScope(name) {\n        const scopeInfo = {\n            track: [],\n            name: 'unnamed scope',\n            id: this.state.nextScopeId++\n        };\n        if (name) {\n            scopeInfo.name = name;\n        }\n        this.state.scopeStack.push(scopeInfo);\n        this.state.activeScope = scopeInfo;\n    }\n    /**\n     * End a scope. Use this with startScope() to achieve the same functionality\n     * as scope() without the need for a function closure.\n     */\n    endScope(result) {\n        const tensorsToTrackInParent = getTensorsInContainer(result);\n        const tensorsToTrackInParentSet = new Set(tensorsToTrackInParent.map(t => t.id));\n        // Dispose the arrays tracked in this scope.\n        for (let i = 0; i < this.state.activeScope.track.length; i++) {\n            const tensor = this.state.activeScope.track[i];\n            if (!tensor.kept && !tensorsToTrackInParentSet.has(tensor.id)) {\n                tensor.dispose();\n            }\n        }\n        const oldScope = this.state.scopeStack.pop();\n        this.state.activeScope = this.state.scopeStack.length === 0 ?\n            null :\n            this.state.scopeStack[this.state.scopeStack.length - 1];\n        // Track the current result in the parent scope.\n        tensorsToTrackInParent.forEach(tensor => {\n            // Only track the tensor if was allocated in the inner scope and is not\n            // globally kept.\n            if (!tensor.kept && tensor.scopeId === oldScope.id) {\n                this.track(tensor);\n            }\n        });\n    }\n    /**\n     * Returns gradients of `f` with respect to each of the `xs`. The gradients\n     * returned are of the same length as `xs`, but some might be null if `f`\n     * was not a function of that `x`. It also takes optional dy to multiply the\n     * gradient, which defaults to `1`.\n     */\n    gradients(f, xs, dy, allowNoGradients = false) {\n        util.assert(xs.length > 0, () => 'gradients() received an empty list of xs.');\n        if (dy != null && dy.dtype !== 'float32') {\n            throw new Error(`dy must have 'float32' dtype, but has '${dy.dtype}'`);\n        }\n        const y = this.scopedRun(() => this.startTape(), () => this.endTape(), () => this.tidy('forward', f));\n        util.assert(y instanceof Tensor, () => 'The result y returned by f() must be a tensor.');\n        // Filter out the nodes that don't connect x => y.\n        const filteredTape = getFilteredNodesXToY(this.state.activeTape, xs, y);\n        if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) {\n            throw new Error('Cannot compute gradient of y=f(x) with respect to x. Make sure ' +\n                'that the f you passed encloses all operations that lead from x ' +\n                'to y.');\n        }\n        return this.tidy('backward', () => {\n            const accumulatedGradientMap = {};\n            accumulatedGradientMap[y.id] = (dy == null) ? ones(y.shape) : dy;\n            // Backprop gradients through the filtered nodes.\n            backpropagateGradients(accumulatedGradientMap, filteredTape, \n            // Pass the tidy function to avoid circular dep with `tape.ts`.\n            f => this.tidy(f), \n            // Pass an add function to avoide a circular dep with `tape.ts`.\n            add);\n            const grads = xs.map(x => accumulatedGradientMap[x.id]);\n            if (this.state.gradientDepth === 0) {\n                // This means that we are not computing higher-order gradients\n                // and can clean up the tape.\n                this.state.activeTape.forEach(node => {\n                    for (const tensor of node.saved) {\n                        tensor.dispose();\n                    }\n                });\n                this.state.activeTape = null;\n            }\n            return { value: y, grads };\n        });\n    }\n    customGrad(f) {\n        util.assert(util.isFunction(f), () => 'The f passed in customGrad(f) must be a function.');\n        return (...inputs) => {\n            util.assert(inputs.every(t => t instanceof Tensor), () => 'The args passed in customGrad(f)(x1, x2,...) must all be ' +\n                'tensors');\n            let res;\n            const inputMap = {};\n            inputs.forEach((input, i) => {\n                inputMap[i] = input;\n            });\n            const forwardFunc = (_, save) => {\n                res = f(...[...inputs, save]);\n                util.assert(res.value instanceof Tensor, () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.value` is a tensor');\n                util.assert(util.isFunction(res.gradFunc), () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.gradFunc` is a function.');\n                return res.value;\n            };\n            const backwardsFunc = (dy, saved) => {\n                const gradRes = res.gradFunc(dy, saved);\n                const grads = Array.isArray(gradRes) ? gradRes : [gradRes];\n                util.assert(grads.length === inputs.length, () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.gradFunc` is a function that returns ' +\n                    'the same number of tensors as inputs passed to f(...).');\n                util.assert(grads.every(t => t instanceof Tensor), () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.gradFunc` is a function that returns ' +\n                    'a list of only tensors.');\n                const gradMap = {};\n                grads.forEach((grad, i) => {\n                    gradMap[i] = () => grad;\n                });\n                return gradMap;\n            };\n            return this.runKernelFunc({\n                forwardFunc,\n                backwardsFunc,\n                inputs: inputMap,\n            });\n        };\n    }\n    readSync(dataId) {\n        // Route the read to the correct backend.\n        const info = this.state.tensorInfo.get(dataId);\n        return info.backend.readSync(dataId);\n    }\n    read(dataId) {\n        // Route the read to the correct backend.\n        const info = this.state.tensorInfo.get(dataId);\n        return info.backend.read(dataId);\n    }\n    readToGPU(dataId, options) {\n        // Route the read to the correct backend.\n        const info = this.state.tensorInfo.get(dataId);\n        return info.backend.readToGPU(dataId, options);\n    }\n    async time(query) {\n        const start = now();\n        const timingInfo = await this.backend.time(query);\n        timingInfo.wallMs = now() - start;\n        return timingInfo;\n    }\n    /**\n     * Tracks a Tensor in the current scope to be automatically cleaned up\n     * when the current scope ends, and returns the value.\n     *\n     * @param result The Tensor to track in the current scope.\n     */\n    track(result) {\n        if (this.state.activeScope != null) {\n            result.scopeId = this.state.activeScope.id;\n            this.state.activeScope.track.push(result);\n        }\n        return result;\n    }\n    get registeredVariables() {\n        return this.state.registeredVariables;\n    }\n    /**\n     * Resets the engine state. Removes all backends but does not remove\n     * registered backend factories.\n     */\n    reset() {\n        // Make any pending promise obsolete.\n        this.pendingBackendInitId++;\n        this.state.dispose();\n        this.ENV.reset();\n        this.state = new EngineState();\n        for (const backendName in this.registry) {\n            this.disposeRegisteredKernels(backendName);\n            this.registry[backendName].dispose();\n            delete this.registry[backendName];\n        }\n        this.backendName = null;\n        this.backendInstance = null;\n        this.pendingBackendInit = null;\n    }\n}\nEngine.nextTensorId = 0;\nEngine.nextVariableId = 0;\nexport { Engine };\nfunction ones(shape) {\n    const values = makeOnesTypedArray(sizeFromShape(shape), 'float32');\n    return ENGINE.makeTensor(values, shape, 'float32');\n}\nexport function getOrMakeEngine() {\n    const ns = getGlobalNamespace();\n    if (ns._tfengine == null) {\n        const environment = new Environment(ns);\n        ns._tfengine = new Engine(environment);\n    }\n    setEnvironmentGlobal(ns._tfengine.ENV);\n    // Tell the current tensor interface that the global engine is responsible\n    // for tracking.\n    setTensorTracker(() => ns._tfengine);\n    return ns._tfengine;\n}\nexport const ENGINE = getOrMakeEngine();\n/**\n * A implementation of the add op for use within engine and tape.\n *\n * This allows us to avoid a circular dependency between add.ts and engine.\n * It is exported to be available in tape tests.\n */\nexport function add(a, b) {\n    // We duplicate Add here to avoid a circular dependency with add.ts.\n    const inputs = { a, b };\n    return ENGINE.runKernel(Add, inputs);\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { isPromise } from './util_base';\n// Expects flags from URL in the format ?tfjsflags=FLAG1:1,FLAG2:true.\nconst TENSORFLOWJS_FLAGS_PREFIX = 'tfjsflags';\n/**\n * The environment contains evaluated flags as well as the registered platform.\n * This is always used as a global singleton and can be retrieved with\n * `tf.env()`.\n *\n * @doc {heading: 'Environment'}\n */\nexport class Environment {\n    // tslint:disable-next-line: no-any\n    constructor(global) {\n        this.global = global;\n        this.flags = {};\n        this.flagRegistry = {};\n        this.urlFlags = {};\n        // Jasmine spies on this in 'environment_test.ts'\n        this.getQueryParams = getQueryParams;\n        this.populateURLFlags();\n    }\n    setPlatform(platformName, platform) {\n        if (this.platform != null) {\n            if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n                console.warn(`Platform ${this.platformName} has already been set. ` +\n                    `Overwriting the platform with ${platformName}.`);\n            }\n        }\n        this.platformName = platformName;\n        this.platform = platform;\n    }\n    registerFlag(flagName, evaluationFn, setHook) {\n        this.flagRegistry[flagName] = { evaluationFn, setHook };\n        // Override the flag value from the URL. This has to happen here because\n        // the environment is initialized before flags get registered.\n        if (this.urlFlags[flagName] != null) {\n            const flagValue = this.urlFlags[flagName];\n            if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n                console.warn(`Setting feature override from URL ${flagName}: ${flagValue}.`);\n            }\n            this.set(flagName, flagValue);\n        }\n    }\n    async getAsync(flagName) {\n        if (flagName in this.flags) {\n            return this.flags[flagName];\n        }\n        this.flags[flagName] = await this.evaluateFlag(flagName);\n        return this.flags[flagName];\n    }\n    get(flagName) {\n        if (flagName in this.flags) {\n            return this.flags[flagName];\n        }\n        const flagValue = this.evaluateFlag(flagName);\n        if (isPromise(flagValue)) {\n            throw new Error(`Flag ${flagName} cannot be synchronously evaluated. ` +\n                `Please use getAsync() instead.`);\n        }\n        this.flags[flagName] = flagValue;\n        return this.flags[flagName];\n    }\n    getNumber(flagName) {\n        return this.get(flagName);\n    }\n    getBool(flagName) {\n        return this.get(flagName);\n    }\n    getString(flagName) {\n        return this.get(flagName);\n    }\n    getFlags() {\n        return this.flags;\n    }\n    // For backwards compatibility.\n    get features() {\n        return this.flags;\n    }\n    set(flagName, value) {\n        if (this.flagRegistry[flagName] == null) {\n            throw new Error(`Cannot set flag ${flagName} as it has not been registered.`);\n        }\n        this.flags[flagName] = value;\n        if (this.flagRegistry[flagName].setHook != null) {\n            this.flagRegistry[flagName].setHook(value);\n        }\n    }\n    evaluateFlag(flagName) {\n        if (this.flagRegistry[flagName] == null) {\n            throw new Error(`Cannot evaluate flag '${flagName}': no evaluation function found.`);\n        }\n        return this.flagRegistry[flagName].evaluationFn();\n    }\n    setFlags(flags) {\n        this.flags = Object.assign({}, flags);\n    }\n    reset() {\n        this.flags = {};\n        this.urlFlags = {};\n        this.populateURLFlags();\n    }\n    populateURLFlags() {\n        if (typeof this.global === 'undefined' ||\n            typeof this.global.location === 'undefined' ||\n            typeof this.global.location.search === 'undefined') {\n            return;\n        }\n        const urlParams = this.getQueryParams(this.global.location.search);\n        if (TENSORFLOWJS_FLAGS_PREFIX in urlParams) {\n            const keyValues = urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(',');\n            keyValues.forEach(keyValue => {\n                const [key, value] = keyValue.split(':');\n                this.urlFlags[key] = parseValue(key, value);\n            });\n        }\n    }\n}\nexport function getQueryParams(queryString) {\n    const params = {};\n    queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (s, ...t) => {\n        decodeParam(params, t[0], t[1]);\n        return t.join('=');\n    });\n    return params;\n}\nfunction decodeParam(params, name, value) {\n    params[decodeURIComponent(name)] = decodeURIComponent(value || '');\n}\nfunction parseValue(flagName, value) {\n    const lowerCaseValue = value.toLowerCase();\n    if (lowerCaseValue === 'true' || lowerCaseValue === 'false') {\n        return lowerCaseValue === 'true';\n    }\n    else if (`${+lowerCaseValue}` === lowerCaseValue) {\n        return +lowerCaseValue;\n    }\n    else {\n        return value;\n    }\n}\n/**\n * Returns the current environment (a global singleton).\n *\n * The environment object contains the evaluated feature values as well as the\n * active platform.\n *\n * @doc {heading: 'Environment'}\n */\nexport function env() {\n    return ENV;\n}\nexport let ENV = null;\nexport function setEnvironmentGlobal(environment) {\n    ENV = environment;\n}\n//# sourceMappingURL=data:application/json;base64,"],"names":["delayCallback","requestAnimationFrame","setImmediate","f","nextFrame","Promise","resolve","opHandler","buffer","cast","clone","print","_isNavigatorDefined","navigator","isMobileMockValue","mockIsMobile","value","isMobile","nav","undefined","product","a","userAgent","vendor","window","opera","navAny","userAgentData","mobile","test","substr","isBrowser","document","WorkerGlobalScope","isRegisteredKernelInvocation","kernelInvocation","kernelName","EngineState","constructor","this","registeredVariables","nextTapeNodeId","numBytes","numTensors","numStringTensors","numDataBuffers","gradientDepth","kernelDepth","scopeStack","numDataMovesStack","nextScopeId","tensorInfo","WeakMap","profiling","activeProfile","newBytes","newTensors","peakBytes","kernels","result","kernelNames","Array","from","Set","map","k","name","dispose","variableName","Engine","ENV","registry","registryFactory","pendingBackendInitId","state","ready","pendingBackendInit","then","backendInstance","sortedBackends","getSortedBackends","i","length","backendName","success","initializeBackend","setBackend","Error","backend","asyncInit","initializeBackendsAndReturnBest","backendNames","Object","keys","findBackend","findBackendFactory","factory","registerBackend","priority","setupRegisteredKernels","profiler","forEach","kernel","setupFunc","disposeRegisteredKernels","disposeFunc","registryFactoryEntry","promiseId","catch","err","stack","message","removeBackend","sort","b","moveData","dataId","info","get","srcBackend","values","readSync","refCount","disposeData","move","shape","dtype","shouldCheckForMemLeaks","tidy","nameOrFn","fn","String","scopedRun","startScope","endScope","console","error","start","end","res","ex","nextTensorId","nextVariableId","x","y","ENGINE","runKernel","inputs","grad","dy","gradInputs","attrs","saved","addTapeNode","activeScope","hasKernel","runKernelFunc","getBool","checkKernelForMemLeak","numDataIdsBefore","outInfos","numDataIdsAfter","numDataIds","numOutputDataIds","numMoves","dataIdsLeaked","kernelParams","outputs","isTapeOn","startingBytecount","startingNumTensors","kernelFunc","out","push","kernelOrScopeName","isArray","outTensors","outInfo","rank","makeTensorFromTensorInfo","tensorsToSave","getTensorsForGradient","saveTensorsForBackwardMode","forwardFunc","saveFunc","tensors","tensor","keep","outs","backwardsFunc","kernelProfile","profileKernel","logKernelProfile","bytesAdded","totalBytesSnapshot","tensorsAdded","totalTensorsSnapshot","inputShapes","key","outputShapes","item","kernelTimeMs","timeMs","extraInfo","gradConfig","inputsToSave","outputsToSave","inputTensorsToSave","saveAllInputs","inputName","outputTensorsToSave","filter","_","concat","makeTensor","backendVals","d","write","t","trackTensor","bytes","makeTensorFromDataId","makeVariable","initialValue","trainable","toString","v","incRef","size","has","set","track","removeDataId","delete","disposeTensor","disposeVariables","varName","disposeVariable","memory","unreliable","reasons","profile","query","startBytes","startNumTensors","Math","max","gradientsFunc","tapeNode","id","gradFunc","gradient","dys","output","vals","activeTape","kept","startTape","endTape","scopeInfo","tensorsToTrackInParent","tensorsToTrackInParentSet","oldScope","pop","scopeId","gradients","xs","allowNoGradients","filteredTape","accumulatedGradientMap","ones","add","grads","node","customGrad","every","inputMap","input","save","gradRes","gradMap","read","readToGPU","options","time","now","timingInfo","wallMs","reset","getOrMakeEngine","ns","_tfengine","environment","TENSORFLOWJS_FLAGS_PREFIX","Environment","global","flags","flagRegistry","urlFlags","getQueryParams","populateURLFlags","setPlatform","platformName","platform","env","warn","registerFlag","flagName","evaluationFn","setHook","flagValue","getAsync","evaluateFlag","getNumber","getString","getFlags","features","setFlags","assign","location","search","urlParams","keyValues","split","keyValue","parseValue","queryString","params","replace","s","decodeParam","join","decodeURIComponent","lowerCaseValue","toLowerCase","setEnvironmentGlobal"],"sourceRoot":""}