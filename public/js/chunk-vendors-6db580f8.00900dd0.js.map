{"version":3,"file":"js/chunk-vendors-6db580f8.00900dd0.js","mappings":"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","sources":["webpack://benefit/./node_modules/@tensorflow/tfjs-core/dist/profiler.js","webpack://benefit/./node_modules/@tensorflow/tfjs-core/dist/serialization.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nimport * as util from './util';\nexport class Profiler {\n    constructor(backendTimer, logger) {\n        this.backendTimer = backendTimer;\n        this.logger = logger;\n        if (logger == null) {\n            this.logger = new Logger();\n        }\n    }\n    profileKernel(kernelName, inputs, f) {\n        let outputs;\n        const holdResultWrapperFn = () => {\n            outputs = f();\n        };\n        let timer;\n        const start = util.now();\n        if (this.backendTimer.timerAvailable()) {\n            timer = this.backendTimer.time(holdResultWrapperFn);\n        }\n        else {\n            holdResultWrapperFn();\n            for (const output of outputs) {\n                output.dataSync();\n            }\n            timer = Promise.resolve({ kernelMs: util.now() - start });\n        }\n        if (env().getBool('CHECK_COMPUTATION_FOR_ERRORS')) {\n            for (let i = 0; i < outputs.length; i++) {\n                const output = outputs[i];\n                // Dangling promise here because we don't want to propagate up\n                // asynchronicity.\n                output.data().then(tensorVals => {\n                    checkComputationForErrors(tensorVals, output.dtype, kernelName);\n                });\n            }\n        }\n        const kernelProfile = {\n            kernelName,\n            outputs,\n            inputs,\n            timeMs: timer.then(timing => timing.kernelMs),\n            extraInfo: timer.then(timing => timing.getExtraProfileInfo != null ?\n                timing.getExtraProfileInfo() :\n                '')\n        };\n        return kernelProfile;\n    }\n    logKernelProfile(kernelProfile) {\n        const { kernelName, outputs, timeMs, inputs, extraInfo } = kernelProfile;\n        outputs.forEach(result => {\n            Promise.all([result.data(), timeMs, extraInfo]).then(valueContainer => {\n                this.logger.logKernelProfile(kernelName, result, valueContainer[0], valueContainer[1], inputs, valueContainer[2]);\n            });\n        });\n    }\n}\nexport function checkComputationForErrors(vals, dtype, kernelName) {\n    if (dtype !== 'float32') {\n        // Only floating point computations will generate NaN values\n        return false;\n    }\n    for (let i = 0; i < vals.length; i++) {\n        const num = vals[i];\n        if (isNaN(num) || !isFinite(num)) {\n            // Throwing custom exception so behavior is testable.\n            console.warn(`Found ${num} in the result of '${kernelName}'`);\n            return true;\n        }\n    }\n    return false;\n}\nexport class Logger {\n    logKernelProfile(name, result, vals, timeMs, inputs, extraInfo) {\n        const time = typeof timeMs === 'number' ? util.rightPad(`${timeMs}ms`, 9) :\n            timeMs['error'];\n        const paddedName = util.rightPad(name, 25);\n        const rank = result.rank;\n        const size = result.size;\n        const shape = util.rightPad(result.shape.toString(), 14);\n        let inputShapesDescription = '';\n        for (const name in inputs) {\n            const input = inputs[name];\n            if (input != null) {\n                // The input might be a non-tensor (e.g HTMLImageElement), in which case\n                // we claim the output shape as input shape.\n                const inputShape = input.shape || result.shape;\n                const inputRank = inputShape.length;\n                inputShapesDescription +=\n                    `${name}: ${inputRank}D ${inputRank > 0 ? inputShape : ''} `;\n            }\n        }\n        console.log(`%c${paddedName}\\t%c${time}\\t%c${rank}D ${shape}\\t%c${size}\\t%c${inputShapesDescription}\\t%c${extraInfo}`, 'font-weight:bold', 'color:red', 'color:blue', 'color: orange', 'color: green', 'color: steelblue');\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { assert } from './util';\n/**\n * Maps to mapping between the custom object and its name.\n *\n * After registering a custom class, these two maps will add key-value pairs\n * for the class object and the registered name.\n *\n * Therefore we can get the relative registered name by calling\n * getRegisteredName() function.\n *\n * For example:\n * GLOBAL_CUSTOM_OBJECT: {key=registeredName: value=corresponding\n * CustomObjectClass}\n *\n * GLOBAL_CUSTOM_NAMES: {key=CustomObjectClass: value=corresponding\n * registeredName}\n *\n */\nconst GLOBAL_CUSTOM_OBJECT = new Map();\nconst GLOBAL_CUSTOM_NAMES = new Map();\n/**\n * Serializable defines the serialization contract.\n *\n * TFJS requires serializable classes to return their className when asked\n * to avoid issues with minification.\n */\nexport class Serializable {\n    /**\n     * Return the class name for this class to use in serialization contexts.\n     *\n     * Generally speaking this will be the same thing that constructor.name\n     * would have returned.  However, the class name needs to be robust\n     * against minification for serialization/deserialization to work properly.\n     *\n     * There's also places such as initializers.VarianceScaling, where\n     * implementation details between different languages led to different\n     * class hierarchies and a non-leaf node is used for serialization purposes.\n     */\n    getClassName() {\n        return this.constructor\n            .className;\n    }\n    /**\n     * Creates an instance of T from a ConfigDict.\n     *\n     * This works for most descendants of serializable.  A few need to\n     * provide special handling.\n     * @param cls A Constructor for the class to instantiate.\n     * @param config The Configuration for the object.\n     */\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        return new cls(config);\n    }\n}\n/**\n * Maps string keys to class constructors.\n *\n * Used during (de)serialization from the cross-language JSON format, which\n * requires the class name in the serialization format matches the class\n * names as used in Python, should it exist.\n */\nexport class SerializationMap {\n    constructor() {\n        this.classNameMap = {};\n    }\n    /**\n     * Returns the singleton instance of the map.\n     */\n    static getMap() {\n        if (SerializationMap.instance == null) {\n            SerializationMap.instance = new SerializationMap();\n        }\n        return SerializationMap.instance;\n    }\n    /**\n     * Registers the class as serializable.\n     */\n    static register(cls) {\n        SerializationMap.getMap().classNameMap[cls.className] =\n            [cls, cls.fromConfig];\n    }\n}\n/**\n * Register a class with the serialization map of TensorFlow.js.\n *\n * This is often used for registering custom Layers, so they can be\n * serialized and deserialized.\n *\n * Example 1. Register the class without package name and specified name.\n *\n * ```js\n * class MyCustomLayer extends tf.layers.Layer {\n *   static className = 'MyCustomLayer';\n *\n *   constructor(config) {\n *     super(config);\n *   }\n * }\n * tf.serialization.registerClass(MyCustomLayer);\n * console.log(tf.serialization.GLOBALCUSTOMOBJECT.get(\"Custom>MyCustomLayer\"));\n * console.log(tf.serialization.GLOBALCUSTOMNAMES.get(MyCustomLayer));\n * ```\n *\n * Example 2. Register the class with package name: \"Package\" and specified\n * name: \"MyLayer\".\n * ```js\n * class MyCustomLayer extends tf.layers.Layer {\n *   static className = 'MyCustomLayer';\n *\n *   constructor(config) {\n *     super(config);\n *   }\n * }\n * tf.serialization.registerClass(MyCustomLayer, \"Package\", \"MyLayer\");\n * console.log(tf.serialization.GLOBALCUSTOMOBJECT.get(\"Package>MyLayer\"));\n * console.log(tf.serialization.GLOBALCUSTOMNAMES.get(MyCustomLayer));\n * ```\n *\n * Example 3. Register the class with specified name: \"MyLayer\".\n * ```js\n * class MyCustomLayer extends tf.layers.Layer {\n *   static className = 'MyCustomLayer';\n *\n *   constructor(config) {\n *     super(config);\n *   }\n * }\n * tf.serialization.registerClass(MyCustomLayer, undefined, \"MyLayer\");\n * console.log(tf.serialization.GLOBALCUSTOMOBJECT.get(\"Custom>MyLayer\"));\n * console.log(tf.serialization.GLOBALCUSTOMNAMES.get(MyCustomLayer));\n * ```\n *\n * Example 4. Register the class with specified package name: \"Package\".\n * ```js\n * class MyCustomLayer extends tf.layers.Layer {\n *   static className = 'MyCustomLayer';\n *\n *   constructor(config) {\n *     super(config);\n *   }\n * }\n * tf.serialization.registerClass(MyCustomLayer, \"Package\");\n * console.log(tf.serialization.GLOBALCUSTOMOBJECT\n * .get(\"Package>MyCustomLayer\"));\n * console.log(tf.serialization.GLOBALCUSTOMNAMES\n * .get(MyCustomLayer));\n * ```\n *\n * @param cls The class to be registered. It must have a public static member\n *   called `className` defined and the value must be a non-empty string.\n * @param pkg The pakcage name that this class belongs to. This used to define\n *     the key in GlobalCustomObject. If not defined, it defaults to `Custom`.\n * @param name The name that user specified. It defaults to the actual name of\n *     the class as specified by its static `className` property.\n * @doc {heading: 'Models', subheading: 'Serialization', ignoreCI: true}\n */\nexport function registerClass(cls, pkg, name) {\n    assert(cls.className != null, () => `Class being registered does not have the static className ` +\n        `property defined.`);\n    assert(typeof cls.className === 'string', () => `className is required to be a string, but got type ` +\n        typeof cls.className);\n    assert(cls.className.length > 0, () => `Class being registered has an empty-string as its className, ` +\n        `which is disallowed.`);\n    if (typeof pkg === 'undefined') {\n        pkg = 'Custom';\n    }\n    if (typeof name === 'undefined') {\n        name = cls.className;\n    }\n    const className = name;\n    const registerName = pkg + '>' + className;\n    SerializationMap.register(cls);\n    GLOBAL_CUSTOM_OBJECT.set(registerName, cls);\n    GLOBAL_CUSTOM_NAMES.set(cls, registerName);\n    return cls;\n}\n/**\n * Get the registered name of a class. If the class has not been registered,\n * return the class name.\n *\n * @param cls The class we want to get register name for. It must have a public\n *     static member called `className` defined.\n * @returns registered name or class name.\n */\nexport function getRegisteredName(cls) {\n    if (GLOBAL_CUSTOM_NAMES.has(cls)) {\n        return GLOBAL_CUSTOM_NAMES.get(cls);\n    }\n    else {\n        return cls.className;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,"],"names":["Profiler","constructor","backendTimer","logger","this","Logger","profileKernel","kernelName","inputs","f","outputs","holdResultWrapperFn","timer","start","timerAvailable","time","output","dataSync","Promise","resolve","kernelMs","getBool","i","length","data","then","tensorVals","checkComputationForErrors","dtype","kernelProfile","timeMs","timing","extraInfo","getExtraProfileInfo","logKernelProfile","forEach","result","all","valueContainer","vals","num","isNaN","isFinite","console","warn","name","paddedName","rank","size","shape","toString","inputShapesDescription","input","inputShape","inputRank","log","GLOBAL_CUSTOM_OBJECT","Map","GLOBAL_CUSTOM_NAMES","Serializable","getClassName","className","fromConfig","cls","config","SerializationMap","classNameMap","getMap","instance","register","registerClass","pkg","registerName","set"],"sourceRoot":""}